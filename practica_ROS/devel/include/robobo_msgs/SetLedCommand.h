// Generated by gencpp from file robobo_msgs/SetLedCommand.msg
// DO NOT EDIT!


#ifndef ROBOBO_MSGS_MESSAGE_SETLEDCOMMAND_H
#define ROBOBO_MSGS_MESSAGE_SETLEDCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/String.h>
#include <std_msgs/String.h>

namespace robobo_msgs
{
template <class ContainerAllocator>
struct SetLedCommand_
{
  typedef SetLedCommand_<ContainerAllocator> Type;

  SetLedCommand_()
    : id()
    , color()  {
    }
  SetLedCommand_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , color(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::String_<ContainerAllocator>  _id_type;
  _id_type id;

   typedef  ::std_msgs::String_<ContainerAllocator>  _color_type;
  _color_type color;





  typedef boost::shared_ptr< ::robobo_msgs::SetLedCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robobo_msgs::SetLedCommand_<ContainerAllocator> const> ConstPtr;

}; // struct SetLedCommand_

typedef ::robobo_msgs::SetLedCommand_<std::allocator<void> > SetLedCommand;

typedef boost::shared_ptr< ::robobo_msgs::SetLedCommand > SetLedCommandPtr;
typedef boost::shared_ptr< ::robobo_msgs::SetLedCommand const> SetLedCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robobo_msgs::SetLedCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robobo_msgs::SetLedCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robobo_msgs::SetLedCommand_<ContainerAllocator1> & lhs, const ::robobo_msgs::SetLedCommand_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.color == rhs.color;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robobo_msgs::SetLedCommand_<ContainerAllocator1> & lhs, const ::robobo_msgs::SetLedCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robobo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robobo_msgs::SetLedCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robobo_msgs::SetLedCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robobo_msgs::SetLedCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robobo_msgs::SetLedCommand_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robobo_msgs::SetLedCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robobo_msgs::SetLedCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robobo_msgs::SetLedCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "67de51c92b3fb96ec94dabeed286e658";
  }

  static const char* value(const ::robobo_msgs::SetLedCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x67de51c92b3fb96eULL;
  static const uint64_t static_value2 = 0xc94dabeed286e658ULL;
};

template<class ContainerAllocator>
struct DataType< ::robobo_msgs::SetLedCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robobo_msgs/SetLedCommand";
  }

  static const char* value(const ::robobo_msgs::SetLedCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robobo_msgs::SetLedCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Commands the robot to change a led to a predifined color\n"
"#\n"
"# Led identifier; posible values: Front-C, Front-R, \n"
"# Front-RR, Front-L, Front-LL, Front-C, Back-R, Back-L, all.\n"
"std_msgs/String id\n"
"# Color to set the values to; posible values: white,\n"
"# red, blue, cyan, magenta, yellow, green, orange, off.\n"
"std_msgs/String color\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::robobo_msgs::SetLedCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robobo_msgs::SetLedCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.color);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetLedCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robobo_msgs::SetLedCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robobo_msgs::SetLedCommand_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.id);
    s << indent << "color: ";
    s << std::endl;
    Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "  ", v.color);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOBO_MSGS_MESSAGE_SETLEDCOMMAND_H
