// Generated by gencpp from file robobo_msgs/Lane.msg
// DO NOT EDIT!


#ifndef ROBOBO_MSGS_MESSAGE_LANE_H
#define ROBOBO_MSGS_MESSAGE_LANE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>

namespace robobo_msgs
{
template <class ContainerAllocator>
struct Lane_
{
  typedef Lane_<ContainerAllocator> Type;

  Lane_()
    : header()
    , coeffs1()
    , coeffs2()
    , minv()  {
    }
  Lane_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , coeffs1(_alloc)
    , coeffs2(_alloc)
    , minv(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _coeffs1_type;
  _coeffs1_type coeffs1;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _coeffs2_type;
  _coeffs2_type coeffs2;

   typedef std::vector<double, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<double>> _minv_type;
  _minv_type minv;





  typedef boost::shared_ptr< ::robobo_msgs::Lane_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robobo_msgs::Lane_<ContainerAllocator> const> ConstPtr;

}; // struct Lane_

typedef ::robobo_msgs::Lane_<std::allocator<void> > Lane;

typedef boost::shared_ptr< ::robobo_msgs::Lane > LanePtr;
typedef boost::shared_ptr< ::robobo_msgs::Lane const> LaneConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robobo_msgs::Lane_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robobo_msgs::Lane_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robobo_msgs::Lane_<ContainerAllocator1> & lhs, const ::robobo_msgs::Lane_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.coeffs1 == rhs.coeffs1 &&
    lhs.coeffs2 == rhs.coeffs2 &&
    lhs.minv == rhs.minv;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robobo_msgs::Lane_<ContainerAllocator1> & lhs, const ::robobo_msgs::Lane_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robobo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robobo_msgs::Lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robobo_msgs::Lane_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robobo_msgs::Lane_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robobo_msgs::Lane_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robobo_msgs::Lane_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robobo_msgs::Lane_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robobo_msgs::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ed37440a232a49de70e6d2b24a87f8b8";
  }

  static const char* value(const ::robobo_msgs::Lane_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xed37440a232a49deULL;
  static const uint64_t static_value2 = 0x70e6d2b24a87f8b8ULL;
};

template<class ContainerAllocator>
struct DataType< ::robobo_msgs::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robobo_msgs/Lane";
  }

  static const char* value(const ::robobo_msgs::Lane_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robobo_msgs::Lane_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Represents a detected lane (two lines)\n"
"#\n"
"# Metadata about the frame detected\n"
"std_msgs/Header header\n"
"# Coefficients of the first line\n"
"float64[] coeffs1\n"
"# Coefficients of the second line\n"
"float64[] coeffs2\n"
"# Inverse transformation matrix, this should be used if the\n"
"# frame's perspective was transormed; else will be empty.\n"
"float64[] minv \n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
;
  }

  static const char* value(const ::robobo_msgs::Lane_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robobo_msgs::Lane_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.coeffs1);
      stream.next(m.coeffs2);
      stream.next(m.minv);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Lane_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robobo_msgs::Lane_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robobo_msgs::Lane_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "coeffs1[]" << std::endl;
    for (size_t i = 0; i < v.coeffs1.size(); ++i)
    {
      s << indent << "  coeffs1[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.coeffs1[i]);
    }
    s << indent << "coeffs2[]" << std::endl;
    for (size_t i = 0; i < v.coeffs2.size(); ++i)
    {
      s << indent << "  coeffs2[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.coeffs2[i]);
    }
    s << indent << "minv[]" << std::endl;
    for (size_t i = 0; i < v.minv.size(); ++i)
    {
      s << indent << "  minv[" << i << "]: ";
      Printer<double>::stream(s, indent + "  ", v.minv[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOBO_MSGS_MESSAGE_LANE_H
