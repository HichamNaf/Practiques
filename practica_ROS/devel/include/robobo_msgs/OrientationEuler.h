// Generated by gencpp from file robobo_msgs/OrientationEuler.msg
// DO NOT EDIT!


#ifndef ROBOBO_MSGS_MESSAGE_ORIENTATIONEULER_H
#define ROBOBO_MSGS_MESSAGE_ORIENTATIONEULER_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Vector3.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>
#include <std_msgs/Float64.h>

namespace robobo_msgs
{
template <class ContainerAllocator>
struct OrientationEuler_
{
  typedef OrientationEuler_<ContainerAllocator> Type;

  OrientationEuler_()
    : vector()
    , yaw()
    , pitch()
    , roll()  {
    }
  OrientationEuler_(const ContainerAllocator& _alloc)
    : vector(_alloc)
    , yaw(_alloc)
    , pitch(_alloc)
    , roll(_alloc)  {
  (void)_alloc;
    }



   typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _vector_type;
  _vector_type vector;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _yaw_type;
  _yaw_type yaw;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _pitch_type;
  _pitch_type pitch;

   typedef  ::std_msgs::Float64_<ContainerAllocator>  _roll_type;
  _roll_type roll;





  typedef boost::shared_ptr< ::robobo_msgs::OrientationEuler_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robobo_msgs::OrientationEuler_<ContainerAllocator> const> ConstPtr;

}; // struct OrientationEuler_

typedef ::robobo_msgs::OrientationEuler_<std::allocator<void> > OrientationEuler;

typedef boost::shared_ptr< ::robobo_msgs::OrientationEuler > OrientationEulerPtr;
typedef boost::shared_ptr< ::robobo_msgs::OrientationEuler const> OrientationEulerConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robobo_msgs::OrientationEuler_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robobo_msgs::OrientationEuler_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robobo_msgs::OrientationEuler_<ContainerAllocator1> & lhs, const ::robobo_msgs::OrientationEuler_<ContainerAllocator2> & rhs)
{
  return lhs.vector == rhs.vector &&
    lhs.yaw == rhs.yaw &&
    lhs.pitch == rhs.pitch &&
    lhs.roll == rhs.roll;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robobo_msgs::OrientationEuler_<ContainerAllocator1> & lhs, const ::robobo_msgs::OrientationEuler_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robobo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robobo_msgs::OrientationEuler_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robobo_msgs::OrientationEuler_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robobo_msgs::OrientationEuler_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robobo_msgs::OrientationEuler_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robobo_msgs::OrientationEuler_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robobo_msgs::OrientationEuler_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robobo_msgs::OrientationEuler_<ContainerAllocator> >
{
  static const char* value()
  {
    return "65c4e234a4ea295f537af690b4738286";
  }

  static const char* value(const ::robobo_msgs::OrientationEuler_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x65c4e234a4ea295fULL;
  static const uint64_t static_value2 = 0x537af690b4738286ULL;
};

template<class ContainerAllocator>
struct DataType< ::robobo_msgs::OrientationEuler_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robobo_msgs/OrientationEuler";
  }

  static const char* value(const ::robobo_msgs::OrientationEuler_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robobo_msgs::OrientationEuler_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Represents a orientation using euler angles (yaw, pitch, roll)\n"
"\n"
"# Orientation vector in euler angles\n"
"geometry_msgs/Vector3 vector\n"
"\n"
"# Yaw degrees\n"
"std_msgs/Float64 yaw\n"
"# Pitch degrees\n"
"std_msgs/Float64 pitch\n"
"# Roll degrees \n"
"std_msgs/Float64 roll \n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"================================================================================\n"
"MSG: std_msgs/Float64\n"
"float64 data\n"
;
  }

  static const char* value(const ::robobo_msgs::OrientationEuler_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robobo_msgs::OrientationEuler_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.vector);
      stream.next(m.yaw);
      stream.next(m.pitch);
      stream.next(m.roll);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct OrientationEuler_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robobo_msgs::OrientationEuler_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robobo_msgs::OrientationEuler_<ContainerAllocator>& v)
  {
    s << indent << "vector: ";
    s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.vector);
    s << indent << "yaw: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.yaw);
    s << indent << "pitch: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.pitch);
    s << indent << "roll: ";
    s << std::endl;
    Printer< ::std_msgs::Float64_<ContainerAllocator> >::stream(s, indent + "  ", v.roll);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOBO_MSGS_MESSAGE_ORIENTATIONEULER_H
