// Generated by gencpp from file robobo_msgs/SetLoadRequest.msg
// DO NOT EDIT!


#ifndef ROBOBO_MSGS_MESSAGE_SETLOADREQUEST_H
#define ROBOBO_MSGS_MESSAGE_SETLOADREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace robobo_msgs
{
template <class ContainerAllocator>
struct SetLoadRequest_
{
  typedef SetLoadRequest_<ContainerAllocator> Type;

  SetLoadRequest_()
    : power_load(0.0)  {
    }
  SetLoadRequest_(const ContainerAllocator& _alloc)
    : power_load(0.0)  {
  (void)_alloc;
    }



   typedef double _power_load_type;
  _power_load_type power_load;





  typedef boost::shared_ptr< ::robobo_msgs::SetLoadRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robobo_msgs::SetLoadRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetLoadRequest_

typedef ::robobo_msgs::SetLoadRequest_<std::allocator<void> > SetLoadRequest;

typedef boost::shared_ptr< ::robobo_msgs::SetLoadRequest > SetLoadRequestPtr;
typedef boost::shared_ptr< ::robobo_msgs::SetLoadRequest const> SetLoadRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robobo_msgs::SetLoadRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robobo_msgs::SetLoadRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robobo_msgs::SetLoadRequest_<ContainerAllocator1> & lhs, const ::robobo_msgs::SetLoadRequest_<ContainerAllocator2> & rhs)
{
  return lhs.power_load == rhs.power_load;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robobo_msgs::SetLoadRequest_<ContainerAllocator1> & lhs, const ::robobo_msgs::SetLoadRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robobo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robobo_msgs::SetLoadRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robobo_msgs::SetLoadRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robobo_msgs::SetLoadRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robobo_msgs::SetLoadRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robobo_msgs::SetLoadRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robobo_msgs::SetLoadRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robobo_msgs::SetLoadRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7cd53c13de09669f029d5e2239a4cfe1";
  }

  static const char* value(const ::robobo_msgs::SetLoadRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7cd53c13de09669fULL;
  static const uint64_t static_value2 = 0x029d5e2239a4cfe1ULL;
};

template<class ContainerAllocator>
struct DataType< ::robobo_msgs::SetLoadRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robobo_msgs/SetLoadRequest";
  }

  static const char* value(const ::robobo_msgs::SetLoadRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robobo_msgs::SetLoadRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 power_load\n"
;
  }

  static const char* value(const ::robobo_msgs::SetLoadRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robobo_msgs::SetLoadRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.power_load);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetLoadRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robobo_msgs::SetLoadRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robobo_msgs::SetLoadRequest_<ContainerAllocator>& v)
  {
    s << indent << "power_load: ";
    Printer<double>::stream(s, indent + "  ", v.power_load);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOBO_MSGS_MESSAGE_SETLOADREQUEST_H
