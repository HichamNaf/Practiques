// Generated by gencpp from file robobo_msgs/SetCameraCommand.msg
// DO NOT EDIT!


#ifndef ROBOBO_MSGS_MESSAGE_SETCAMERACOMMAND_H
#define ROBOBO_MSGS_MESSAGE_SETCAMERACOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Int8.h>

namespace robobo_msgs
{
template <class ContainerAllocator>
struct SetCameraCommand_
{
  typedef SetCameraCommand_<ContainerAllocator> Type;

  SetCameraCommand_()
    : camera()  {
    }
  SetCameraCommand_(const ContainerAllocator& _alloc)
    : camera(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Int8_<ContainerAllocator>  _camera_type;
  _camera_type camera;





  typedef boost::shared_ptr< ::robobo_msgs::SetCameraCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robobo_msgs::SetCameraCommand_<ContainerAllocator> const> ConstPtr;

}; // struct SetCameraCommand_

typedef ::robobo_msgs::SetCameraCommand_<std::allocator<void> > SetCameraCommand;

typedef boost::shared_ptr< ::robobo_msgs::SetCameraCommand > SetCameraCommandPtr;
typedef boost::shared_ptr< ::robobo_msgs::SetCameraCommand const> SetCameraCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robobo_msgs::SetCameraCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robobo_msgs::SetCameraCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robobo_msgs::SetCameraCommand_<ContainerAllocator1> & lhs, const ::robobo_msgs::SetCameraCommand_<ContainerAllocator2> & rhs)
{
  return lhs.camera == rhs.camera;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robobo_msgs::SetCameraCommand_<ContainerAllocator1> & lhs, const ::robobo_msgs::SetCameraCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robobo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robobo_msgs::SetCameraCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robobo_msgs::SetCameraCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robobo_msgs::SetCameraCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robobo_msgs::SetCameraCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robobo_msgs::SetCameraCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robobo_msgs::SetCameraCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robobo_msgs::SetCameraCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f58deb2ef48d6f096e653df51bb44a22";
  }

  static const char* value(const ::robobo_msgs::SetCameraCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf58deb2ef48d6f09ULL;
  static const uint64_t static_value2 = 0x6e653df51bb44a22ULL;
};

template<class ContainerAllocator>
struct DataType< ::robobo_msgs::SetCameraCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robobo_msgs/SetCameraCommand";
  }

  static const char* value(const ::robobo_msgs::SetCameraCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robobo_msgs::SetCameraCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Commands the robot to change the camera \n"
"#\n"
"# Identifier of the camera to use:\n"
"# 0 for front camera\n"
"# 1 for back cameras\n"
"std_msgs/Int8 camera   \n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Int8\n"
"int8 data\n"
;
  }

  static const char* value(const ::robobo_msgs::SetCameraCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robobo_msgs::SetCameraCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.camera);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetCameraCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robobo_msgs::SetCameraCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robobo_msgs::SetCameraCommand_<ContainerAllocator>& v)
  {
    s << indent << "camera: ";
    s << std::endl;
    Printer< ::std_msgs::Int8_<ContainerAllocator> >::stream(s, indent + "  ", v.camera);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOBO_MSGS_MESSAGE_SETCAMERACOMMAND_H
