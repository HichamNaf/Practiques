// Generated by gencpp from file robobo_msgs/QrCode.msg
// DO NOT EDIT!


#ifndef ROBOBO_MSGS_MESSAGE_QRCODE_H
#define ROBOBO_MSGS_MESSAGE_QRCODE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <opencv_apps/Point2D.h>
#include <opencv_apps/Point2D.h>

namespace robobo_msgs
{
template <class ContainerAllocator>
struct QrCode_
{
  typedef QrCode_<ContainerAllocator> Type;

  QrCode_()
    : header()
    , text()
    , distance(0.0)
    , center()
    , result_points()  {
    }
  QrCode_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , text(_alloc)
    , distance(0.0)
    , center(_alloc)
    , result_points(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _text_type;
  _text_type text;

   typedef float _distance_type;
  _distance_type distance;

   typedef  ::opencv_apps::Point2D_<ContainerAllocator>  _center_type;
  _center_type center;

   typedef std::vector< ::opencv_apps::Point2D_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::opencv_apps::Point2D_<ContainerAllocator> >> _result_points_type;
  _result_points_type result_points;





  typedef boost::shared_ptr< ::robobo_msgs::QrCode_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robobo_msgs::QrCode_<ContainerAllocator> const> ConstPtr;

}; // struct QrCode_

typedef ::robobo_msgs::QrCode_<std::allocator<void> > QrCode;

typedef boost::shared_ptr< ::robobo_msgs::QrCode > QrCodePtr;
typedef boost::shared_ptr< ::robobo_msgs::QrCode const> QrCodeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robobo_msgs::QrCode_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robobo_msgs::QrCode_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robobo_msgs::QrCode_<ContainerAllocator1> & lhs, const ::robobo_msgs::QrCode_<ContainerAllocator2> & rhs)
{
  return lhs.header == rhs.header &&
    lhs.text == rhs.text &&
    lhs.distance == rhs.distance &&
    lhs.center == rhs.center &&
    lhs.result_points == rhs.result_points;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robobo_msgs::QrCode_<ContainerAllocator1> & lhs, const ::robobo_msgs::QrCode_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robobo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robobo_msgs::QrCode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robobo_msgs::QrCode_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robobo_msgs::QrCode_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robobo_msgs::QrCode_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robobo_msgs::QrCode_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robobo_msgs::QrCode_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robobo_msgs::QrCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "262c4f53965b665792eece06f2421ea5";
  }

  static const char* value(const ::robobo_msgs::QrCode_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x262c4f53965b6657ULL;
  static const uint64_t static_value2 = 0x92eece06f2421ea5ULL;
};

template<class ContainerAllocator>
struct DataType< ::robobo_msgs::QrCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robobo_msgs/QrCode";
  }

  static const char* value(const ::robobo_msgs::QrCode_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robobo_msgs::QrCode_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Represents a detected QR Code\n"
"#\n"
"# Metadata about the frame\n"
"Header header\n"
"# Text contained on the QR Code\n"
"string text\n"
"# Distance between the center of the code and\n"
"# the first result point\n"
"float32 distance\n"
"# Coordinate of the center of the code\n"
"opencv_apps/Point2D center\n"
"# Vector of coordinates of the result points\n"
"opencv_apps/Point2D[] result_points \n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: opencv_apps/Point2D\n"
"float64 x\n"
"float64 y\n"
"\n"
;
  }

  static const char* value(const ::robobo_msgs::QrCode_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robobo_msgs::QrCode_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.text);
      stream.next(m.distance);
      stream.next(m.center);
      stream.next(m.result_points);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QrCode_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robobo_msgs::QrCode_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robobo_msgs::QrCode_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "text: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.text);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "center: ";
    s << std::endl;
    Printer< ::opencv_apps::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.center);
    s << indent << "result_points[]" << std::endl;
    for (size_t i = 0; i < v.result_points.size(); ++i)
    {
      s << indent << "  result_points[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::opencv_apps::Point2D_<ContainerAllocator> >::stream(s, indent + "    ", v.result_points[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOBO_MSGS_MESSAGE_QRCODE_H
