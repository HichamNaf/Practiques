// Generated by gencpp from file robobo_msgs/QrCodeChange.msg
// DO NOT EDIT!


#ifndef ROBOBO_MSGS_MESSAGE_QRCODECHANGE_H
#define ROBOBO_MSGS_MESSAGE_QRCODECHANGE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <opencv_apps/Point2D.h>

namespace robobo_msgs
{
template <class ContainerAllocator>
struct QrCodeChange_
{
  typedef QrCodeChange_<ContainerAllocator> Type;

  QrCodeChange_()
    : id()
    , distance(0.0)
    , center()  {
    }
  QrCodeChange_(const ContainerAllocator& _alloc)
    : id(_alloc)
    , distance(0.0)
    , center(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _id_type;
  _id_type id;

   typedef float _distance_type;
  _distance_type distance;

   typedef  ::opencv_apps::Point2D_<ContainerAllocator>  _center_type;
  _center_type center;





  typedef boost::shared_ptr< ::robobo_msgs::QrCodeChange_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robobo_msgs::QrCodeChange_<ContainerAllocator> const> ConstPtr;

}; // struct QrCodeChange_

typedef ::robobo_msgs::QrCodeChange_<std::allocator<void> > QrCodeChange;

typedef boost::shared_ptr< ::robobo_msgs::QrCodeChange > QrCodeChangePtr;
typedef boost::shared_ptr< ::robobo_msgs::QrCodeChange const> QrCodeChangeConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robobo_msgs::QrCodeChange_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robobo_msgs::QrCodeChange_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robobo_msgs::QrCodeChange_<ContainerAllocator1> & lhs, const ::robobo_msgs::QrCodeChange_<ContainerAllocator2> & rhs)
{
  return lhs.id == rhs.id &&
    lhs.distance == rhs.distance &&
    lhs.center == rhs.center;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robobo_msgs::QrCodeChange_<ContainerAllocator1> & lhs, const ::robobo_msgs::QrCodeChange_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robobo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robobo_msgs::QrCodeChange_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robobo_msgs::QrCodeChange_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robobo_msgs::QrCodeChange_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robobo_msgs::QrCodeChange_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robobo_msgs::QrCodeChange_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robobo_msgs::QrCodeChange_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robobo_msgs::QrCodeChange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ad90adff5581c7da685be8171e59dbb0";
  }

  static const char* value(const ::robobo_msgs::QrCodeChange_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xad90adff5581c7daULL;
  static const uint64_t static_value2 = 0x685be8171e59dbb0ULL;
};

template<class ContainerAllocator>
struct DataType< ::robobo_msgs::QrCodeChange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robobo_msgs/QrCodeChange";
  }

  static const char* value(const ::robobo_msgs::QrCodeChange_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robobo_msgs::QrCodeChange_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Represents a change (appearance and disappearance) of \n"
"# a QR Code\n"
"#\n"
"# Text of the QR Code\n"
"string id\n"
"# Distance between the first result point and the center\n"
"# of the code \n"
"float32 distance\n"
"# Coordinate of the center of the code\n"
"opencv_apps/Point2D center\n"
"\n"
"================================================================================\n"
"MSG: opencv_apps/Point2D\n"
"float64 x\n"
"float64 y\n"
"\n"
;
  }

  static const char* value(const ::robobo_msgs::QrCodeChange_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robobo_msgs::QrCodeChange_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.id);
      stream.next(m.distance);
      stream.next(m.center);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct QrCodeChange_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robobo_msgs::QrCodeChange_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robobo_msgs::QrCodeChange_<ContainerAllocator>& v)
  {
    s << indent << "id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.id);
    s << indent << "distance: ";
    Printer<float>::stream(s, indent + "  ", v.distance);
    s << indent << "center: ";
    s << std::endl;
    Printer< ::opencv_apps::Point2D_<ContainerAllocator> >::stream(s, indent + "  ", v.center);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOBO_MSGS_MESSAGE_QRCODECHANGE_H
