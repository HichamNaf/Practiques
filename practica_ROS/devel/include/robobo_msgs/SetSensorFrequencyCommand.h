// Generated by gencpp from file robobo_msgs/SetSensorFrequencyCommand.msg
// DO NOT EDIT!


#ifndef ROBOBO_MSGS_MESSAGE_SETSENSORFREQUENCYCOMMAND_H
#define ROBOBO_MSGS_MESSAGE_SETSENSORFREQUENCYCOMMAND_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Int8.h>

namespace robobo_msgs
{
template <class ContainerAllocator>
struct SetSensorFrequencyCommand_
{
  typedef SetSensorFrequencyCommand_<ContainerAllocator> Type;

  SetSensorFrequencyCommand_()
    : frequency()  {
    }
  SetSensorFrequencyCommand_(const ContainerAllocator& _alloc)
    : frequency(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Int8_<ContainerAllocator>  _frequency_type;
  _frequency_type frequency;





  typedef boost::shared_ptr< ::robobo_msgs::SetSensorFrequencyCommand_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::robobo_msgs::SetSensorFrequencyCommand_<ContainerAllocator> const> ConstPtr;

}; // struct SetSensorFrequencyCommand_

typedef ::robobo_msgs::SetSensorFrequencyCommand_<std::allocator<void> > SetSensorFrequencyCommand;

typedef boost::shared_ptr< ::robobo_msgs::SetSensorFrequencyCommand > SetSensorFrequencyCommandPtr;
typedef boost::shared_ptr< ::robobo_msgs::SetSensorFrequencyCommand const> SetSensorFrequencyCommandConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::robobo_msgs::SetSensorFrequencyCommand_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::robobo_msgs::SetSensorFrequencyCommand_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::robobo_msgs::SetSensorFrequencyCommand_<ContainerAllocator1> & lhs, const ::robobo_msgs::SetSensorFrequencyCommand_<ContainerAllocator2> & rhs)
{
  return lhs.frequency == rhs.frequency;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::robobo_msgs::SetSensorFrequencyCommand_<ContainerAllocator1> & lhs, const ::robobo_msgs::SetSensorFrequencyCommand_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace robobo_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::robobo_msgs::SetSensorFrequencyCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::robobo_msgs::SetSensorFrequencyCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robobo_msgs::SetSensorFrequencyCommand_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::robobo_msgs::SetSensorFrequencyCommand_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robobo_msgs::SetSensorFrequencyCommand_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::robobo_msgs::SetSensorFrequencyCommand_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::robobo_msgs::SetSensorFrequencyCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "b96ba08af418a90a3d51c1440b29c5db";
  }

  static const char* value(const ::robobo_msgs::SetSensorFrequencyCommand_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xb96ba08af418a90aULL;
  static const uint64_t static_value2 = 0x3d51c1440b29c5dbULL;
};

template<class ContainerAllocator>
struct DataType< ::robobo_msgs::SetSensorFrequencyCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "robobo_msgs/SetSensorFrequencyCommand";
  }

  static const char* value(const ::robobo_msgs::SetSensorFrequencyCommand_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::robobo_msgs::SetSensorFrequencyCommand_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Commands the robot to change the frequency of notifications\n"
"# of all sensors of the robot\n"
"#\n"
"# Integer representing the frequency; posible values: \n"
"# 0 for LOW\n"
"# 1 for NORMAL\n"
"# 2 for HIGH\n"
"# 3 for MAX\n"
"std_msgs/Int8 frequency   \n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Int8\n"
"int8 data\n"
;
  }

  static const char* value(const ::robobo_msgs::SetSensorFrequencyCommand_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::robobo_msgs::SetSensorFrequencyCommand_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frequency);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetSensorFrequencyCommand_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::robobo_msgs::SetSensorFrequencyCommand_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::robobo_msgs::SetSensorFrequencyCommand_<ContainerAllocator>& v)
  {
    s << indent << "frequency: ";
    s << std::endl;
    Printer< ::std_msgs::Int8_<ContainerAllocator> >::stream(s, indent + "  ", v.frequency);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROBOBO_MSGS_MESSAGE_SETSENSORFREQUENCYCOMMAND_H
