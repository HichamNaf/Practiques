# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from robobo_msgs/MoveWheelsCommand.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import std_msgs.msg

class MoveWheelsCommand(genpy.Message):
  _md5sum = "e266bff9487ab0f7db9d11321bda62d1"
  _type = "robobo_msgs/MoveWheelsCommand"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """# Commands the robot to move the wheels for
# an specific time
#
# Left wheel speed
std_msgs/Int8 lspeed
# Right wheel speed
std_msgs/Int8 rspeed
# Time in miliseconds
std_msgs/Int32 time
# Identifier for end-of-movement notification
std_msgs/Int16 unlockid

================================================================================
MSG: std_msgs/Int8
int8 data

================================================================================
MSG: std_msgs/Int32
int32 data
================================================================================
MSG: std_msgs/Int16
int16 data
"""
  __slots__ = ['lspeed','rspeed','time','unlockid']
  _slot_types = ['std_msgs/Int8','std_msgs/Int8','std_msgs/Int32','std_msgs/Int16']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       lspeed,rspeed,time,unlockid

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(MoveWheelsCommand, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.lspeed is None:
        self.lspeed = std_msgs.msg.Int8()
      if self.rspeed is None:
        self.rspeed = std_msgs.msg.Int8()
      if self.time is None:
        self.time = std_msgs.msg.Int32()
      if self.unlockid is None:
        self.unlockid = std_msgs.msg.Int16()
    else:
      self.lspeed = std_msgs.msg.Int8()
      self.rspeed = std_msgs.msg.Int8()
      self.time = std_msgs.msg.Int32()
      self.unlockid = std_msgs.msg.Int16()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_2bih().pack(_x.lspeed.data, _x.rspeed.data, _x.time.data, _x.unlockid.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lspeed is None:
        self.lspeed = std_msgs.msg.Int8()
      if self.rspeed is None:
        self.rspeed = std_msgs.msg.Int8()
      if self.time is None:
        self.time = std_msgs.msg.Int32()
      if self.unlockid is None:
        self.unlockid = std_msgs.msg.Int16()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.lspeed.data, _x.rspeed.data, _x.time.data, _x.unlockid.data,) = _get_struct_2bih().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_2bih().pack(_x.lspeed.data, _x.rspeed.data, _x.time.data, _x.unlockid.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.lspeed is None:
        self.lspeed = std_msgs.msg.Int8()
      if self.rspeed is None:
        self.rspeed = std_msgs.msg.Int8()
      if self.time is None:
        self.time = std_msgs.msg.Int32()
      if self.unlockid is None:
        self.unlockid = std_msgs.msg.Int16()
      end = 0
      _x = self
      start = end
      end += 8
      (_x.lspeed.data, _x.rspeed.data, _x.time.data, _x.unlockid.data,) = _get_struct_2bih().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_2bih = None
def _get_struct_2bih():
    global _struct_2bih
    if _struct_2bih is None:
        _struct_2bih = struct.Struct("<2bih")
    return _struct_2bih
