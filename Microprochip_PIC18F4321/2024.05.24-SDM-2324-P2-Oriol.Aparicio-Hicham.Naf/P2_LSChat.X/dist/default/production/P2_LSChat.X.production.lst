

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Fri May 24 12:09:17 2024

Microchip MPLAB XC8 C Compiler v2.46 (Pro license) build 20240104201356 Og9s 
     1                           	processor	18F4321
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	plic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    17                           	psect	text0,global,reloc=2,class=CODE,delta=1
    18                           	psect	text1,global,reloc=2,class=CODE,delta=1
    19                           	psect	text2,global,reloc=2,class=CODE,delta=1
    20                           	psect	text3,global,reloc=2,class=CODE,delta=1
    21                           	psect	text4,global,reloc=2,class=CODE,delta=1
    22                           	psect	text5,global,reloc=2,class=CODE,delta=1
    23                           	psect	text6,global,reloc=2,class=CODE,delta=1
    24                           	psect	text7,global,reloc=2,class=CODE,delta=1
    25                           	psect	text8,global,reloc=2,class=CODE,delta=1
    26                           	psect	text9,global,reloc=2,class=CODE,delta=1
    27                           	psect	text10,global,reloc=2,class=CODE,delta=1
    28                           	psect	text11,global,reloc=2,class=CODE,delta=1
    29                           	psect	text12,global,reloc=2,class=CODE,delta=1
    30                           	psect	text13,global,reloc=2,class=CODE,delta=1
    31                           	psect	text14,global,reloc=2,class=CODE,delta=1
    32                           	psect	text15,global,reloc=2,class=CODE,delta=1
    33                           	psect	text16,global,reloc=2,class=CODE,delta=1
    34                           	psect	text17,global,reloc=2,class=CODE,delta=1
    35                           	psect	text18,global,reloc=2,class=CODE,delta=1
    36                           	psect	text19,global,reloc=2,class=CODE,delta=1
    37                           	psect	text20,global,reloc=2,class=CODE,delta=1
    38                           	psect	text21,global,reloc=2,class=CODE,delta=1
    39                           	psect	text22,global,reloc=2,class=CODE,delta=1
    40                           	psect	text23,global,reloc=2,class=CODE,delta=1
    41                           	psect	text24,global,reloc=2,class=CODE,delta=1
    42                           	psect	text25,global,reloc=2,class=CODE,delta=1
    43                           	psect	text26,global,reloc=2,class=CODE,delta=1
    44                           	psect	text27,global,reloc=2,class=CODE,delta=1
    45                           	psect	text28,global,reloc=2,class=CODE,delta=1
    46                           	psect	text29,global,reloc=2,class=CODE,delta=1
    47                           	psect	text30,global,reloc=2,class=CODE,delta=1
    48                           	psect	text31,global,reloc=2,class=CODE,delta=1
    49                           	psect	text32,global,reloc=2,class=CODE,delta=1
    50                           	psect	text33,global,reloc=2,class=CODE,delta=1
    51                           	psect	text34,global,reloc=2,class=CODE,delta=1
    52                           	psect	text35,global,reloc=2,class=CODE,delta=1
    53                           	psect	text36,global,reloc=2,class=CODE,delta=1
    54                           	psect	text37,global,reloc=2,class=CODE,delta=1
    55                           	psect	text38,global,reloc=2,class=CODE,delta=1
    56                           	psect	text39,global,reloc=2,class=CODE,delta=1
    57                           	psect	text40,global,reloc=2,class=CODE,delta=1
    58                           	psect	text41,global,reloc=2,class=CODE,delta=1
    59                           	psect	text42,global,reloc=2,class=CODE,delta=1
    60                           	psect	text43,global,reloc=2,class=CODE,delta=1
    61                           	psect	text44,global,reloc=2,class=CODE,delta=1
    62                           	psect	text45,global,reloc=2,class=CODE,delta=1
    63                           	psect	text46,global,reloc=2,class=CODE,delta=1
    64                           	psect	text47,global,reloc=2,class=CODE,delta=1
    65                           	psect	text48,global,reloc=2,class=CODE,delta=1
    66                           	psect	text49,global,reloc=2,class=CODE,delta=1
    67                           	psect	text50,global,reloc=2,class=CODE,delta=1
    68                           	psect	text51,global,reloc=2,class=CODE,delta=1
    69                           	psect	text52,global,reloc=2,class=CODE,delta=1
    70                           	psect	text53,global,reloc=2,class=CODE,delta=1
    71                           	psect	text54,global,reloc=2,class=CODE,delta=1
    72                           	psect	text55,global,reloc=2,class=CODE,delta=1
    73                           	psect	text56,global,reloc=2,class=CODE,delta=1
    74                           	psect	text57,global,reloc=2,class=CODE,delta=1
    75                           	psect	text58,global,reloc=2,class=CODE,delta=1,group=1
    76                           	psect	text59,global,reloc=2,class=CODE,delta=1
    77                           	psect	text60,global,reloc=2,class=CODE,delta=1
    78                           	psect	text61,global,reloc=2,class=CODE,delta=1
    79                           	psect	text62,global,reloc=2,class=CODE,delta=1
    80                           	psect	text63,global,reloc=2,class=CODE,delta=1
    81                           	psect	text64,global,reloc=2,class=CODE,delta=1
    82                           	psect	text65,global,reloc=2,class=CODE,delta=1
    83                           	psect	text66,global,reloc=2,class=CODE,delta=1
    84                           	psect	text67,global,reloc=2,class=CODE,delta=1
    85                           	psect	text68,global,reloc=2,class=CODE,delta=1
    86                           	psect	text69,global,reloc=2,class=CODE,delta=1
    87                           	psect	text70,global,reloc=2,class=CODE,delta=1
    88                           	psect	text71,global,reloc=2,class=CODE,delta=1
    89                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    90                           	psect	text73,global,reloc=2,class=CODE,delta=1
    91                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    92                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    93                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    94                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    95                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    96                           	psect	pa_nodes0,global,class=CODE,delta=1
    97   000000                     
    98                           ; Generated 05/01/2024 GMT
    99                           ; 
   100                           ; Copyright Â© 2024, Microchip Technology Inc. and its subsidiaries ("Microchip")
   101                           ; All rights reserved.
   102                           ; 
   103                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   104                           ; 
   105                           ; Redistribution and use in source and binary forms, with or without modification, are
   106                           ; permitted provided that the following conditions are met:
   107                           ; 
   108                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   109                           ;        conditions and the following disclaimer.
   110                           ; 
   111                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   112                           ;        of conditions and the following disclaimer in the documentation and/or other
   113                           ;        materials provided with the distribution. Publication is not required when
   114                           ;        this file is used in an embedded application.
   115                           ; 
   116                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   117                           ;        software without specific prior written permission.
   118                           ; 
   119                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   120                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   121                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   122                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   123                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   124                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   125                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   126                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   127                           ; 
   128                           ; 
   129                           ; Code-generator required, PIC18F4321 Definitions
   130                           ; 
   131                           ; SFR Addresses
   132   000000                     
   133                           	psect	idataCOMRAM
   134   0001C6                     __pidataCOMRAM:
   135                           	callstack 0
   136                           
   137                           ;initializer for _lastMSG
   138   0001C6  07                 	db	7
   139                           
   140                           	psect	idataBANK0
   141   0000FE                     __pidataBANK0:
   142                           	callstack 0
   143                           
   144                           ;initializer for _lletres_teclat
   145   0000FE  20                 	db	32
   146   0000FF  20                 	db	32
   147   000100  31                 	db	49
   148   000101  00                 	db	0
   149   000102  41                 	db	65
   150   000103  43                 	db	67
   151   000104  44                 	db	68
   152   000105  46                 	db	70
   153   000106  47                 	db	71
   154   000107  49                 	db	73
   155   000108  4A                 	db	74
   156   000109  4C                 	db	76
   157   00010A  4D                 	db	77
   158   00010B  4F                 	db	79
   159   00010C  50                 	db	80
   160   00010D  53                 	db	83
   161   00010E  54                 	db	84
   162   00010F  56                 	db	86
   163   000110  57                 	db	87
   164   000111  5A                 	db	90
   165                           
   166                           	psect	idataBANK1
   167   001936                     __pidataBANK1:
   168                           	callstack 0
   169                           
   170                           ;initializer for _opcio_menu
   171   001936  31                 	db	49
   172   001937  3A                 	db	58
   173   001938  4C                 	db	76
   174   001939  49                 	db	73
   175   00193A  53                 	db	83
   176   00193B  54                 	db	84
   177   00193C  20                 	db	32
   178   00193D  41                 	db	65
   179   00193E  43                 	db	67
   180   00193F  43                 	db	67
   181   001940  45                 	db	69
   182   001941  53                 	db	83
   183   001942  53                 	db	83
   184   001943  20                 	db	32
   185   001944  50                 	db	80
   186   001945  4F                 	db	79
   187   001946  49                 	db	73
   188   001947  4E                 	db	78
   189   001948  54                 	db	84
   190   001949  53                 	db	83
   191   00194A  20                 	db	32
   192   00194B  32                 	db	50
   193   00194C  3A                 	db	58
   194   00194D  53                 	db	83
   195   00194E  48                 	db	72
   196   00194F  4F                 	db	79
   197   001950  57                 	db	87
   198   001951  20                 	db	32
   199   001952  43                 	db	67
   200   001953  4F                 	db	79
   201   001954  4E                 	db	78
   202   001955  4E                 	db	78
   203   001956  2E                 	db	46
   204   001957  20                 	db	32
   205   001958  53                 	db	83
   206   001959  54                 	db	84
   207   00195A  41                 	db	65
   208   00195B  54                 	db	84
   209   00195C  55                 	db	85
   210   00195D  53                 	db	83
   211   00195E  20                 	db	32
   212   00195F  20                 	db	32
   213   001960  33                 	db	51
   214   001961  3A                 	db	58
   215   001962  43                 	db	67
   216   001963  48                 	db	72
   217   001964  41                 	db	65
   218   001965  4E                 	db	78
   219   001966  47                 	db	71
   220   001967  45                 	db	69
   221   001968  20                 	db	32
   222   001969  43                 	db	67
   223   00196A  48                 	db	72
   224   00196B  41                 	db	65
   225   00196C  54                 	db	84
   226   00196D  20                 	db	32
   227   00196E  4D                 	db	77
   228   00196F  4F                 	db	79
   229   001970  44                 	db	68
   230   001971  45                 	db	69
   231   001972  20                 	db	32
   232   001973  20                 	db	32
   233   001974  20                 	db	32
   234   001975  34                 	db	52
   235   001976  3A                 	db	58
   236   001977  45                 	db	69
   237   001978  4E                 	db	78
   238   001979  54                 	db	84
   239   00197A  45                 	db	69
   240   00197B  52                 	db	82
   241   00197C  20                 	db	32
   242   00197D  43                 	db	67
   243   00197E  48                 	db	72
   244   00197F  41                 	db	65
   245   001980  54                 	db	84
   246   001981  20                 	db	32
   247   001982  4D                 	db	77
   248   001983  4F                 	db	79
   249   001984  44                 	db	68
   250   001985  45                 	db	69
   251   001986  20                 	db	32
   252   001987  20                 	db	32
   253   001988  20                 	db	32
   254   001989  20                 	db	32
   255   00198A  35                 	db	53
   256   00198B  3A                 	db	58
   257   00198C  4C                 	db	76
   258   00198D  49                 	db	73
   259   00198E  53                 	db	83
   260   00198F  54                 	db	84
   261   001990  20                 	db	32
   262   001991  4C                 	db	76
   263   001992  41                 	db	65
   264   001993  53                 	db	83
   265   001994  54                 	db	84
   266   001995  20                 	db	32
   267   001996  4D                 	db	77
   268   001997  53                 	db	83
   269   001998  47                 	db	71
   270   001999  53                 	db	83
   271   00199A  2E                 	db	46
   272   00199B  20                 	db	32
   273   00199C  20                 	db	32
   274   00199D  20                 	db	32
   275   00199E  20                 	db	32
   276   00199F  36                 	db	54
   277   0019A0  3A                 	db	58
   278   0019A1  43                 	db	67
   279   0019A2  4C                 	db	76
   280   0019A3  4F                 	db	79
   281   0019A4  53                 	db	83
   282   0019A5  45                 	db	69
   283   0019A6  20                 	db	32
   284   0019A7  43                 	db	67
   285   0019A8  4F                 	db	79
   286   0019A9  4E                 	db	78
   287   0019AA  4E                 	db	78
   288   0019AB  45                 	db	69
   289   0019AC  43                 	db	67
   290   0019AD  54                 	db	84
   291   0019AE  49                 	db	73
   292   0019AF  4F                 	db	79
   293   0019B0  4E                 	db	78
   294   0019B1  20                 	db	32
   295   0019B2  20                 	db	32
   296   0019B3  20                 	db	32
   297   000000                     _TXREG	set	4013
   298   000000                     _RCREG	set	4014
   299   000000                     _SPBRG	set	4015
   300   000000                     _LATCbits	set	3979
   301   000000                     _TRISCbits	set	3988
   302   000000                     _ADCON0bits	set	4034
   303   000000                     _PORTB	set	3969
   304   000000                     _LATD	set	3980
   305   000000                     _TRISD	set	3989
   306   000000                     _TMR0IF	set	32658
   307   000000                     _PORTBbits	set	3969
   308   000000                     _PORTDbits	set	3971
   309   000000                     _LATDbits	set	3980
   310   000000                     _TRISDbits	set	3989
   311   000000                     _RCONbits	set	4048
   312   000000                     _TMR0	set	4054
   313   000000                     _T0CON	set	4053
   314   000000                     _INTCON2bits	set	4081
   315   000000                     _INTCONbits	set	4082
   316   000000                     _PIR1bits	set	3998
   317   000000                     _RCSTA	set	4011
   318   000000                     _TXSTA	set	4012
   319   000000                     _BAUDCONbits	set	4024
   320   000000                     _TRISAbits	set	3986
   321   000000                     _TRISBbits	set	3987
   322   000000                     _LATAbits	set	3977
   323   000000                     _LATBbits	set	3978
   324   000000                     _ADCON2	set	4032
   325   000000                     _ADCON1	set	4033
   326   000000                     _ADRESH	set	4036
   327   000000                     _ADCON0	set	4034
   328                           
   329                           	psect	smallconst
   330   000200                     __psmallconst:
   331                           	callstack 0
   332   000200  00                 	db	0
   333   000201                     STR_5:
   334   000201  41                 	db	65	;'A'
   335   000202  54                 	db	84	;'T'
   336   000203  2B                 	db	43
   337   000204  43                 	db	67	;'C'
   338   000205  49                 	db	73	;'I'
   339   000206  50                 	db	80	;'P'
   340   000207  53                 	db	83	;'S'
   341   000208  54                 	db	84	;'T'
   342   000209  41                 	db	65	;'A'
   343   00020A  52                 	db	82	;'R'
   344   00020B  54                 	db	84	;'T'
   345   00020C  3D                 	db	61	;'='
   346   00020D  22                 	db	34
   347   00020E  55                 	db	85	;'U'
   348   00020F  44                 	db	68	;'D'
   349   000210  50                 	db	80	;'P'
   350   000211  22                 	db	34
   351   000212  2C                 	db	44
   352   000213  22                 	db	34
   353   000214  32                 	db	50	;'2'
   354   000215  35                 	db	53	;'5'
   355   000216  35                 	db	53	;'5'
   356   000217  2E                 	db	46
   357   000218  32                 	db	50	;'2'
   358   000219  35                 	db	53	;'5'
   359   00021A  35                 	db	53	;'5'
   360   00021B  2E                 	db	46
   361   00021C  32                 	db	50	;'2'
   362   00021D  35                 	db	53	;'5'
   363   00021E  35                 	db	53	;'5'
   364   00021F  2E                 	db	46
   365   000220  32                 	db	50	;'2'
   366   000221  35                 	db	53	;'5'
   367   000222  35                 	db	53	;'5'
   368   000223  22                 	db	34
   369   000224  2C                 	db	44
   370   000225  00                 	db	0
   371   000226  00                 	db	0
   372   000227                     STR_10:
   373   000227  41                 	db	65	;'A'
   374   000228  54                 	db	84	;'T'
   375   000229  2B                 	db	43
   376   00022A  43                 	db	67	;'C'
   377   00022B  49                 	db	73	;'I'
   378   00022C  50                 	db	80	;'P'
   379   00022D  53                 	db	83	;'S'
   380   00022E  54                 	db	84	;'T'
   381   00022F  41                 	db	65	;'A'
   382   000230  54                 	db	84	;'T'
   383   000231  55                 	db	85	;'U'
   384   000232  53                 	db	83	;'S'
   385   000233  0D                 	db	13
   386   000234  0A                 	db	10
   387   000235  00                 	db	0
   388   000236                     STR_4:
   389   000236  41                 	db	65	;'A'
   390   000237  54                 	db	84	;'T'
   391   000238  2B                 	db	43
   392   000239  43                 	db	67	;'C'
   393   00023A  49                 	db	73	;'I'
   394   00023B  50                 	db	80	;'P'
   395   00023C  43                 	db	67	;'C'
   396   00023D  4C                 	db	76	;'L'
   397   00023E  4F                 	db	79	;'O'
   398   00023F  53                 	db	83	;'S'
   399   000240  45                 	db	69	;'E'
   400   000241  0D                 	db	13
   401   000242  0A                 	db	10
   402   000243  00                 	db	0
   403   000244                     STR_7:
   404   000244  53                 	db	83	;'S'
   405   000245  43                 	db	67	;'C'
   406   000246  41                 	db	65	;'A'
   407   000247  4E                 	db	78	;'N'
   408   000248  4E                 	db	78	;'N'
   409   000249  49                 	db	73	;'I'
   410   00024A  4E                 	db	78	;'N'
   411   00024B  47                 	db	71	;'G'
   412   00024C  2E                 	db	46
   413   00024D  2E                 	db	46
   414   00024E  2E                 	db	46
   415   00024F  00                 	db	0
   416   000250  00                 	db	0
   417   000251                     STR_13:
   418   000251  41                 	db	65	;'A'
   419   000252  54                 	db	84	;'T'
   420   000253  2B                 	db	43
   421   000254  43                 	db	67	;'C'
   422   000255  49                 	db	73	;'I'
   423   000256  50                 	db	80	;'P'
   424   000257  53                 	db	83	;'S'
   425   000258  45                 	db	69	;'E'
   426   000259  4E                 	db	78	;'N'
   427   00025A  44                 	db	68	;'D'
   428   00025B  3D                 	db	61	;'='
   429   00025C  00                 	db	0
   430   00025D  00                 	db	0
   431   00025E                     STR_3:
   432   00025E  55                 	db	85	;'U'
   433   00025F  53                 	db	83	;'S'
   434   000260  45                 	db	69	;'E'
   435   000261  52                 	db	82	;'R'
   436   000262  20                 	db	32
   437   000263  4E                 	db	78	;'N'
   438   000264  41                 	db	65	;'A'
   439   000265  4D                 	db	77	;'M'
   440   000266  45                 	db	69	;'E'
   441   000267  3A                 	db	58	;':'
   442   000268  20                 	db	32
   443   000269  00                 	db	0
   444   00026A                     STR_1:
   445   00026A  44                 	db	68	;'D'
   446   00026B  45                 	db	69	;'E'
   447   00026C  53                 	db	83	;'S'
   448   00026D  54                 	db	84	;'T'
   449   00026E  2E                 	db	46
   450   00026F  50                 	db	80	;'P'
   451   000270  4F                 	db	79	;'O'
   452   000271  52                 	db	82	;'R'
   453   000272  54                 	db	84	;'T'
   454   000273  3A                 	db	58	;':'
   455   000274  20                 	db	32
   456   000275  00                 	db	0
   457   000276                     STR_8:
   458   000276  41                 	db	65	;'A'
   459   000277  54                 	db	84	;'T'
   460   000278  2B                 	db	43
   461   000279  43                 	db	67	;'C'
   462   00027A  57                 	db	87	;'W'
   463   00027B  4C                 	db	76	;'L'
   464   00027C  41                 	db	65	;'A'
   465   00027D  50                 	db	80	;'P'
   466   00027E  0D                 	db	13
   467   00027F  0A                 	db	10
   468   000280  00                 	db	0
   469   000281                     STR_2:
   470   000281  52                 	db	82	;'R'
   471   000282  45                 	db	69	;'E'
   472   000283  43                 	db	67	;'C'
   473   000284  2E                 	db	46
   474   000285  50                 	db	80	;'P'
   475   000286  4F                 	db	79	;'O'
   476   000287  52                 	db	82	;'R'
   477   000288  54                 	db	84	;'T'
   478   000289  3A                 	db	58	;':'
   479   00028A  20                 	db	32
   480   00028B  00                 	db	0
   481   00028C                     STR_12:
   482   00028C  45                 	db	69	;'E'
   483   00028D  52                 	db	82	;'R'
   484   00028E  52                 	db	82	;'R'
   485   00028F  4F                 	db	79	;'O'
   486   000290  52                 	db	82	;'R'
   487   000291  2E                 	db	46
   488   000292  2E                 	db	46
   489   000293  2E                 	db	46
   490   000294  46                 	db	70	;'F'
   491   000295  00                 	db	0
   492   000296                     STR_11:
   493   000296  62                 	db	98	;'b'
   494   000297  79                 	db	121	;'y'
   495   000298  65                 	db	101	;'e'
   496   000299  20                 	db	32
   497   00029A  62                 	db	98	;'b'
   498   00029B  79                 	db	121	;'y'
   499   00029C  65                 	db	101	;'e'
   500   00029D  20                 	db	32
   501   00029E  00                 	db	0
   502   00029F                     STR_16:
   503   00029F  4E                 	db	78	;'N'
   504   0002A0  4F                 	db	79	;'O'
   505   0002A1  20                 	db	32
   506   0002A2  4D                 	db	77	;'M'
   507   0002A3  53                 	db	83	;'S'
   508   0002A4  47                 	db	71	;'G'
   509   0002A5  53                 	db	83	;'S'
   510   0002A6  2E                 	db	46
   511   0002A7  00                 	db	0
   512   0002A8                     STR_6:
   513   0002A8  0D                 	db	13
   514   0002A9  0A                 	db	10
   515   0002AA  00                 	db	0
   516   0002AB  00                 	db	0
   517   0002AC  00                 	db	0	; dummy byte at the end
   518   000000                     
   519                           ; #config settings
   520                           
   521                           	psect	cinit
   522   0018B2                     __pcinit:
   523                           	callstack 0
   524   0018B2                     start_initialization:
   525                           	callstack 0
   526   0018B2                     __initialization:
   527                           	callstack 0
   528                           
   529                           ; Initialize objects allocated to BANK1 (126 bytes)
   530                           ; load TBLPTR registers with __pidataBANK1
   531   0018B2  0E36               	movlw	low __pidataBANK1
   532   0018B4  6EF6               	movwf	tblptrl,c
   533   0018B6  0E19               	movlw	high __pidataBANK1
   534   0018B8  6EF7               	movwf	tblptrh,c
   535   0018BA  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   536   0018BC  6EF8               	movwf	tblptru,c
   537   0018BE  EE01  F000         	lfsr	0,__pdataBANK1
   538   0018C2  EE10 F07E          	lfsr	1,126
   539   0018C6                     copy_data0:
   540   0018C6  0009               	tblrd		*+
   541   0018C8  CFF5 FFEE          	movff	tablat,postinc0
   542   0018CC  50E5               	movf	postdec1,w,c
   543   0018CE  50E1               	movf	fsr1l,w,c
   544   0018D0  E1FA               	bnz	copy_data0
   545                           
   546                           ; Initialize objects allocated to BANK0 (20 bytes)
   547                           ; load TBLPTR registers with __pidataBANK0
   548   0018D2  0EFE               	movlw	low __pidataBANK0
   549   0018D4  6EF6               	movwf	tblptrl,c
   550   0018D6  0E00               	movlw	high __pidataBANK0
   551   0018D8  6EF7               	movwf	tblptrh,c
   552   0018DA  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   553   0018DC  6EF8               	movwf	tblptru,c
   554   0018DE  EE00  F0D0         	lfsr	0,__pdataBANK0
   555   0018E2  EE10 F014          	lfsr	1,20
   556   0018E6                     copy_data1:
   557   0018E6  0009               	tblrd		*+
   558   0018E8  CFF5 FFEE          	movff	tablat,postinc0
   559   0018EC  50E5               	movf	postdec1,w,c
   560   0018EE  50E1               	movf	fsr1l,w,c
   561   0018F0  E1FA               	bnz	copy_data1
   562                           
   563                           ; Initialize objects allocated to COMRAM (1 bytes)
   564                           ; load TBLPTR registers with __pidataCOMRAM
   565   0018F2  0EC6               	movlw	low __pidataCOMRAM
   566   0018F4  6EF6               	movwf	tblptrl,c
   567   0018F6  0E01               	movlw	high __pidataCOMRAM
   568   0018F8  6EF7               	movwf	tblptrh,c
   569   0018FA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   570   0018FC  6EF8               	movwf	tblptru,c
   571   0018FE  0009               	tblrd		*+	;fetch initializer
   572   001900  CFF5 F077          	movff	tablat,__pdataCOMRAM
   573                           
   574                           ; Clear objects allocated to BANK1 (112 bytes)
   575   001904  EE01  F07E         	lfsr	0,__pbssBANK1
   576   001908  0E70               	movlw	112
   577   00190A                     clear_0:
   578   00190A  6AEE               	clrf	postinc0,c
   579   00190C  06E8               	decf	wreg,f,c
   580   00190E  E1FD               	bnz	clear_0
   581                           
   582                           ; Clear objects allocated to BANK0 (80 bytes)
   583   001910  EE00  F080         	lfsr	0,__pbssBANK0
   584   001914  0E50               	movlw	80
   585   001916                     clear_1:
   586   001916  6AEE               	clrf	postinc0,c
   587   001918  06E8               	decf	wreg,f,c
   588   00191A  E1FD               	bnz	clear_1
   589                           
   590                           ; Clear objects allocated to COMRAM (88 bytes)
   591   00191C  EE00  F001         	lfsr	0,__pbssCOMRAM
   592   001920  0E58               	movlw	88
   593   001922                     clear_2:
   594   001922  6AEE               	clrf	postinc0,c
   595   001924  06E8               	decf	wreg,f,c
   596   001926  E1FD               	bnz	clear_2
   597   001928                     end_of_initialization:
   598                           	callstack 0
   599   001928                     __end_of__initialization:
   600                           	callstack 0
   601   001928  9078               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   602   00192A  9278               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   603   00192C  0E00               	movlw	low (__Lmediumconst shr (0+16))
   604   00192E  6EF8               	movwf	tblptru,c
   605   001930  0100               	movlb	0
   606   001932  EF01  F00E         	goto	_main	;jump to C main() function
   607                           
   608                           	psect	bssCOMRAM
   609   000001                     __pbssCOMRAM:
   610                           	callstack 0
   611   000001                     _inMSG:
   612                           	callstack 0
   613   000001                     	ds	4
   614   000005                     _Tics:
   615                           	callstack 0
   616   000005                     	ds	4
   617   000009                     _msgToSend:
   618                           	callstack 0
   619   000009                     	ds	2
   620   00000B                     _msgC:
   621                           	callstack 0
   622   00000B                     	ds	2
   623   00000D                     LcPutString@string_ptr:
   624                           	callstack 0
   625   00000D                     	ds	2
   626   00000F                     MotorAltaveu@state:
   627                           	callstack 0
   628   00000F                     	ds	1
   629   000010                     _isBusy:
   630                           	callstack 0
   631   000010                     	ds	1
   632   000011                     _dutycycle:
   633                           	callstack 0
   634   000011                     	ds	1
   635   000012                     _sound:
   636                           	callstack 0
   637   000012                     	ds	1
   638   000013                     _estatAnterior:
   639                           	callstack 0
   640   000013                     	ds	1
   641   000014                     _action@menu$F1454:
   642                           	callstack 0
   643   000014                     	ds	1
   644   000015                     _compt@menu$F1453:
   645                           	callstack 0
   646   000015                     	ds	1
   647   000016                     _tecla@menu$F1452:
   648                           	callstack 0
   649   000016                     	ds	1
   650   000017                     _start@menu$F1451:
   651                           	callstack 0
   652   000017                     	ds	1
   653   000018                     _state@menu$F1450:
   654                           	callstack 0
   655   000018                     	ds	1
   656   000019                     _Opt:
   657                           	callstack 0
   658   000019                     	ds	1
   659   00001A                     _m1:
   660                           	callstack 0
   661   00001A                     	ds	1
   662   00001B                     _m0:
   663                           	callstack 0
   664   00001B                     	ds	1
   665   00001C                     MotorEQM@state:
   666                           	callstack 0
   667   00001C                     	ds	1
   668   00001D                     ReciveMSG@stateMSG:
   669                           	callstack 0
   670   00001D                     	ds	1
   671   00001E                     _comptSEC:
   672                           	callstack 0
   673   00001E                     	ds	1
   674   00001F                     _resetMENU:
   675                           	callstack 0
   676   00001F                     	ds	1
   677   000020                     _statusSTATE:
   678                           	callstack 0
   679   000020                     	ds	1
   680   000021                     _wifiSTATE:
   681                           	callstack 0
   682   000021                     	ds	1
   683   000022                     _msgToLCD:
   684                           	callstack 0
   685   000022                     	ds	1
   686   000023                     _tecla:
   687                           	callstack 0
   688   000023                     	ds	1
   689   000024                     _action:
   690                           	callstack 0
   691   000024                     	ds	1
   692   000025                     _compt2:
   693                           	callstack 0
   694   000025                     	ds	1
   695   000026                     _compt:
   696                           	callstack 0
   697   000026                     	ds	1
   698   000027                     _Opt4:
   699                           	callstack 0
   700   000027                     	ds	1
   701   000028                     _Opt3:
   702                           	callstack 0
   703   000028                     	ds	1
   704   000029                     _maxMSG:
   705                           	callstack 0
   706   000029                     	ds	1
   707   00002A                     _state4:
   708                           	callstack 0
   709   00002A                     	ds	1
   710   00002B                     _state_option:
   711                           	callstack 0
   712   00002B                     	ds	1
   713   00002C                     _INTENTS:
   714                           	callstack 0
   715   00002C                     	ds	1
   716   00002D                     _iMSG:
   717                           	callstack 0
   718   00002D                     	ds	1
   719   00002E                     _msg:
   720                           	callstack 0
   721   00002E                     	ds	1
   722   00002F                     _index@EQM$F1361:
   723                           	callstack 0
   724   00002F                     	ds	1
   725   000030                     _start@EQM$F1359:
   726                           	callstack 0
   727   000030                     	ds	1
   728   000031                     MotorRX@state:
   729                           	callstack 0
   730   000031                     	ds	1
   731   000032                     _index:
   732                           	callstack 0
   733   000032                     	ds	1
   734   000033                     _flag_RX:
   735                           	callstack 0
   736   000033                     	ds	1
   737   000034                     _MSG_AUX@rxcom$F1160:
   738                           	callstack 0
   739   000034                     	ds	1
   740   000035                     _nMSG@rxcom$F1158:
   741                           	callstack 0
   742   000035                     	ds	1
   743   000036                     MotorCOM@state:
   744                           	callstack 0
   745   000036                     	ds	1
   746   000037                     MotorTX@state:
   747                           	callstack 0
   748   000037                     	ds	1
   749   000038                     _end_TX:
   750                           	callstack 0
   751   000038                     	ds	1
   752   000039                     _MSG_AUX:
   753                           	callstack 0
   754   000039                     	ds	1
   755   00003A                     _nMSG:
   756                           	callstack 0
   757   00003A                     	ds	1
   758   00003B                     _start@txcom$F1020:
   759                           	callstack 0
   760   00003B                     	ds	1
   761   00003C                     MotorValorsTeclat@state:
   762                           	callstack 0
   763   00003C                     	ds	1
   764   00003D                     ValorTecla@valor:
   765                           	callstack 0
   766   00003D                     	ds	1
   767   00003E                     _maxChars:
   768                           	callstack 0
   769   00003E                     	ds	1
   770   00003F                     _pos:
   771                           	callstack 0
   772   00003F                     	ds	1
   773   000040                     _numChars:
   774                           	callstack 0
   775   000040                     	ds	1
   776   000041                     _filaAnterior:
   777                           	callstack 0
   778   000041                     	ds	1
   779   000042                     _pulsacio:
   780                           	callstack 0
   781   000042                     	ds	1
   782   000043                     _start:
   783                           	callstack 0
   784   000043                     	ds	1
   785   000044                     _teclapremuda:
   786                           	callstack 0
   787   000044                     	ds	1
   788   000045                     _columna:
   789                           	callstack 0
   790   000045                     	ds	1
   791   000046                     _state:
   792                           	callstack 0
   793   000046                     	ds	1
   794   000047                     LcPutString@numChars:
   795                           	callstack 0
   796   000047                     	ds	1
   797   000048                     LcPutString@state:
   798                           	callstack 0
   799   000048                     	ds	1
   800   000049                     _ColumnAct:
   801                           	callstack 0
   802   000049                     	ds	1
   803   00004A                     _RowAct:
   804                           	callstack 0
   805   00004A                     	ds	1
   806   00004B                     _Columns:
   807                           	callstack 0
   808   00004B                     	ds	1
   809   00004C                     _Rows:
   810                           	callstack 0
   811   00004C                     	ds	1
   812   00004D                     _user:
   813                           	callstack 0
   814   00004D                     	ds	3
   815   000050                     _timer@altaveu$F1595:
   816                           	callstack 0
   817   000050                     	ds	1
   818   000051                     _timer@menu$F1455:
   819                           	callstack 0
   820   000051                     	ds	1
   821   000052                     _timer@EQM$F1360:
   822                           	callstack 0
   823   000052                     	ds	1
   824   000053                     _timer@rxcom$F1159:
   825                           	callstack 0
   826   000053                     	ds	1
   827   000054                     _timer@txcom$F1023:
   828                           	callstack 0
   829   000054                     	ds	1
   830   000055                     _MSG:
   831                           	callstack 0
   832   000055                     	ds	1
   833   000056                     _timer@valorsteclat$F912:
   834                           	callstack 0
   835   000056                     	ds	1
   836   000057                     _timer:
   837                           	callstack 0
   838   000057                     	ds	1
   839   000058                     _Timer:
   840                           	callstack 0
   841   000058                     	ds	1
   842                           
   843                           	psect	dataCOMRAM
   844   000077                     __pdataCOMRAM:
   845                           	callstack 0
   846   000077                     _lastMSG:
   847                           	callstack 0
   848   000077                     	ds	1
   849                           
   850                           	psect	bssBANK0
   851   000080                     __pbssBANK0:
   852                           	callstack 0
   853   000080                     _Timers:
   854                           	callstack 0
   855   000080                     	ds	60
   856   0000BC                     _arrayChars:
   857                           	callstack 0
   858   0000BC                     	ds	10
   859   0000C6                     _port:
   860                           	callstack 0
   861   0000C6                     	ds	10
   862                           
   863                           	psect	dataBANK0
   864   0000D0                     __pdataBANK0:
   865                           	callstack 0
   866   0000D0                     _lletres_teclat:
   867                           	callstack 0
   868   0000D0                     	ds	20
   869                           
   870                           	psect	bssBANK1
   871   00017E                     __pbssBANK1:
   872                           	callstack 0
   873   00017E                     _msgs:
   874                           	callstack 0
   875   00017E                     	ds	112
   876                           
   877                           	psect	dataBANK1
   878   000100                     __pdataBANK1:
   879                           	callstack 0
   880   000100                     _opcio_menu:
   881                           	callstack 0
   882   000100                     	ds	126
   883                           
   884                           	psect	cstackCOMRAM
   885   000059                     __pcstackCOMRAM:
   886                           	callstack 0
   887   000059                     ??_EscriuPrimeraOrdre:
   888   000059                     ??_CantaPartAlta:
   889   000059                     ??_CantaPartBaixa:
   890   000059                     ?___wmul:
   891                           	callstack 0
   892   000059                     ?_TI_GetTics:
   893                           	callstack 0
   894   000059                     _HiHaTecla$840:
   895                           	callstack 0
   896   000059                     TI_Init@counter:
   897                           	callstack 0
   898   000059                     TI_NewTimer@TimerHandle:
   899                           	callstack 0
   900   000059                     TI_ResetTics@TimerHandle:
   901                           	callstack 0
   902   000059                     StartRead@numMax:
   903                           	callstack 0
   904   000059                     getMSG@index:
   905                           	callstack 0
   906   000059                     SetMSG@new_msg:
   907                           	callstack 0
   908   000059                     SIO_PutChar@Valor:
   909                           	callstack 0
   910   000059                     SorollAlt@tecla:
   911                           	callstack 0
   912   000059                     ___wmul@multiplier:
   913                           	callstack 0
   914                           
   915                           ; 2 bytes @ 0x0
   916   000059                     	ds	1
   917   00005A                     MotorCOM@new_msgC:
   918                           	callstack 0
   919                           
   920                           ; 2 bytes @ 0x1
   921   00005A                     	ds	1
   922   00005B                     TI_NewTimer@Comptador:
   923                           	callstack 0
   924   00005B                     ___wmul@multiplicand:
   925                           	callstack 0
   926                           
   927                           ; 2 bytes @ 0x2
   928   00005B                     	ds	1
   929   00005C                     KeyBoardInit@isBusy:
   930                           	callstack 0
   931   00005C                     ValorsTeclatInit@isBusy:
   932                           	callstack 0
   933   00005C                     txInit@isBusy:
   934                           	callstack 0
   935   00005C                     rxInit@isBusy:
   936                           	callstack 0
   937   00005C                     EQMInit@isBusy:
   938                           	callstack 0
   939                           
   940                           ; 1 bytes @ 0x3
   941   00005C                     	ds	1
   942   00005D                     ??_TI_GetTics:
   943   00005D                     ___wmul@product:
   944                           	callstack 0
   945                           
   946                           ; 2 bytes @ 0x4
   947   00005D                     	ds	1
   948   00005E                     CantaPartAlta@c:
   949                           	callstack 0
   950   00005E                     CantaPartBaixa@c:
   951                           	callstack 0
   952   00005E                     EscriuPrimeraOrdre@ordre:
   953                           	callstack 0
   954                           
   955                           ; 1 bytes @ 0x5
   956   00005E                     	ds	1
   957   00005F                     CantaIR@IR:
   958                           	callstack 0
   959   00005F                     CantaData@Data:
   960                           	callstack 0
   961                           
   962                           ; 1 bytes @ 0x6
   963   00005F                     	ds	2
   964   000061                     TI_GetTics@CopiaTicsActual:
   965                           	callstack 0
   966                           
   967                           ; 4 bytes @ 0x8
   968   000061                     	ds	4
   969   000065                     TI_GetTics@TimerHandle:
   970                           	callstack 0
   971                           
   972                           ; 1 bytes @ 0xC
   973   000065                     	ds	1
   974   000066                     ??_MotorTX:
   975   000066                     ??_MotorRX:
   976   000066                     ??_MotorAltaveu:
   977   000066                     WaitForBusy@Busy:
   978                           	callstack 0
   979   000066                     MenuInit@busy:
   980                           	callstack 0
   981   000066                     Espera@Timer:
   982                           	callstack 0
   983                           
   984                           ; 2 bytes @ 0xD
   985   000066                     	ds	1
   986   000067                     LcGotoXY@Row:
   987                           	callstack 0
   988                           
   989                           ; 1 bytes @ 0xE
   990   000067                     	ds	1
   991   000068                     ??_LcGotoXY:
   992   000068                     Espera@ms:
   993                           	callstack 0
   994                           
   995                           ; 2 bytes @ 0xF
   996   000068                     	ds	2
   997   00006A                     ??_Espera:
   998   00006A                     _LcGotoXY$513:
   999                           	callstack 0
  1000                           
  1001                           ; 2 bytes @ 0x11
  1002   00006A                     	ds	2
  1003   00006C                     LcGotoXY@Fisics:
  1004                           	callstack 0
  1005                           
  1006                           ; 2 bytes @ 0x13
  1007   00006C                     	ds	2
  1008   00006E                     LcInit@columns:
  1009                           	callstack 0
  1010   00006E                     LcGotoXY@Column:
  1011                           	callstack 0
  1012                           
  1013                           ; 1 bytes @ 0x15
  1014   00006E                     	ds	1
  1015   00006F                     LcInit@rows:
  1016                           	callstack 0
  1017   00006F                     LcPutChar@c:
  1018                           	callstack 0
  1019                           
  1020                           ; 1 bytes @ 0x16
  1021   00006F                     	ds	1
  1022   000070                     ??_MotorMenu:
  1023   000070                     ??_ValorTecla:
  1024   000070                     ??_ReciveMSG:
  1025   000070                     LcInit@i:
  1026                           	callstack 0
  1027   000070                     LcPutString@s:
  1028                           	callstack 0
  1029                           
  1030                           ; 2 bytes @ 0x17
  1031   000070                     	ds	2
  1032   000072                     ??_EnterChatMode:
  1033   000072                     ??_ListLastMessages:
  1034                           
  1035                           ; 1 bytes @ 0x19
  1036   000072                     	ds	3
  1037   000075                     ValorTecla@fila:
  1038                           	callstack 0
  1039                           
  1040                           ; 1 bytes @ 0x1C
  1041   000075                     	ds	1
  1042   000076                     
  1043                           ; 1 bytes @ 0x1D
  1044   000076                     	ds	1
  1045   000077                     
  1046                           ; 1 bytes @ 0x1E
  1047 ;;
  1048 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1049 ;;
  1050 ;; *************** function _main *****************
  1051 ;; Defined at:
  1052 ;;		line 55 in file "main.c"
  1053 ;; Parameters:    Size  Location     Type
  1054 ;;		None
  1055 ;; Auto vars:     Size  Location     Type
  1056 ;;		None
  1057 ;; Return value:  Size  Location     Type
  1058 ;;                  1    wreg      void 
  1059 ;; Registers used:
  1060 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1061 ;; Tracked objects:
  1062 ;;		On entry : 0/0
  1063 ;;		On exit  : 0/0
  1064 ;;		Unchanged: 0/0
  1065 ;; Data sizes:     COMRAM   BANK0   BANK1
  1066 ;;      Params:         0       0       0
  1067 ;;      Locals:         0       0       0
  1068 ;;      Temps:          0       0       0
  1069 ;;      Totals:         0       0       0
  1070 ;;Total ram usage:        0 bytes
  1071 ;; Hardware stack levels required when called: 10
  1072 ;; This function calls:
  1073 ;;		_EQMInit
  1074 ;;		_InitAltaveu
  1075 ;;		_JoyInit
  1076 ;;		_KeyBoardInit
  1077 ;;		_LcClear
  1078 ;;		_LcCursorOff
  1079 ;;		_LcGotoXY
  1080 ;;		_LcInit
  1081 ;;		_MenuInit
  1082 ;;		_MotorAltaveu
  1083 ;;		_MotorEQM
  1084 ;;		_MotorKeyboard
  1085 ;;		_MotorMenu
  1086 ;;		_MotorRX
  1087 ;;		_MotorTX
  1088 ;;		_MotorValorsTeclat
  1089 ;;		_SIO_Init
  1090 ;;		_TI_Init
  1091 ;;		_ValorsTeclatInit
  1092 ;;		_configInt
  1093 ;;		_rxInit
  1094 ;;		_setJoyChannel
  1095 ;;		_txInit
  1096 ;; This function is called by:
  1097 ;;		Startup code after reset
  1098 ;; This function uses a non-reentrant model
  1099 ;;
  1100                           
  1101                           	psect	text0
  1102   001C02                     __ptext0:
  1103                           	callstack 0
  1104   001C02                     _main:
  1105                           	callstack 21
  1106                           
  1107                           ;incstack = 0
  1108   001C02  ECAA  F000         	call	_configInt	;wreg free
  1109   001C06  ECBF  F00F         	call	_TI_Init	;wreg free
  1110   001C0A  ECAA  F00F         	call	_KeyBoardInit	;wreg free
  1111   001C0E  EC2A  F000         	call	_ValorsTeclatInit	;wreg free
  1112   001C12  EC51  F000         	call	_txInit	;wreg free
  1113   001C16  ECE6  F00F         	call	_rxInit	;wreg free
  1114   001C1A  EC89  F000         	call	_SIO_Init	;wreg free
  1115   001C1E  0E10               	movlw	16
  1116   001C20  6E6E               	movwf	LcInit@columns^0,c
  1117   001C22  0E02               	movlw	2
  1118   001C24  EC62  F00A         	call	_LcInit
  1119   001C28  EC74  F000         	call	_LcClear	;wreg free
  1120   001C2C  ECB0  F000         	call	_LcCursorOff	;wreg free
  1121   001C30  0E00               	movlw	0
  1122   001C32  6A67               	clrf	LcGotoXY@Row^0,c
  1123   001C34  ECD0  F00B         	call	_LcGotoXY
  1124   001C38  EC44  F000         	call	_EQMInit	;wreg free
  1125                           
  1126                           ; BSR set to: 0
  1127   001C3C  EC5D  F000         	call	_InitAltaveu	;wreg free
  1128   001C40  ECF8  F00F         	call	_JoyInit	;wreg free
  1129   001C44  EC37  F000         	call	_MenuInit	;wreg free
  1130   001C48  ECB9  F000         	call	_setJoyChannel	;wreg free
  1131   001C4C                     l5978:
  1132   001C4C  EC1A  F009         	call	_MotorKeyboard	;wreg free
  1133   001C50  EC15  F00C         	call	_MotorValorsTeclat	;wreg free
  1134   001C54  EC8D  F009         	call	_MotorEQM	;wreg free
  1135   001C58  EC24  F00B         	call	_MotorTX	;wreg free
  1136   001C5C  ECF8  F009         	call	_MotorRX	;wreg free
  1137   001C60  ECB8  F005         	call	_MotorMenu	;wreg free
  1138   001C64  EC56  F00D         	call	_MotorAltaveu	;wreg free
  1139   001C68  D7F1               	goto	l5978
  1140   001C6A                     __end_of_main:
  1141                           	callstack 0
  1142                           
  1143 ;; *************** function _txInit *****************
  1144 ;; Defined at:
  1145 ;;		line 15 in file "txcom.c"
  1146 ;; Parameters:    Size  Location     Type
  1147 ;;		None
  1148 ;; Auto vars:     Size  Location     Type
  1149 ;;  isBusy          1    3[COMRAM] unsigned char 
  1150 ;; Return value:  Size  Location     Type
  1151 ;;                  1    wreg      void 
  1152 ;; Registers used:
  1153 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1154 ;; Tracked objects:
  1155 ;;		On entry : 0/0
  1156 ;;		On exit  : 0/0
  1157 ;;		Unchanged: 0/0
  1158 ;; Data sizes:     COMRAM   BANK0   BANK1
  1159 ;;      Params:         0       0       0
  1160 ;;      Locals:         1       0       0
  1161 ;;      Temps:          0       0       0
  1162 ;;      Totals:         1       0       0
  1163 ;;Total ram usage:        1 bytes
  1164 ;; Hardware stack levels used: 1
  1165 ;; Hardware stack levels required when called: 3
  1166 ;; This function calls:
  1167 ;;		_TI_NewTimer
  1168 ;; This function is called by:
  1169 ;;		_main
  1170 ;; This function uses a non-reentrant model
  1171 ;;
  1172                           
  1173                           	psect	text1
  1174   0000A2                     __ptext1:
  1175                           	callstack 0
  1176   0000A2                     _txInit:
  1177                           	callstack 27
  1178                           
  1179                           ;txcom.c: 16:     char isBusy = TI_NewTimer(&timer);
  1180                           
  1181                           ;incstack = 0
  1182   0000A2  0E54               	movlw	low _timer@txcom$F1023
  1183   0000A4  6E59               	movwf	TI_NewTimer@TimerHandle^0,c
  1184   0000A6  EC78  F00F         	call	_TI_NewTimer	;wreg free
  1185   0000AA  6E5C               	movwf	txInit@isBusy^0,c
  1186   0000AC                     l5410:
  1187   0000AC  505C               	movf	txInit@isBusy^0,w,c
  1188   0000AE  E0FE               	bz	l5410
  1189                           
  1190                           ;txcom.c: 19:     TRISCbits.RC5=0;
  1191   0000B0  9A94               	bcf	148,5,c	;volatile
  1192                           
  1193                           ;txcom.c: 20:     LATCbits.LATC5=1;
  1194   0000B2  8A8B               	bsf	139,5,c	;volatile
  1195                           
  1196                           ;txcom.c: 21:     end_TX=1;
  1197   0000B4  0E01               	movlw	1
  1198   0000B6  6E38               	movwf	_end_TX^0,c
  1199   0000B8  0C01               	retlw	1	;funcret
  1200   0000BA                     __end_of_txInit:
  1201                           	callstack 0
  1202                           
  1203 ;; *************** function _setJoyChannel *****************
  1204 ;; Defined at:
  1205 ;;		line 64 in file "joystick.c"
  1206 ;; Parameters:    Size  Location     Type
  1207 ;;		None
  1208 ;; Auto vars:     Size  Location     Type
  1209 ;;		None
  1210 ;; Return value:  Size  Location     Type
  1211 ;;                  1    wreg      void 
  1212 ;; Registers used:
  1213 ;;		wreg, status,2
  1214 ;; Tracked objects:
  1215 ;;		On entry : 0/0
  1216 ;;		On exit  : 0/0
  1217 ;;		Unchanged: 0/0
  1218 ;; Data sizes:     COMRAM   BANK0   BANK1
  1219 ;;      Params:         0       0       0
  1220 ;;      Locals:         0       0       0
  1221 ;;      Temps:          0       0       0
  1222 ;;      Totals:         0       0       0
  1223 ;;Total ram usage:        0 bytes
  1224 ;; Hardware stack levels used: 1
  1225 ;; Hardware stack levels required when called: 2
  1226 ;; This function calls:
  1227 ;;		Nothing
  1228 ;; This function is called by:
  1229 ;;		_main
  1230 ;; This function uses a non-reentrant model
  1231 ;;
  1232                           
  1233                           	psect	text2
  1234   000172                     __ptext2:
  1235                           	callstack 0
  1236   000172                     _setJoyChannel:
  1237                           	callstack 28
  1238                           
  1239                           ;joystick.c: 67:     ADCON0=0x01;
  1240                           
  1241                           ;incstack = 0
  1242   000172  0E01               	movlw	1
  1243   000174  6EC2               	movwf	194,c	;volatile
  1244   000176  0C01               	retlw	1	;funcret
  1245   000178                     __end_of_setJoyChannel:
  1246                           	callstack 0
  1247                           
  1248 ;; *************** function _rxInit *****************
  1249 ;; Defined at:
  1250 ;;		line 17 in file "rxcom.c"
  1251 ;; Parameters:    Size  Location     Type
  1252 ;;		None
  1253 ;; Auto vars:     Size  Location     Type
  1254 ;;  isBusy          1    3[COMRAM] unsigned char 
  1255 ;; Return value:  Size  Location     Type
  1256 ;;                  1    wreg      void 
  1257 ;; Registers used:
  1258 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1259 ;; Tracked objects:
  1260 ;;		On entry : 0/0
  1261 ;;		On exit  : 0/0
  1262 ;;		Unchanged: 0/0
  1263 ;; Data sizes:     COMRAM   BANK0   BANK1
  1264 ;;      Params:         0       0       0
  1265 ;;      Locals:         1       0       0
  1266 ;;      Temps:          0       0       0
  1267 ;;      Totals:         1       0       0
  1268 ;;Total ram usage:        1 bytes
  1269 ;; Hardware stack levels used: 1
  1270 ;; Hardware stack levels required when called: 3
  1271 ;; This function calls:
  1272 ;;		_TI_NewTimer
  1273 ;; This function is called by:
  1274 ;;		_main
  1275 ;; This function uses a non-reentrant model
  1276 ;;
  1277                           
  1278                           	psect	text3
  1279   001FCC                     __ptext3:
  1280                           	callstack 0
  1281   001FCC                     _rxInit:
  1282                           	callstack 27
  1283                           
  1284                           ;rxcom.c: 18:     char isBusy = TI_NewTimer(&timer);
  1285                           
  1286                           ;incstack = 0
  1287   001FCC  0E53               	movlw	low _timer@rxcom$F1159
  1288   001FCE  6E59               	movwf	TI_NewTimer@TimerHandle^0,c
  1289   001FD0  EC78  F00F         	call	_TI_NewTimer	;wreg free
  1290   001FD4  6E5C               	movwf	rxInit@isBusy^0,c
  1291   001FD6                     l5416:
  1292   001FD6  505C               	movf	rxInit@isBusy^0,w,c
  1293   001FD8  E0FE               	bz	l5416
  1294                           
  1295                           ;rxcom.c: 20:     inMSG[0] = '+';
  1296   001FDA  0E2B               	movlw	43
  1297   001FDC  6E01               	movwf	_inMSG^0,c
  1298                           
  1299                           ;rxcom.c: 21:     inMSG[1] = 'I';
  1300   001FDE  0E49               	movlw	73
  1301   001FE0  6E02               	movwf	(_inMSG+1)^0,c
  1302                           
  1303                           ;rxcom.c: 22:     inMSG[2] = 'P';
  1304   001FE2  0E50               	movlw	80
  1305   001FE4  6E03               	movwf	(_inMSG+2)^0,c
  1306                           
  1307                           ;rxcom.c: 23:     inMSG[3] = 'D';
  1308   001FE6  0E44               	movlw	68
  1309   001FE8  6E04               	movwf	(_inMSG+3)^0,c
  1310                           
  1311                           ;rxcom.c: 24:     TRISBbits.RB7=1;
  1312   001FEA  8E93               	bsf	147,7,c	;volatile
  1313                           
  1314                           ;rxcom.c: 25:     flag_RX=0;
  1315   001FEC  6A33               	clrf	_flag_RX^0,c
  1316   001FEE  0012               	return		;funcret
  1317   001FF0                     __end_of_rxInit:
  1318                           	callstack 0
  1319                           
  1320 ;; *************** function _configInt *****************
  1321 ;; Defined at:
  1322 ;;		line 45 in file "main.c"
  1323 ;; Parameters:    Size  Location     Type
  1324 ;;		None
  1325 ;; Auto vars:     Size  Location     Type
  1326 ;;		None
  1327 ;; Return value:  Size  Location     Type
  1328 ;;                  1    wreg      void 
  1329 ;; Registers used:
  1330 ;;		None
  1331 ;; Tracked objects:
  1332 ;;		On entry : 0/0
  1333 ;;		On exit  : 0/0
  1334 ;;		Unchanged: 0/0
  1335 ;; Data sizes:     COMRAM   BANK0   BANK1
  1336 ;;      Params:         0       0       0
  1337 ;;      Locals:         0       0       0
  1338 ;;      Temps:          0       0       0
  1339 ;;      Totals:         0       0       0
  1340 ;;Total ram usage:        0 bytes
  1341 ;; Hardware stack levels used: 1
  1342 ;; Hardware stack levels required when called: 2
  1343 ;; This function calls:
  1344 ;;		Nothing
  1345 ;; This function is called by:
  1346 ;;		_main
  1347 ;; This function uses a non-reentrant model
  1348 ;;
  1349                           
  1350                           	psect	text4
  1351   000154                     __ptext4:
  1352                           	callstack 0
  1353   000154                     _configInt:
  1354                           	callstack 28
  1355                           
  1356                           ;main.c: 46:         MotorTX();
  1357                           
  1358                           ;incstack = 0
  1359   000154  9ED0               	bcf	208,7,c	;volatile
  1360                           
  1361                           ;main.c: 47:         MotorRX();
  1362   000156  8EF2               	bsf	242,7,c	;volatile
  1363                           
  1364                           ;main.c: 48:         MotorMenu();
  1365   000158  8CF2               	bsf	242,6,c	;volatile
  1366                           
  1367                           ;main.c: 49:         MotorAltaveu();
  1368   00015A  8AF2               	bsf	242,5,c	;volatile
  1369   00015C  9EF1               	bcf	241,7,c	;volatile
  1370   00015E  0012               	return		;funcret
  1371   000160                     __end_of_configInt:
  1372                           	callstack 0
  1373                           
  1374 ;; *************** function _ValorsTeclatInit *****************
  1375 ;; Defined at:
  1376 ;;		line 44 in file "valorsteclat.c"
  1377 ;; Parameters:    Size  Location     Type
  1378 ;;		None
  1379 ;; Auto vars:     Size  Location     Type
  1380 ;;  isBusy          1    3[COMRAM] unsigned char 
  1381 ;; Return value:  Size  Location     Type
  1382 ;;                  1    wreg      void 
  1383 ;; Registers used:
  1384 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1385 ;; Tracked objects:
  1386 ;;		On entry : 0/0
  1387 ;;		On exit  : 0/0
  1388 ;;		Unchanged: 0/0
  1389 ;; Data sizes:     COMRAM   BANK0   BANK1
  1390 ;;      Params:         0       0       0
  1391 ;;      Locals:         1       0       0
  1392 ;;      Temps:          0       0       0
  1393 ;;      Totals:         1       0       0
  1394 ;;Total ram usage:        1 bytes
  1395 ;; Hardware stack levels used: 1
  1396 ;; Hardware stack levels required when called: 3
  1397 ;; This function calls:
  1398 ;;		_TI_NewTimer
  1399 ;; This function is called by:
  1400 ;;		_main
  1401 ;; This function uses a non-reentrant model
  1402 ;;
  1403                           
  1404                           	psect	text5
  1405   000054                     __ptext5:
  1406                           	callstack 0
  1407   000054                     _ValorsTeclatInit:
  1408                           	callstack 27
  1409                           
  1410                           ;valorsteclat.c: 47:     char isBusy = TI_NewTimer(&timer);
  1411                           
  1412                           ;incstack = 0
  1413   000054  0E56               	movlw	low _timer@valorsteclat$F912
  1414   000056  6E59               	movwf	TI_NewTimer@TimerHandle^0,c
  1415   000058  EC78  F00F         	call	_TI_NewTimer	;wreg free
  1416   00005C  6E5C               	movwf	ValorsTeclatInit@isBusy^0,c
  1417   00005E                     l5400:
  1418   00005E  505C               	movf	ValorsTeclatInit@isBusy^0,w,c
  1419   000060  E0FE               	bz	l5400
  1420                           
  1421                           ;valorsteclat.c: 50:     TRISD=0x00;
  1422   000062  6A95               	clrf	149,c	;volatile
  1423                           
  1424                           ;valorsteclat.c: 51:     LATD=0x7D;
  1425   000064  0E7D               	movlw	125
  1426   000066  6E8C               	movwf	140,c	;volatile
  1427                           
  1428                           ;valorsteclat.c: 52:     numChars=0;
  1429   000068  6A40               	clrf	_numChars^0,c
  1430                           
  1431                           ;valorsteclat.c: 53:     start=0;
  1432   00006A  6A43               	clrf	_start^0,c
  1433   00006C  0012               	return		;funcret
  1434   00006E                     __end_of_ValorsTeclatInit:
  1435                           	callstack 0
  1436                           
  1437 ;; *************** function _TI_Init *****************
  1438 ;; Defined at:
  1439 ;;		line 33 in file "timer.c"
  1440 ;; Parameters:    Size  Location     Type
  1441 ;;		None
  1442 ;; Auto vars:     Size  Location     Type
  1443 ;;  counter         1    0[COMRAM] unsigned char 
  1444 ;; Return value:  Size  Location     Type
  1445 ;;                  1    wreg      void 
  1446 ;; Registers used:
  1447 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  1448 ;; Tracked objects:
  1449 ;;		On entry : 0/0
  1450 ;;		On exit  : 0/0
  1451 ;;		Unchanged: 0/0
  1452 ;; Data sizes:     COMRAM   BANK0   BANK1
  1453 ;;      Params:         0       0       0
  1454 ;;      Locals:         1       0       0
  1455 ;;      Temps:          0       0       0
  1456 ;;      Totals:         1       0       0
  1457 ;;Total ram usage:        1 bytes
  1458 ;; Hardware stack levels used: 1
  1459 ;; Hardware stack levels required when called: 2
  1460 ;; This function calls:
  1461 ;;		Nothing
  1462 ;; This function is called by:
  1463 ;;		_main
  1464 ;; This function uses a non-reentrant model
  1465 ;;
  1466                           
  1467                           	psect	text6
  1468   001F7E                     __ptext6:
  1469                           	callstack 0
  1470   001F7E                     _TI_Init:
  1471                           	callstack 28
  1472                           
  1473                           ;timer.c: 34:  for (unsigned char counter=0; counter<12; counter++) {
  1474                           
  1475                           ;incstack = 0
  1476   001F7E  6A59               	clrf	TI_Init@counter^0,c
  1477   001F80                     l5382:
  1478                           
  1479                           ;timer.c: 35:   Timers[counter].Busy=0;
  1480   001F80  5059               	movf	TI_Init@counter^0,w,c
  1481   001F82  EC8D  F00F         	call	PL40	;call to abstracted procedure
  1482   001F86  6ADF               	clrf	indf2,c
  1483                           
  1484                           ;timer.c: 36:  }
  1485   001F88  2A59               	incf	TI_Init@counter^0,f,c
  1486   001F8A  0E0B               	movlw	11
  1487   001F8C  6459               	cpfsgt	TI_Init@counter^0,c
  1488   001F8E  D7F8               	goto	l5382
  1489                           
  1490                           ;timer.c: 37:  T0CON=0x88;
  1491   001F90  0E88               	movlw	136
  1492   001F92  6ED5               	movwf	213,c	;volatile
  1493                           
  1494                           ;timer.c: 38:     TMR0=64536;
  1495   001F94  D803               	call	PL60	;call to abstracted procedure
  1496                           
  1497                           ;timer.c: 39:  INTCONbits.TMR0IF = 0;
  1498   001F96  94F2               	bcf	242,2,c	;volatile
  1499                           
  1500                           ;timer.c: 40:  INTCONbits.TMR0IE = 1;
  1501   001F98  8AF2               	bsf	242,5,c	;volatile
  1502   001F9A  0C18               	retlw	24	;funcret
  1503   001F9C                     __end_of_TI_Init:
  1504                           	callstack 0
  1505   001F9C                     PL60:
  1506                           	callstack 21
  1507   001F9C  0EFC               	movlw	252
  1508   001F9E  6ED7               	movwf	215,c	;volatile
  1509   001FA0  0E18               	movlw	24
  1510   001FA2  6ED6               	movwf	214,c	;volatile
  1511   001FA4  0C18               	retlw	24
  1512   001FA6                     __end_ofPL60:
  1513                           	callstack 0
  1514                           
  1515 ;; *************** function _SIO_Init *****************
  1516 ;; Defined at:
  1517 ;;		line 12 in file "sio.c"
  1518 ;; Parameters:    Size  Location     Type
  1519 ;;		None
  1520 ;; Auto vars:     Size  Location     Type
  1521 ;;		None
  1522 ;; Return value:  Size  Location     Type
  1523 ;;                  1    wreg      void 
  1524 ;; Registers used:
  1525 ;;		wreg, status,2
  1526 ;; Tracked objects:
  1527 ;;		On entry : 0/0
  1528 ;;		On exit  : 0/0
  1529 ;;		Unchanged: 0/0
  1530 ;; Data sizes:     COMRAM   BANK0   BANK1
  1531 ;;      Params:         0       0       0
  1532 ;;      Locals:         0       0       0
  1533 ;;      Temps:          0       0       0
  1534 ;;      Totals:         0       0       0
  1535 ;;Total ram usage:        0 bytes
  1536 ;; Hardware stack levels used: 1
  1537 ;; Hardware stack levels required when called: 2
  1538 ;; This function calls:
  1539 ;;		Nothing
  1540 ;; This function is called by:
  1541 ;;		_main
  1542 ;; This function uses a non-reentrant model
  1543 ;;
  1544                           
  1545                           	psect	text7
  1546   000112                     __ptext7:
  1547                           	callstack 0
  1548   000112                     _SIO_Init:
  1549                           	callstack 28
  1550                           
  1551                           ;sio.c: 15:     TRISCbits.TRISC6 = 1;
  1552                           
  1553                           ;incstack = 0
  1554   000112  8C94               	bsf	148,6,c	;volatile
  1555                           
  1556                           ;sio.c: 16:     TRISCbits.TRISC7 = 1;
  1557   000114  8E94               	bsf	148,7,c	;volatile
  1558                           
  1559                           ;sio.c: 17:     BAUDCONbits.BRG16=0;
  1560   000116  96B8               	bcf	184,3,c	;volatile
  1561                           
  1562                           ;sio.c: 18:     TXSTA=0x20;
  1563   000118  0E20               	movlw	32
  1564   00011A  6EAC               	movwf	172,c	;volatile
  1565                           
  1566                           ;sio.c: 19:     RCSTA=0x90;
  1567   00011C  0E90               	movlw	144
  1568   00011E  6EAB               	movwf	171,c	;volatile
  1569                           
  1570                           ;sio.c: 20:     SPBRG=64;
  1571   000120  0E40               	movlw	64
  1572   000122  6EAF               	movwf	175,c	;volatile
  1573   000124  0C40               	retlw	64	;funcret
  1574   000126                     __end_of_SIO_Init:
  1575                           	callstack 0
  1576                           
  1577 ;; *************** function _MotorValorsTeclat *****************
  1578 ;; Defined at:
  1579 ;;		line 114 in file "valorsteclat.c"
  1580 ;; Parameters:    Size  Location     Type
  1581 ;;		None
  1582 ;; Auto vars:     Size  Location     Type
  1583 ;;		None
  1584 ;; Return value:  Size  Location     Type
  1585 ;;                  1    wreg      void 
  1586 ;; Registers used:
  1587 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1588 ;; Tracked objects:
  1589 ;;		On entry : 0/0
  1590 ;;		On exit  : 0/0
  1591 ;;		Unchanged: 0/0
  1592 ;; Data sizes:     COMRAM   BANK0   BANK1
  1593 ;;      Params:         0       0       0
  1594 ;;      Locals:         0       0       0
  1595 ;;      Temps:          0       0       0
  1596 ;;      Totals:         0       0       0
  1597 ;;Total ram usage:        0 bytes
  1598 ;; Hardware stack levels used: 1
  1599 ;; Hardware stack levels required when called: 7
  1600 ;; This function calls:
  1601 ;;		_GetTecla
  1602 ;;		_TI_GetTics
  1603 ;;		_TeclaPremuda
  1604 ;;		_ValorTecla
  1605 ;; This function is called by:
  1606 ;;		_main
  1607 ;; This function uses a non-reentrant model
  1608 ;;
  1609                           
  1610                           	psect	text8
  1611   00182A                     __ptext8:
  1612                           	callstack 0
  1613   00182A                     _MotorValorsTeclat:
  1614                           	callstack 23
  1615                           
  1616                           ;valorsteclat.c: 115:     static char state = 0;;valorsteclat.c: 117:  switch(state) {
  1617                           
  1618                           ;incstack = 0
  1619   00182A  D039               	goto	l5618
  1620   00182C                     l5580:
  1621                           
  1622                           ;valorsteclat.c: 119:    if (start==1) {
  1623   00182C  0443               	decf	_start^0,w,c
  1624   00182E  A4D8               	btfss	status,2,c
  1625   001830  0012               	return	
  1626   001832                     u4950:
  1627                           
  1628                           ;valorsteclat.c: 120:                 state++;
  1629   001832  2A3C               	incf	MotorValorsTeclat@state^0,f,c
  1630   001834  0012               	return	
  1631   001836                     l5584:
  1632                           
  1633                           ;valorsteclat.c: 124:             if (TeclaPremuda()==1){
  1634   001836  ECC8  F000         	call	_TeclaPremuda	;wreg free
  1635   00183A  06E8               	decf	wreg,f,c
  1636   00183C  E112               	bnz	l5600
  1637                           
  1638                           ;valorsteclat.c: 126:                 if (GetTecla()=='#' || GetTecla()=='*'){
  1639   00183E  EC33  F00F         	call	_GetTecla	;wreg free
  1640   001842  0A23               	xorlw	35
  1641   001844  E033               	bz	PL98
  1642   001846  EC33  F00F         	call	_GetTecla	;wreg free
  1643   00184A  0A2A               	xorlw	42
  1644   00184C  E101               	bnz	l5592
  1645   00184E                     u4980:
  1646                           
  1647                           ;valorsteclat.c: 127:                     start--;
  1648                           
  1649                           ;valorsteclat.c: 128:                     state--;
  1650                           
  1651                           ;valorsteclat.c: 129:                 } else {
  1652   00184E  D02E               	goto	PL98	;call to abstracted procedure
  1653   001850                     l5592:
  1654                           
  1655                           ;valorsteclat.c: 130:                     ValorTecla(GetTecla());
  1656   001850  EC33  F00F         	call	_GetTecla	;wreg free
  1657   001854  ECC5  F00A         	call	_ValorTecla
  1658                           
  1659                           ;valorsteclat.c: 131:                     if(numChars>maxChars){
  1660   001858  5040               	movf	_numChars^0,w,c
  1661   00185A  5C3E               	subwf	_maxChars^0,w,c
  1662   00185C  E2EA               	bc	u4950
  1663                           
  1664                           ;valorsteclat.c: 132:                         numChars--;
  1665   00185E  0640               	decf	_numChars^0,f,c
  1666                           
  1667                           ;valorsteclat.c: 133:                         start--;
  1668                           
  1669                           ;valorsteclat.c: 134:                         state--;
  1670                           
  1671                           ;valorsteclat.c: 135:                     } else{
  1672   001860  D025               	goto	PL98	;call to abstracted procedure
  1673   001862                     l5600:
  1674   001862  ECC8  F000         	call	_TeclaPremuda	;wreg free
  1675   001866  0900               	iorlw	0
  1676   001868  A4D8               	btfss	status,2,c
  1677   00186A  0012               	return	
  1678                           
  1679                           ;valorsteclat.c: 138:                 if (TI_GetTics(timer)>10000 && numChars==maxChars)
      +                          {
  1680   00186C  5056               	movf	_timer@valorsteclat$F912^0,w,c
  1681   00186E  ECC1  F00E         	call	_TI_GetTics
  1682   001872  505C               	movf	(?_TI_GetTics+3)^0,w,c
  1683   001874  105B               	iorwf	(?_TI_GetTics+2)^0,w,c
  1684   001876  E104               	bnz	u5010
  1685   001878  ECB3  F005         	call	PL32	;call to abstracted procedure
  1686   00187C  A0D8               	btfss	status,0,c
  1687   00187E  0012               	return	
  1688   001880                     u5010:
  1689   001880  503E               	movf	_maxChars^0,w,c
  1690   001882  1840               	xorwf	_numChars^0,w,c
  1691   001884  A4D8               	btfss	status,2,c
  1692   001886  0012               	return	
  1693                           
  1694                           ;valorsteclat.c: 139:                     ValorTecla(filaAnterior);
  1695   001888  5041               	movf	_filaAnterior^0,w,c
  1696   00188A  ECC5  F00A         	call	_ValorTecla
  1697                           
  1698                           ;valorsteclat.c: 140:                     start--;
  1699   00188E  0643               	decf	_start^0,f,c
  1700   001890                     l5610:
  1701                           
  1702                           ;valorsteclat.c: 141:                     state--;}
  1703   001890  063C               	decf	MotorValorsTeclat@state^0,f,c
  1704   001892  0012               	return	
  1705   001894                     l5612:
  1706                           
  1707                           ;valorsteclat.c: 145:             if (TeclaPremuda()==0){
  1708   001894  ECC8  F000         	call	_TeclaPremuda	;wreg free
  1709   001898  0900               	iorlw	0
  1710   00189A  E0FA               	bz	l5610
  1711   00189C  0012               	return	
  1712   00189E                     l5618:
  1713   00189E  503C               	movf	MotorValorsTeclat@state^0,w,c
  1714                           
  1715                           ; Switch size 1, requested type "space"
  1716                           ; Number of cases is 3, Range of values is 0 to 2
  1717                           ; switch strategies available:
  1718                           ; Name         Instructions Cycles
  1719                           ; simple_byte           10     6 (average)
  1720                           ;	Chosen strategy is simple_byte
  1721   0018A0  E0C5               	bz	l5580
  1722   0018A2  0A01               	xorlw	1	; case 1
  1723   0018A4  E0C8               	bz	l5584
  1724   0018A6  0A03               	xorlw	3	; case 2
  1725   0018A8  E0F5               	bz	l5612
  1726   0018AA  0012               	return		;funcret
  1727   0018AC                     __end_of_MotorValorsTeclat:
  1728                           	callstack 0
  1729   0018AC                     PL98:
  1730                           	callstack 23
  1731   0018AC  0643               	decf	_start^0,f,c
  1732   0018AE  063C               	decf	MotorValorsTeclat@state^0,f,c
  1733   0018B0  0012               	return	
  1734   0018B2                     __end_ofPL98:
  1735                           	callstack 0
  1736                           
  1737 ;; *************** function _ValorTecla *****************
  1738 ;; Defined at:
  1739 ;;		line 80 in file "valorsteclat.c"
  1740 ;; Parameters:    Size  Location     Type
  1741 ;;  fila            1    wreg     unsigned char 
  1742 ;; Auto vars:     Size  Location     Type
  1743 ;;  fila            1   28[COMRAM] unsigned char 
  1744 ;; Return value:  Size  Location     Type
  1745 ;;                  1    wreg      void 
  1746 ;; Registers used:
  1747 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1748 ;; Tracked objects:
  1749 ;;		On entry : 0/0
  1750 ;;		On exit  : 0/0
  1751 ;;		Unchanged: 0/0
  1752 ;; Data sizes:     COMRAM   BANK0   BANK1
  1753 ;;      Params:         0       0       0
  1754 ;;      Locals:         1       0       0
  1755 ;;      Temps:          5       0       0
  1756 ;;      Totals:         6       0       0
  1757 ;;Total ram usage:        6 bytes
  1758 ;; Hardware stack levels used: 1
  1759 ;; Hardware stack levels required when called: 6
  1760 ;; This function calls:
  1761 ;;		_LcGotoXY
  1762 ;;		_LcPutChar
  1763 ;;		_TI_GetTics
  1764 ;;		_TI_ResetTics
  1765 ;; This function is called by:
  1766 ;;		_MotorValorsTeclat
  1767 ;; This function uses a non-reentrant model
  1768 ;;
  1769                           
  1770                           	psect	text9
  1771   00158A                     __ptext9:
  1772                           	callstack 0
  1773   00158A                     _ValorTecla:
  1774                           	callstack 23
  1775                           
  1776                           ;incstack = 0
  1777                           ;ValorTecla@fila stored from wreg
  1778   00158A  6E75               	movwf	ValorTecla@fila^0,c
  1779                           
  1780                           ;valorsteclat.c: 81:     static char valor;;valorsteclat.c: 83:     if (fila!=filaAnteri
      +                          or || TI_GetTics(timer)>10000) {
  1781   00158C  1841               	xorwf	_filaAnterior^0,w,c
  1782   00158E  E109               	bnz	u3930
  1783   001590  5056               	movf	_timer@valorsteclat$F912^0,w,c
  1784   001592  ECC1  F00E         	call	_TI_GetTics
  1785   001596  505C               	movf	(?_TI_GetTics+3)^0,w,c
  1786   001598  105B               	iorwf	(?_TI_GetTics+2)^0,w,c
  1787   00159A  E103               	bnz	u3930
  1788   00159C  ECB3  F005         	call	PL32	;call to abstracted procedure
  1789   0015A0  E30E               	bnc	l4708
  1790   0015A2                     u3930:
  1791                           
  1792                           ;valorsteclat.c: 84:         arrayChars[numChars] = lletres_teclat[fila][0];
  1793   0015A2  D84B               	call	PL50	;call to abstracted procedure
  1794   0015A4  5040               	movf	_numChars^0,w,c
  1795   0015A6  0FBC               	addlw	low _arrayChars
  1796   0015A8  6EE1               	movwf	fsr1l,c
  1797   0015AA  6AE2               	clrf	fsr1h,c
  1798   0015AC  CFDF FFE7          	movff	indf2,indf1
  1799                           
  1800                           ;valorsteclat.c: 85:         filaAnterior=fila;
  1801   0015B0  C075  F041         	movff	ValorTecla@fila,_filaAnterior
  1802                           
  1803                           ;valorsteclat.c: 86:         numChars++;
  1804   0015B4  2A40               	incf	_numChars^0,f,c
  1805                           
  1806                           ;valorsteclat.c: 87:         pulsacio=0;
  1807   0015B6  6A42               	clrf	_pulsacio^0,c
  1808                           
  1809                           ;valorsteclat.c: 88:         TI_ResetTics(timer);
  1810   0015B8  5056               	movf	_timer@valorsteclat$F912^0,w,c
  1811   0015BA  EC1B  F000         	call	_TI_ResetTics
  1812   0015BE                     l4708:
  1813                           
  1814                           ;valorsteclat.c: 90:     filaAnterior=fila;
  1815   0015BE  C075  F041         	movff	ValorTecla@fila,_filaAnterior
  1816                           
  1817                           ;valorsteclat.c: 91:     TI_ResetTics(timer);
  1818   0015C2  5056               	movf	_timer@valorsteclat$F912^0,w,c
  1819   0015C4  EC1B  F000         	call	_TI_ResetTics
  1820                           
  1821                           ;valorsteclat.c: 93:     valor = lletres_teclat[fila][0];
  1822   0015C8  D838               	call	PL50	;call to abstracted procedure
  1823   0015CA  50DF               	movf	indf2,w,c
  1824   0015CC  6E3D               	movwf	ValorTecla@valor^0,c
  1825                           
  1826                           ;valorsteclat.c: 94:     if (valor + pulsacio > lletres_teclat[fila][1]) {
  1827   0015CE  5042               	movf	_pulsacio^0,w,c
  1828   0015D0  C03D  F070         	movff	ValorTecla@valor,??_ValorTecla
  1829   0015D4  6A71               	clrf	(??_ValorTecla+1)^0,c
  1830   0015D6  2670               	addwf	??_ValorTecla^0,f,c
  1831   0015D8  0E00               	movlw	0
  1832   0015DA  2271               	addwfc	(??_ValorTecla+1)^0,f,c
  1833   0015DC  5075               	movf	ValorTecla@fila^0,w,c
  1834   0015DE  0D02               	mullw	2
  1835   0015E0  50F3               	movf	243,w,c
  1836   0015E2  0FD1               	addlw	low (_lletres_teclat+1)
  1837   0015E4  6ED9               	movwf	fsr2l,c
  1838   0015E6  6ADA               	clrf	fsr2h,c
  1839   0015E8  50DF               	movf	indf2,w,c
  1840   0015EA  6E72               	movwf	(??_ValorTecla+2)^0,c
  1841   0015EC  6A73               	clrf	(??_ValorTecla+3)^0,c
  1842   0015EE  5070               	movf	??_ValorTecla^0,w,c
  1843   0015F0  5C72               	subwf	(??_ValorTecla+2)^0,w,c
  1844   0015F2  5073               	movf	(??_ValorTecla+3)^0,w,c
  1845   0015F4  0A80               	xorlw	128
  1846   0015F6  6E74               	movwf	(??_ValorTecla+4)^0,c
  1847   0015F8  5071               	movf	(??_ValorTecla+1)^0,w,c
  1848   0015FA  0A80               	xorlw	128
  1849   0015FC  5874               	subwfb	(??_ValorTecla+4)^0,w,c
  1850   0015FE  E208               	bc	l4724
  1851                           
  1852                           ;valorsteclat.c: 95:         pulsacio=0;
  1853   001600  6A42               	clrf	_pulsacio^0,c
  1854                           
  1855                           ;valorsteclat.c: 97:         valor = '0'+fila;
  1856   001602  5075               	movf	ValorTecla@fila^0,w,c
  1857   001604  0F30               	addlw	48
  1858   001606  6E3D               	movwf	ValorTecla@valor^0,c
  1859                           
  1860                           ;valorsteclat.c: 99:         if (fila == 0){
  1861   001608  5075               	movf	ValorTecla@fila^0,w,c
  1862   00160A  E108               	bnz	l4728
  1863                           
  1864                           ;valorsteclat.c: 100:             valor = '0';
  1865   00160C  0E30               	movlw	48
  1866   00160E  D005               	goto	L1
  1867   001610                     l4724:
  1868                           
  1869                           ;valorsteclat.c: 104:         pulsacio++;
  1870   001610  2A42               	incf	_pulsacio^0,f,c
  1871                           
  1872                           ;valorsteclat.c: 105:         valor = valor+(pulsacio-1);
  1873   001612  5042               	movf	_pulsacio^0,w,c
  1874   001614  243D               	addwf	ValorTecla@valor^0,w,c
  1875   001616  6E70               	movwf	??_ValorTecla^0,c
  1876   001618  0470               	decf	??_ValorTecla^0,w,c
  1877   00161A                     L1:
  1878   00161A  6E3D               	movwf	ValorTecla@valor^0,c
  1879   00161C                     l4728:
  1880                           
  1881                           ;valorsteclat.c: 108:     LcGotoXY(numChars-1,pos);
  1882   00161C  C03F  F067         	movff	_pos,LcGotoXY@Row
  1883   001620  0440               	decf	_numChars^0,w,c
  1884   001622  ECD0  F00B         	call	_LcGotoXY
  1885                           
  1886                           ;valorsteclat.c: 109:     LcPutChar(valor);
  1887   001626  503D               	movf	ValorTecla@valor^0,w,c
  1888   001628  EC97  F00E         	call	_LcPutChar
  1889                           
  1890                           ;valorsteclat.c: 110:     arrayChars[numChars-1] = valor;
  1891   00162C  5040               	movf	_numChars^0,w,c
  1892   00162E  0FBB               	addlw	low (_arrayChars+255)
  1893   001630  6ED9               	movwf	fsr2l,c
  1894   001632  6ADA               	clrf	fsr2h,c
  1895   001634  C03D  FFDF         	movff	ValorTecla@valor,indf2
  1896   001638  0012               	return		;funcret
  1897   00163A                     __end_of_ValorTecla:
  1898                           	callstack 0
  1899   00163A                     PL50:
  1900                           	callstack 23
  1901   00163A  5075               	movf	ValorTecla@fila^0,w,c
  1902   00163C  0D02               	mullw	2
  1903   00163E  50F3               	movf	243,w,c
  1904   001640  0FD0               	addlw	low _lletres_teclat
  1905   001642  6ED9               	movwf	fsr2l,c
  1906   001644  6ADA               	clrf	fsr2h,c
  1907   001646  0012               	return	
  1908   001648                     __end_ofPL50:
  1909                           	callstack 0
  1910                           
  1911 ;; *************** function _TeclaPremuda *****************
  1912 ;; Defined at:
  1913 ;;		line 95 in file "teclat.c"
  1914 ;; Parameters:    Size  Location     Type
  1915 ;;		None
  1916 ;; Auto vars:     Size  Location     Type
  1917 ;;		None
  1918 ;; Return value:  Size  Location     Type
  1919 ;;                  1    wreg      unsigned char 
  1920 ;; Registers used:
  1921 ;;		wreg, status,2
  1922 ;; Tracked objects:
  1923 ;;		On entry : 0/0
  1924 ;;		On exit  : 0/0
  1925 ;;		Unchanged: 0/0
  1926 ;; Data sizes:     COMRAM   BANK0   BANK1
  1927 ;;      Params:         0       0       0
  1928 ;;      Locals:         0       0       0
  1929 ;;      Temps:          0       0       0
  1930 ;;      Totals:         0       0       0
  1931 ;;Total ram usage:        0 bytes
  1932 ;; Hardware stack levels used: 1
  1933 ;; Hardware stack levels required when called: 2
  1934 ;; This function calls:
  1935 ;;		Nothing
  1936 ;; This function is called by:
  1937 ;;		_MotorValorsTeclat
  1938 ;; This function uses a non-reentrant model
  1939 ;;
  1940                           
  1941                           	psect	text10
  1942   000190                     __ptext10:
  1943                           	callstack 0
  1944   000190                     _TeclaPremuda:
  1945                           	callstack 27
  1946                           
  1947                           ;teclat.c: 96:     return teclapremuda;
  1948                           
  1949                           ;incstack = 0
  1950   000190  5044               	movf	_teclapremuda^0,w,c
  1951   000192  0012               	return		;funcret
  1952   000194                     __end_of_TeclaPremuda:
  1953                           	callstack 0
  1954                           
  1955 ;; *************** function _MotorTX *****************
  1956 ;; Defined at:
  1957 ;;		line 35 in file "txcom.c"
  1958 ;; Parameters:    Size  Location     Type
  1959 ;;		None
  1960 ;; Auto vars:     Size  Location     Type
  1961 ;;		None
  1962 ;; Return value:  Size  Location     Type
  1963 ;;                  1    wreg      void 
  1964 ;; Registers used:
  1965 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  1966 ;; Tracked objects:
  1967 ;;		On entry : 0/0
  1968 ;;		On exit  : 0/0
  1969 ;;		Unchanged: 0/0
  1970 ;; Data sizes:     COMRAM   BANK0   BANK1
  1971 ;;      Params:         0       0       0
  1972 ;;      Locals:         0       0       0
  1973 ;;      Temps:          6       0       0
  1974 ;;      Totals:         6       0       0
  1975 ;;Total ram usage:        6 bytes
  1976 ;; Hardware stack levels used: 1
  1977 ;; Hardware stack levels required when called: 3
  1978 ;; This function calls:
  1979 ;;		_TI_GetTics
  1980 ;;		_TI_ResetTics
  1981 ;; This function is called by:
  1982 ;;		_main
  1983 ;; This function uses a non-reentrant model
  1984 ;;
  1985                           
  1986                           	psect	text11
  1987   001648                     __ptext11:
  1988                           	callstack 0
  1989   001648                     _MotorTX:
  1990                           	callstack 27
  1991                           
  1992                           ;txcom.c: 36:     static char state = 0;;txcom.c: 38:  switch(state) {
  1993                           
  1994                           ;incstack = 0
  1995   001648  D04C               	goto	l5746
  1996   00164A                     l5710:
  1997                           
  1998                           ;txcom.c: 40:    if (start == 1) {
  1999   00164A  043B               	decf	_start@txcom$F1020^0,w,c
  2000   00164C  A4D8               	btfss	status,2,c
  2001   00164E  0012               	return	
  2002                           
  2003                           ;txcom.c: 41:                 TI_ResetTics(timer);
  2004   001650  5054               	movf	_timer@txcom$F1023^0,w,c
  2005   001652  EC1B  F000         	call	_TI_ResetTics
  2006                           
  2007                           ;txcom.c: 43:                 LATCbits.LATC5=0;
  2008   001656  9A8B               	bcf	139,5,c	;volatile
  2009   001658                     l5716:
  2010                           
  2011                           ;txcom.c: 44:                 state++;
  2012   001658  2A37               	incf	MotorTX@state^0,f,c
  2013   00165A  0012               	return	
  2014   00165C                     l5718:
  2015                           
  2016                           ;txcom.c: 51:             if (TI_GetTics(timer)>=20 + (20*nMSG)) {
  2017   00165C  503A               	movf	_nMSG^0,w,c
  2018   00165E  0D14               	mullw	20
  2019   001660  CFF3 F066          	movff	prodl,??_MotorTX
  2020   001664  CFF4 F067          	movff	prodh,??_MotorTX+1
  2021   001668  0E14               	movlw	20
  2022   00166A  2466               	addwf	??_MotorTX^0,w,c
  2023   00166C  6E68               	movwf	(??_MotorTX+2)^0,c
  2024   00166E  0E00               	movlw	0
  2025   001670  2067               	addwfc	(??_MotorTX+1)^0,w,c
  2026   001672  6E69               	movwf	(??_MotorTX+3)^0,c
  2027   001674  6A6A               	clrf	(??_MotorTX+4)^0,c
  2028   001676  BE69               	btfsc	(??_MotorTX+3)^0,7,c
  2029   001678  066A               	decf	(??_MotorTX+4)^0,f,c
  2030   00167A  506A               	movf	(??_MotorTX+4)^0,w,c
  2031   00167C  6E6B               	movwf	(??_MotorTX+5)^0,c
  2032   00167E  5054               	movf	_timer@txcom$F1023^0,w,c
  2033   001680  ECC1  F00E         	call	_TI_GetTics
  2034   001684  5068               	movf	(??_MotorTX+2)^0,w,c
  2035   001686  5C59               	subwf	?_TI_GetTics^0,w,c
  2036   001688  5069               	movf	(??_MotorTX+3)^0,w,c
  2037   00168A  585A               	subwfb	(?_TI_GetTics+1)^0,w,c
  2038   00168C  506A               	movf	(??_MotorTX+4)^0,w,c
  2039   00168E  585B               	subwfb	(?_TI_GetTics+2)^0,w,c
  2040   001690  506B               	movf	(??_MotorTX+5)^0,w,c
  2041   001692  585C               	subwfb	(?_TI_GetTics+3)^0,w,c
  2042   001694  E2E1               	bc	l5716
  2043   001696  0012               	return	
  2044   001698                     l5722:
  2045                           
  2046                           ;txcom.c: 56:    if (nMSG < 8) {
  2047   001698  0E08               	movlw	8
  2048   00169A  603A               	cpfslt	_nMSG^0,c
  2049   00169C  D00D               	goto	l452
  2050                           
  2051                           ;txcom.c: 57:                 MSG_AUX = 0x01 & (MSG);
  2052   00169E  5055               	movf	_MSG^0,w,c
  2053   0016A0  0B01               	andlw	1
  2054   0016A2  6E39               	movwf	_MSG_AUX^0,c
  2055                           
  2056                           ;txcom.c: 58:                 MSG = (MSG>>1);
  2057   0016A4  90D8               	bcf	status,0,c
  2058   0016A6  3255               	rrcf	_MSG^0,f,c
  2059                           
  2060                           ;txcom.c: 59:                 nMSG++;
  2061   0016A8  2A3A               	incf	_nMSG^0,f,c
  2062                           
  2063                           ;txcom.c: 61:     state--;
  2064   0016AA  0637               	decf	MotorTX@state^0,f,c
  2065                           
  2066                           ;txcom.c: 62:                 if (MSG_AUX == 0){
  2067   0016AC  5039               	movf	_MSG_AUX^0,w,c
  2068   0016AE  E102               	bnz	l453
  2069                           
  2070                           ;txcom.c: 63:                     LATCbits.LATC5=0;
  2071   0016B0  9A8B               	bcf	139,5,c	;volatile
  2072                           
  2073                           ;txcom.c: 64:                 }
  2074   0016B2  0012               	return	
  2075   0016B4                     l453:
  2076                           
  2077                           ;txcom.c: 66:                     LATCbits.LATC5=1;
  2078   0016B4  8A8B               	bsf	139,5,c	;volatile
  2079   0016B6  0012               	return	
  2080   0016B8                     l452:
  2081                           
  2082                           ;txcom.c: 70:                 LATCbits.LATC5=1;
  2083   0016B8  8A8B               	bsf	139,5,c	;volatile
  2084                           
  2085                           ;txcom.c: 71:                 nMSG=0;
  2086   0016BA  6A3A               	clrf	_nMSG^0,c
  2087   0016BC  D7CD               	goto	l5716
  2088   0016BE                     l5736:
  2089                           
  2090                           ;txcom.c: 77:             if (TI_GetTics(timer)>=220) {
  2091   0016BE  5054               	movf	_timer@txcom$F1023^0,w,c
  2092   0016C0  ECC1  F00E         	call	_TI_GetTics
  2093   0016C4  505C               	movf	(?_TI_GetTics+3)^0,w,c
  2094   0016C6  105B               	iorwf	(?_TI_GetTics+2)^0,w,c
  2095   0016C8  105A               	iorwf	(?_TI_GetTics+1)^0,w,c
  2096   0016CA  E104               	bnz	u5250
  2097   0016CC  0EDC               	movlw	220
  2098   0016CE  5C59               	subwf	?_TI_GetTics^0,w,c
  2099   0016D0  A0D8               	btfss	status,0,c
  2100   0016D2  0012               	return	
  2101   0016D4                     u5250:
  2102                           
  2103                           ;txcom.c: 78:                 start = 0;
  2104   0016D4  6A3B               	clrf	_start@txcom$F1020^0,c
  2105                           
  2106                           ;txcom.c: 79:                 state=0;
  2107   0016D6  6A37               	clrf	MotorTX@state^0,c
  2108                           
  2109                           ;txcom.c: 80:                 end_TX=1;
  2110   0016D8  0E01               	movlw	1
  2111   0016DA  6E38               	movwf	_end_TX^0,c
  2112                           
  2113                           ;txcom.c: 81:                 TI_ResetTics(timer);
  2114   0016DC  5054               	movf	_timer@txcom$F1023^0,w,c
  2115   0016DE  EF1B  F000         	goto	_TI_ResetTics
  2116   0016E2                     l5746:
  2117   0016E2  5037               	movf	MotorTX@state^0,w,c
  2118                           
  2119                           ; Switch size 1, requested type "space"
  2120                           ; Number of cases is 4, Range of values is 0 to 3
  2121                           ; switch strategies available:
  2122                           ; Name         Instructions Cycles
  2123                           ; simple_byte           13     7 (average)
  2124                           ;	Chosen strategy is simple_byte
  2125   0016E4  E0B2               	bz	l5710
  2126   0016E6  0A01               	xorlw	1	; case 1
  2127   0016E8  E0B9               	bz	l5718
  2128   0016EA  0A03               	xorlw	3	; case 2
  2129   0016EC  E0D5               	bz	l5722
  2130   0016EE  0A01               	xorlw	1	; case 3
  2131   0016F0  E0E6               	bz	l5736
  2132   0016F2  0012               	return		;funcret
  2133   0016F4                     __end_of_MotorTX:
  2134                           	callstack 0
  2135                           
  2136 ;; *************** function _MotorRX *****************
  2137 ;; Defined at:
  2138 ;;		line 38 in file "rxcom.c"
  2139 ;; Parameters:    Size  Location     Type
  2140 ;;		None
  2141 ;; Auto vars:     Size  Location     Type
  2142 ;;		None
  2143 ;; Return value:  Size  Location     Type
  2144 ;;                  1    wreg      void 
  2145 ;; Registers used:
  2146 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2147 ;; Tracked objects:
  2148 ;;		On entry : 0/0
  2149 ;;		On exit  : 0/0
  2150 ;;		Unchanged: 0/0
  2151 ;; Data sizes:     COMRAM   BANK0   BANK1
  2152 ;;      Params:         0       0       0
  2153 ;;      Locals:         0       0       0
  2154 ;;      Temps:          6       0       0
  2155 ;;      Totals:         6       0       0
  2156 ;;Total ram usage:        6 bytes
  2157 ;; Hardware stack levels used: 1
  2158 ;; Hardware stack levels required when called: 3
  2159 ;; This function calls:
  2160 ;;		_EQM_MSG
  2161 ;;		_SIO_PutChar
  2162 ;;		_TI_GetTics
  2163 ;;		_TI_ResetTics
  2164 ;; This function is called by:
  2165 ;;		_main
  2166 ;; This function uses a non-reentrant model
  2167 ;;
  2168                           
  2169                           	psect	text12
  2170   0013F0                     __ptext12:
  2171                           	callstack 0
  2172   0013F0                     _MotorRX:
  2173                           	callstack 27
  2174                           
  2175                           ;rxcom.c: 39:     static char state;;rxcom.c: 41:  switch(state) {
  2176                           
  2177                           ;incstack = 0
  2178   0013F0  D060               	goto	l5794
  2179   0013F2                     l543:
  2180                           
  2181                           ;rxcom.c: 43:             if (PORTBbits.RB7==1){
  2182   0013F2  BE81               	btfsc	129,7,c	;volatile
  2183   0013F4  D05B               	goto	l5790
  2184                           
  2185                           ;rxcom.c: 47:                 if (TI_GetTics(timer)>=10){
  2186                           
  2187                           ;rxcom.c: 45:             }
  2188                           
  2189                           ;rxcom.c: 44:                 TI_ResetTics(timer);
  2190   0013F6  5053               	movf	_timer@rxcom$F1159^0,w,c
  2191   0013F8  ECC1  F00E         	call	_TI_GetTics
  2192   0013FC  505C               	movf	(?_TI_GetTics+3)^0,w,c
  2193   0013FE  105B               	iorwf	(?_TI_GetTics+2)^0,w,c
  2194   001400  105A               	iorwf	(?_TI_GetTics+1)^0,w,c
  2195   001402  E104               	bnz	u5270
  2196   001404  0E0A               	movlw	10
  2197   001406  5C59               	subwf	?_TI_GetTics^0,w,c
  2198   001408  A0D8               	btfss	status,0,c
  2199   00140A  0012               	return	
  2200   00140C                     u5270:
  2201                           
  2202                           ;rxcom.c: 49:                 state=2;
  2203   00140C  0E02               	movlw	2
  2204   00140E  6E31               	movwf	MotorRX@state^0,c
  2205                           
  2206                           ;rxcom.c: 50:                 LATAbits.LATA4=0;
  2207   001410  9889               	bcf	137,4,c	;volatile
  2208   001412  0C02               	retlw	2
  2209   001414                     l5758:
  2210                           
  2211                           ;rxcom.c: 55:    if ( nMSG < 8 ) {
  2212   001414  0E08               	movlw	8
  2213   001416  6035               	cpfslt	_nMSG@rxcom$F1158^0,c
  2214   001418  D005               	goto	l549
  2215                           
  2216                           ;rxcom.c: 56:                 MSG_AUX = (MSG_AUX>>1) | (PORTB & 0x80);
  2217   00141A  3481               	rlcf	129,w,c	;volatile
  2218   00141C  3234               	rrcf	_MSG_AUX@rxcom$F1160^0,f,c
  2219                           
  2220                           ;rxcom.c: 57:                 nMSG++;
  2221   00141E  2A35               	incf	_nMSG@rxcom$F1158^0,f,c
  2222                           
  2223                           ;rxcom.c: 58:     state++;
  2224   001420  2A31               	incf	MotorRX@state^0,f,c
  2225                           
  2226                           ;rxcom.c: 59:    } else {
  2227   001422  0012               	return	
  2228   001424                     l549:
  2229                           
  2230                           ;rxcom.c: 60:                 nMSG=0;
  2231   001424  6A35               	clrf	_nMSG@rxcom$F1158^0,c
  2232                           
  2233                           ;rxcom.c: 61:                 state=3;
  2234   001426  0E03               	movlw	3
  2235   001428  6E31               	movwf	MotorRX@state^0,c
  2236   00142A  0C03               	retlw	3
  2237   00142C                     l5768:
  2238                           
  2239                           ;rxcom.c: 69:             if (TI_GetTics(timer)>=30 + (nMSG*20)) {
  2240   00142C  5035               	movf	_nMSG@rxcom$F1158^0,w,c
  2241   00142E  0D14               	mullw	20
  2242   001430  CFF3 F066          	movff	prodl,??_MotorRX
  2243   001434  CFF4 F067          	movff	prodh,??_MotorRX+1
  2244   001438  0E1E               	movlw	30
  2245   00143A  2466               	addwf	??_MotorRX^0,w,c
  2246   00143C  6E68               	movwf	(??_MotorRX+2)^0,c
  2247   00143E  0E00               	movlw	0
  2248   001440  2067               	addwfc	(??_MotorRX+1)^0,w,c
  2249   001442  6E69               	movwf	(??_MotorRX+3)^0,c
  2250   001444  6A6A               	clrf	(??_MotorRX+4)^0,c
  2251   001446  BE69               	btfsc	(??_MotorRX+3)^0,7,c
  2252   001448  066A               	decf	(??_MotorRX+4)^0,f,c
  2253   00144A  506A               	movf	(??_MotorRX+4)^0,w,c
  2254   00144C  6E6B               	movwf	(??_MotorRX+5)^0,c
  2255   00144E  5053               	movf	_timer@rxcom$F1159^0,w,c
  2256   001450  ECC1  F00E         	call	_TI_GetTics
  2257   001454  5068               	movf	(??_MotorRX+2)^0,w,c
  2258   001456  5C59               	subwf	?_TI_GetTics^0,w,c
  2259   001458  5069               	movf	(??_MotorRX+3)^0,w,c
  2260   00145A  585A               	subwfb	(?_TI_GetTics+1)^0,w,c
  2261   00145C  506A               	movf	(??_MotorRX+4)^0,w,c
  2262   00145E  585B               	subwfb	(?_TI_GetTics+2)^0,w,c
  2263   001460  506B               	movf	(??_MotorRX+5)^0,w,c
  2264   001462  585C               	subwfb	(?_TI_GetTics+3)^0,w,c
  2265   001464  B0D8               	btfsc	status,0,c
  2266                           
  2267                           ;rxcom.c: 71:                 state --;
  2268   001466  0631               	decf	MotorRX@state^0,f,c
  2269   001468  0012               	return	
  2270   00146A                     l5772:
  2271                           
  2272                           ;rxcom.c: 76:             if (TI_GetTics(timer)>=190) {
  2273   00146A  5053               	movf	_timer@rxcom$F1159^0,w,c
  2274   00146C  ECC1  F00E         	call	_TI_GetTics
  2275   001470  505C               	movf	(?_TI_GetTics+3)^0,w,c
  2276   001472  105B               	iorwf	(?_TI_GetTics+2)^0,w,c
  2277   001474  105A               	iorwf	(?_TI_GetTics+1)^0,w,c
  2278   001476  E104               	bnz	u5300
  2279   001478  0EBE               	movlw	190
  2280   00147A  5C59               	subwf	?_TI_GetTics^0,w,c
  2281   00147C  A0D8               	btfss	status,0,c
  2282   00147E  0012               	return	
  2283   001480                     u5300:
  2284                           
  2285                           ;rxcom.c: 78:                 if (inMSG[index] == MSG_AUX){
  2286   001480  5032               	movf	_index^0,w,c
  2287   001482  0F01               	addlw	low _inMSG
  2288   001484  6ED9               	movwf	fsr2l,c
  2289   001486  6ADA               	clrf	fsr2h,c
  2290   001488  5034               	movf	_MSG_AUX@rxcom$F1160^0,w,c
  2291   00148A  18DE               	xorwf	postinc2,w,c
  2292   00148C  E108               	bnz	l555
  2293                           
  2294                           ;rxcom.c: 79:                     index++;
  2295   00148E  2A32               	incf	_index^0,f,c
  2296                           
  2297                           ;rxcom.c: 80:                     if (index == 4){
  2298   001490  0E04               	movlw	4
  2299   001492  1832               	xorwf	_index^0,w,c
  2300   001494  E105               	bnz	l5784
  2301                           
  2302                           ;rxcom.c: 81:                         index=0;
  2303   001496  6A32               	clrf	_index^0,c
  2304                           
  2305                           ;rxcom.c: 82:                         EQM_MSG();
  2306   001498  ECCA  F000         	call	_EQM_MSG	;wreg free
  2307   00149C  D001               	goto	l5784
  2308   00149E                     l555:
  2309                           
  2310                           ;rxcom.c: 85:                     index=0;
  2311   00149E  6A32               	clrf	_index^0,c
  2312   0014A0                     l5784:
  2313                           
  2314                           ;rxcom.c: 87:                 SIO_PutChar(MSG_AUX);
  2315   0014A0  5034               	movf	_MSG_AUX@rxcom$F1160^0,w,c
  2316   0014A2  ECB5  F000         	call	_SIO_PutChar
  2317                           
  2318                           ;rxcom.c: 89:                 flag_RX=1;
  2319   0014A6  0E01               	movlw	1
  2320   0014A8  6E33               	movwf	_flag_RX^0,c
  2321                           
  2322                           ;rxcom.c: 90:                 state = 0;
  2323   0014AA  6A31               	clrf	MotorRX@state^0,c
  2324   0014AC                     l5790:
  2325                           
  2326                           ;rxcom.c: 91:                 TI_ResetTics(timer);
  2327   0014AC  5053               	movf	_timer@rxcom$F1159^0,w,c
  2328   0014AE  EF1B  F000         	goto	_TI_ResetTics
  2329   0014B2                     l5794:
  2330   0014B2  5031               	movf	MotorRX@state^0,w,c
  2331                           
  2332                           ; Switch size 1, requested type "space"
  2333                           ; Number of cases is 4, Range of values is 0 to 3
  2334                           ; switch strategies available:
  2335                           ; Name         Instructions Cycles
  2336                           ; simple_byte           13     7 (average)
  2337                           ;	Chosen strategy is simple_byte
  2338   0014B4  E09E               	bz	l543
  2339   0014B6  0A01               	xorlw	1	; case 1
  2340   0014B8  E0AD               	bz	l5758
  2341   0014BA  0A03               	xorlw	3	; case 2
  2342   0014BC  E0B7               	bz	l5768
  2343   0014BE  0A01               	xorlw	1	; case 3
  2344   0014C0  E0D4               	bz	l5772
  2345   0014C2  0012               	return		;funcret
  2346   0014C4                     __end_of_MotorRX:
  2347                           	callstack 0
  2348                           
  2349 ;; *************** function _EQM_MSG *****************
  2350 ;; Defined at:
  2351 ;;		line 69 in file "EQM.c"
  2352 ;; Parameters:    Size  Location     Type
  2353 ;;		None
  2354 ;; Auto vars:     Size  Location     Type
  2355 ;;		None
  2356 ;; Return value:  Size  Location     Type
  2357 ;;                  1    wreg      void 
  2358 ;; Registers used:
  2359 ;;		None
  2360 ;; Tracked objects:
  2361 ;;		On entry : 0/0
  2362 ;;		On exit  : 0/0
  2363 ;;		Unchanged: 0/0
  2364 ;; Data sizes:     COMRAM   BANK0   BANK1
  2365 ;;      Params:         0       0       0
  2366 ;;      Locals:         0       0       0
  2367 ;;      Temps:          0       0       0
  2368 ;;      Totals:         0       0       0
  2369 ;;Total ram usage:        0 bytes
  2370 ;; Hardware stack levels used: 1
  2371 ;; Hardware stack levels required when called: 2
  2372 ;; This function calls:
  2373 ;;		Nothing
  2374 ;; This function is called by:
  2375 ;;		_MotorRX
  2376 ;; This function uses a non-reentrant model
  2377 ;;
  2378                           
  2379                           	psect	text13
  2380   000194                     __ptext13:
  2381                           	callstack 0
  2382   000194                     _EQM_MSG:
  2383                           	callstack 27
  2384                           
  2385                           ;EQM.c: 71:     start=0;
  2386                           
  2387                           ;incstack = 0
  2388   000194  6A30               	clrf	_start@EQM$F1359^0,c
  2389   000196  0012               	return		;funcret
  2390   000198                     __end_of_EQM_MSG:
  2391                           	callstack 0
  2392                           
  2393 ;; *************** function _MotorMenu *****************
  2394 ;; Defined at:
  2395 ;;		line 54 in file "menu.c"
  2396 ;; Parameters:    Size  Location     Type
  2397 ;;		None
  2398 ;; Auto vars:     Size  Location     Type
  2399 ;;		None
  2400 ;; Return value:  Size  Location     Type
  2401 ;;                  1    wreg      void 
  2402 ;; Registers used:
  2403 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2404 ;; Tracked objects:
  2405 ;;		On entry : 0/0
  2406 ;;		On exit  : 0/0
  2407 ;;		Unchanged: 0/0
  2408 ;; Data sizes:     COMRAM   BANK0   BANK1
  2409 ;;      Params:         0       0       0
  2410 ;;      Locals:         0       0       0
  2411 ;;      Temps:          2       0       0
  2412 ;;      Totals:         2       0       0
  2413 ;;Total ram usage:        2 bytes
  2414 ;; Hardware stack levels used: 1
  2415 ;; Hardware stack levels required when called: 6
  2416 ;; This function calls:
  2417 ;;		_GetTecla
  2418 ;;		_HiHaTecla
  2419 ;;		_LcClear
  2420 ;;		_LcGotoXY
  2421 ;;		_LcPutChar
  2422 ;;		_TI_GetTics
  2423 ;;		_TI_ResetTics
  2424 ;;		_finishConversion
  2425 ;;		_getAction
  2426 ;;		_mouJoyAvail
  2427 ;;		_startConversion
  2428 ;; This function is called by:
  2429 ;;		_main
  2430 ;; This function uses a non-reentrant model
  2431 ;;
  2432                           
  2433                           	psect	text14
  2434   000B70                     __ptext14:
  2435                           	callstack 0
  2436   000B70                     _MotorMenu:
  2437                           	callstack 24
  2438                           
  2439                           ;menu.c: 55:     if (start==1) {
  2440                           
  2441                           ;incstack = 0
  2442   000B70  0417               	decf	_start@menu$F1451^0,w,c
  2443   000B72  E101 D0B1          	bz	l5920
  2444   000B76  0012               	return	
  2445   000B78                     l1027:
  2446                           
  2447                           ;menu.c: 58:                 m0=0;
  2448   000B78  6A1B               	clrf	_m0^0,c
  2449                           
  2450                           ;menu.c: 59:                 m1=0;
  2451   000B7A  6A1A               	clrf	_m1^0,c
  2452   000B7C                     
  2453                           ;menu.c: 60:                 compt=0;
  2454   000B7C  6A15               	clrf	_compt@menu$F1453^0,c
  2455   000B7E                     l5800:
  2456                           
  2457                           ;menu.c: 61:                 state++;
  2458   000B7E  2A18               	incf	_state@menu$F1450^0,f,c
  2459                           
  2460                           ;menu.c: 62:                 break;
  2461   000B80  0012               	return	
  2462   000B82                     l5802:
  2463                           
  2464                           ;menu.c: 64:                 LcClear();
  2465   000B82  EC74  F000         	call	_LcClear	;wreg free
  2466                           
  2467                           ;menu.c: 65:                 TI_ResetTics(timer);
  2468   000B86  5051               	movf	_timer@menu$F1455^0,w,c
  2469   000B88  EC1B  F000         	call	_TI_ResetTics
  2470                           
  2471                           ;menu.c: 66:                 m1 = m0;
  2472   000B8C  C01B  F01A         	movff	_m0,_m1
  2473   000B90  D7F5               	goto	L2
  2474   000B92                     l5810:
  2475                           
  2476                           ;menu.c: 71:                 LcGotoXY(compt,0);
  2477   000B92  6A67               	clrf	LcGotoXY@Row^0,c
  2478   000B94  5015               	movf	_compt@menu$F1453^0,w,c
  2479   000B96  ECD0  F00B         	call	_LcGotoXY
  2480                           
  2481                           ;menu.c: 72:                 if(m1<21){
  2482   000B9A  0E15               	movlw	21
  2483   000B9C  601A               	cpfslt	_m1^0,c
  2484   000B9E  D007               	goto	l5816
  2485                           
  2486                           ;menu.c: 73:                     LcPutChar(opcio_menu[Opt][m1]);
  2487   000BA0  D8C3               	call	PL78	;call to abstracted procedure
  2488   000BA2  6E70               	movwf	??_MotorMenu^0,c
  2489   000BA4  0E01               	movlw	high _opcio_menu
  2490   000BA6  D8B1               	call	PL36	;call to abstracted procedure
  2491   000BA8  EC97  F00E         	call	_LcPutChar
  2492                           
  2493                           ;menu.c: 74:                 } else{
  2494   000BAC  D7E8               	goto	l5800
  2495   000BAE                     l5816:
  2496                           
  2497                           ;menu.c: 75:                     LcPutChar(opcio_menu[Opt][0]);
  2498   000BAE  D8BC               	call	PL78	;call to abstracted procedure
  2499   000BB0  6ED9               	movwf	fsr2l,c
  2500   000BB2  0E01               	movlw	high _opcio_menu
  2501   000BB4  D8BE               	call	PL96	;call to abstracted procedure
  2502   000BB6  EC97  F00E         	call	_LcPutChar
  2503   000BBA  D7E1               	goto	l5800
  2504   000BBC                     l5820:
  2505                           
  2506                           ;menu.c: 80:                 LcGotoXY(compt,1);
  2507   000BBC  0E01               	movlw	1
  2508   000BBE  6E67               	movwf	LcGotoXY@Row^0,c
  2509   000BC0  5015               	movf	_compt@menu$F1453^0,w,c
  2510   000BC2  ECD0  F00B         	call	_LcGotoXY
  2511                           
  2512                           ;menu.c: 81:                 if(m1<21){
  2513   000BC6  0E15               	movlw	21
  2514   000BC8  601A               	cpfslt	_m1^0,c
  2515   000BCA  D00B               	goto	l5830
  2516                           
  2517                           ;menu.c: 82:                     if(Opt!=5){
  2518   000BCC  0E05               	movlw	5
  2519   000BCE  1819               	xorwf	_Opt^0,w,c
  2520   000BD0  E006               	bz	l5828
  2521                           
  2522                           ;menu.c: 83:                         LcPutChar(opcio_menu[Opt+1][m1]);
  2523   000BD2  D8A5               	call	PL74	;call to abstracted procedure
  2524   000BD4  6E70               	movwf	??_MotorMenu^0,c
  2525   000BD6  0E01               	movlw	high (_opcio_menu+21)
  2526   000BD8  D898               	call	PL36	;call to abstracted procedure
  2527   000BDA  EC97  F00E         	call	_LcPutChar
  2528   000BDE                     l5828:
  2529                           
  2530                           ;menu.c: 85:                     m1++;
  2531   000BDE  2A1A               	incf	_m1^0,f,c
  2532                           
  2533                           ;menu.c: 86:                 } else{
  2534   000BE0  D00B               	goto	l5836
  2535   000BE2                     l5830:
  2536                           
  2537                           ;menu.c: 87:                     if(Opt!=5){
  2538   000BE2  0E05               	movlw	5
  2539   000BE4  1819               	xorwf	_Opt^0,w,c
  2540   000BE6  E006               	bz	l5834
  2541                           
  2542                           ;menu.c: 88:                     LcPutChar(opcio_menu[Opt+1][0]);
  2543   000BE8  D89A               	call	PL74	;call to abstracted procedure
  2544   000BEA  6ED9               	movwf	fsr2l,c
  2545   000BEC  0E01               	movlw	high (_opcio_menu+21)
  2546   000BEE  D8A1               	call	PL96	;call to abstracted procedure
  2547   000BF0  EC97  F00E         	call	_LcPutChar
  2548   000BF4                     l5834:
  2549                           
  2550                           ;menu.c: 90:                     m1=1;
  2551   000BF4  0E01               	movlw	1
  2552   000BF6  6E1A               	movwf	_m1^0,c
  2553   000BF8                     l5836:
  2554                           
  2555                           ;menu.c: 92:                 compt++;
  2556   000BF8  2A15               	incf	_compt@menu$F1453^0,f,c
  2557                           
  2558                           ;menu.c: 93:                 if(compt ==16){
  2559   000BFA  0E10               	movlw	16
  2560   000BFC  1815               	xorwf	_compt@menu$F1453^0,w,c
  2561   000BFE  E0BE               	bz	L2
  2562                           
  2563                           ;menu.c: 97:                     state--;
  2564   000C00  0618               	decf	_state@menu$F1450^0,f,c
  2565   000C02  0012               	return	
  2566   000C04                     l5846:
  2567                           
  2568                           ;menu.c: 101:                 if (HiHaTecla()) {
  2569   000C04  EC69  F000         	call	_HiHaTecla	;wreg free
  2570   000C08  0900               	iorlw	0
  2571   000C0A  E004               	bz	l5852
  2572                           
  2573                           ;menu.c: 102:                     tecla = GetTecla();
  2574   000C0C  EC33  F00F         	call	_GetTecla	;wreg free
  2575   000C10  6E16               	movwf	_tecla@menu$F1452^0,c
  2576   000C12  D7B5               	goto	l5800
  2577   000C14                     l5852:
  2578   000C14  EC69  F000         	call	_HiHaTecla	;wreg free
  2579   000C18  0900               	iorlw	0
  2580   000C1A  A4D8               	btfss	status,2,c
  2581   000C1C  0012               	return	
  2582                           
  2583                           ;menu.c: 106:                     startConversion();
  2584   000C1E  ECD4  F000         	call	_startConversion	;wreg free
  2585                           
  2586                           ;menu.c: 107:                     state = 6;
  2587   000C22  0E06               	movlw	6
  2588   000C24  6E18               	movwf	_state@menu$F1450^0,c
  2589   000C26  0C06               	retlw	6
  2590   000C28                     l5858:
  2591                           
  2592                           ;menu.c: 111:                 if (tecla=='#') {
  2593   000C28  0E23               	movlw	35
  2594   000C2A  1816               	xorwf	_tecla@menu$F1452^0,w,c
  2595   000C2C  E103               	bnz	l5862
  2596                           
  2597                           ;menu.c: 112:                     state = 9;
  2598   000C2E  0E09               	movlw	9
  2599   000C30  6E18               	movwf	_state@menu$F1450^0,c
  2600                           
  2601                           ;menu.c: 113:                 }
  2602   000C32  0C09               	retlw	9
  2603   000C34                     l5862:
  2604   000C34  0E23               	movlw	35
  2605   000C36  1816               	xorwf	_tecla@menu$F1452^0,w,c
  2606   000C38  B4D8               	btfsc	status,2,c
  2607   000C3A  0012               	return	
  2608                           
  2609                           ;menu.c: 115:                     startConversion();
  2610   000C3C  ECD4  F000         	call	_startConversion	;wreg free
  2611   000C40  D79E               	goto	l5800
  2612   000C42                     l5868:
  2613                           
  2614                           ;menu.c: 120:                 if (finishConversion()==1 && mouJoyAvail()==1) {
  2615   000C42  ECBC  F000         	call	_finishConversion	;wreg free
  2616   000C46  06E8               	decf	wreg,f,c
  2617   000C48  E108               	bnz	l5876
  2618   000C4A  EC93  F00F         	call	_mouJoyAvail	;wreg free
  2619   000C4E  06E8               	decf	wreg,f,c
  2620   000C50  E104               	bnz	l5876
  2621                           
  2622                           ;menu.c: 121:                     action=getAction();
  2623   000C52  ECD6  F000         	call	_getAction	;wreg free
  2624   000C56  6E14               	movwf	_action@menu$F1454^0,c
  2625   000C58  D792               	goto	l5800
  2626   000C5A                     l5876:
  2627   000C5A  ECBC  F000         	call	_finishConversion	;wreg free
  2628   000C5E  06E8               	decf	wreg,f,c
  2629   000C60  A4D8               	btfss	status,2,c
  2630   000C62  0012               	return	
  2631   000C64  EC93  F00F         	call	_mouJoyAvail	;wreg free
  2632   000C68  0900               	iorlw	0
  2633   000C6A  A4D8               	btfss	status,2,c
  2634   000C6C  0012               	return	
  2635                           
  2636                           ;menu.c: 125:                     state=8;
  2637   000C6E  0E08               	movlw	8
  2638   000C70  6E18               	movwf	_state@menu$F1450^0,c
  2639   000C72  0C08               	retlw	8
  2640   000C74                     l5882:
  2641                           
  2642                           ;menu.c: 129:                 if (action==2) {
  2643   000C74  0E02               	movlw	2
  2644   000C76  1814               	xorwf	_action@menu$F1454^0,w,c
  2645   000C78  E104               	bnz	l5888
  2646                           
  2647                           ;menu.c: 130:                     if (Opt != 0){
  2648   000C7A  5019               	movf	_Opt^0,w,c
  2649   000C7C  E008               	bz	l5894
  2650                           
  2651                           ;menu.c: 131:                         Opt--;
  2652   000C7E  0619               	decf	_Opt^0,f,c
  2653   000C80  D006               	goto	l5894
  2654   000C82                     l5888:
  2655   000C82  0414               	decf	_action@menu$F1454^0,w,c
  2656   000C84  E104               	bnz	l5894
  2657                           
  2658                           ;menu.c: 135:                     if (Opt != 5){
  2659   000C86  0E05               	movlw	5
  2660   000C88  1819               	xorwf	_Opt^0,w,c
  2661   000C8A  E001               	bz	l5894
  2662                           
  2663                           ;menu.c: 136:                         Opt++;
  2664   000C8C  2A19               	incf	_Opt^0,f,c
  2665   000C8E                     l5894:
  2666                           
  2667                           ;menu.c: 139:                 m0=0;
  2668   000C8E  6A1B               	clrf	_m0^0,c
  2669   000C90                     l5896:
  2670                           
  2671                           ;menu.c: 140:                 state=1;
  2672   000C90  0E01               	movlw	1
  2673   000C92  6E18               	movwf	_state@menu$F1450^0,c
  2674                           
  2675                           ;menu.c: 141:                 break;
  2676   000C94  0C01               	retlw	1
  2677   000C96                     l5898:
  2678                           
  2679                           ;menu.c: 143:                 if (TI_GetTics(timer)>=10000) {
  2680   000C96  5051               	movf	_timer@menu$F1455^0,w,c
  2681   000C98  ECC1  F00E         	call	_TI_GetTics
  2682   000C9C  505C               	movf	(?_TI_GetTics+3)^0,w,c
  2683   000C9E  105B               	iorwf	(?_TI_GetTics+2)^0,w,c
  2684   000CA0  E105               	bnz	u5510
  2685   000CA2  0E10               	movlw	16
  2686   000CA4  5C59               	subwf	?_TI_GetTics^0,w,c
  2687   000CA6  0E27               	movlw	39
  2688   000CA8  585A               	subwfb	(?_TI_GetTics+1)^0,w,c
  2689   000CAA  E305               	bnc	l5908
  2690   000CAC                     u5510:
  2691                           
  2692                           ;menu.c: 144:                     m0++;
  2693   000CAC  2A1B               	incf	_m0^0,f,c
  2694                           
  2695                           ;menu.c: 145:                     if(m0>21){
  2696   000CAE  0E15               	movlw	21
  2697   000CB0  641B               	cpfsgt	_m0^0,c
  2698   000CB2  D7EE               	goto	l5896
  2699   000CB4  D7EC               	goto	l5894
  2700   000CB6                     l5908:
  2701                           
  2702                           ;menu.c: 150:                     state = 4;
  2703   000CB6  0E04               	movlw	4
  2704   000CB8  6E18               	movwf	_state@menu$F1450^0,c
  2705   000CBA  0C04               	retlw	4
  2706   000CBC                     l5910:
  2707                           
  2708                           ;menu.c: 154:                 if (!HiHaTecla()) {
  2709   000CBC  EC69  F000         	call	_HiHaTecla	;wreg free
  2710   000CC0  0900               	iorlw	0
  2711   000CC2  A4D8               	btfss	status,2,c
  2712   000CC4  0012               	return	
  2713                           
  2714                           ;menu.c: 155:                     LcClear();
  2715   000CC6  EC74  F000         	call	_LcClear	;wreg free
  2716                           
  2717                           ;menu.c: 156:                     LcGotoXY(0,0);
  2718   000CCA  0E00               	movlw	0
  2719   000CCC  6A67               	clrf	LcGotoXY@Row^0,c
  2720   000CCE  ECD0  F00B         	call	_LcGotoXY
  2721                           
  2722                           ;menu.c: 157:                     state=0;
  2723   000CD2  6A18               	clrf	_state@menu$F1450^0,c
  2724                           
  2725                           ;menu.c: 158:                     start=0;
  2726   000CD4  6A17               	clrf	_start@menu$F1451^0,c
  2727   000CD6  0012               	return	
  2728   000CD8                     l5920:
  2729   000CD8  5018               	movf	_state@menu$F1450^0,w,c
  2730                           
  2731                           ; Switch size 1, requested type "space"
  2732                           ; Number of cases is 10, Range of values is 0 to 9
  2733                           ; switch strategies available:
  2734                           ; Name         Instructions Cycles
  2735                           ; simple_byte           31    16 (average)
  2736                           ;	Chosen strategy is simple_byte
  2737   000CDA  E101 D74D          	bz	l1027
  2738   000CDE  0A01               	xorlw	1	; case 1
  2739   000CE0  E101 D74F          	bz	l5802
  2740   000CE4  0A03               	xorlw	3	; case 2
  2741   000CE6  E101 D754          	bz	l5810
  2742   000CEA  0A01               	xorlw	1	; case 3
  2743   000CEC  E101 D766          	bz	l5820
  2744   000CF0  0A07               	xorlw	7	; case 4
  2745   000CF2  E088               	bz	l5846
  2746   000CF4  0A01               	xorlw	1	; case 5
  2747   000CF6  E098               	bz	l5858
  2748   000CF8  0A03               	xorlw	3	; case 6
  2749   000CFA  E0A3               	bz	l5868
  2750   000CFC  0A01               	xorlw	1	; case 7
  2751   000CFE  E0BA               	bz	l5882
  2752   000D00  0A0F               	xorlw	15	; case 8
  2753   000D02  E0C9               	bz	l5898
  2754   000D04  0A01               	xorlw	1	; case 9
  2755   000D06  E0DA               	bz	l5910
  2756   000D08  0012               	return		;funcret
  2757   000D0A                     __end_of_MotorMenu:
  2758                           	callstack 0
  2759   000D0A                     PL36:
  2760                           	callstack 24
  2761   000D0A  20F4               	addwfc	prodh,w,c
  2762   000D0C  6E71               	movwf	(??_MotorMenu+1)^0,c
  2763   000D0E  501A               	movf	_m1^0,w,c
  2764   000D10  2470               	addwf	??_MotorMenu^0,w,c
  2765   000D12  6ED9               	movwf	fsr2l,c
  2766   000D14  0E00               	movlw	0
  2767   000D16  2071               	addwfc	(??_MotorMenu+1)^0,w,c
  2768   000D18  6EDA               	movwf	fsr2h,c
  2769   000D1A  50DF               	movf	indf2,w,c
  2770   000D1C  0012               	return	
  2771   000D1E                     __end_ofPL36:
  2772                           	callstack 0
  2773   000D1E                     PL74:
  2774                           	callstack 24
  2775   000D1E  5019               	movf	_Opt^0,w,c
  2776   000D20  0D15               	mullw	21
  2777   000D22  0E15               	movlw	low (_opcio_menu+21)
  2778   000D24  24F3               	addwf	243,w,c
  2779   000D26  0012               	return	
  2780   000D28                     __end_ofPL74:
  2781                           	callstack 0
  2782   000D28                     PL78:
  2783                           	callstack 24
  2784   000D28  5019               	movf	_Opt^0,w,c
  2785   000D2A  0D15               	mullw	21
  2786   000D2C  0E00               	movlw	low _opcio_menu
  2787   000D2E  24F3               	addwf	243,w,c
  2788   000D30  0012               	return	
  2789   000D32                     __end_ofPL78:
  2790                           	callstack 0
  2791   000D32                     PL96:
  2792                           	callstack 24
  2793   000D32  20F4               	addwfc	prodh,w,c
  2794   000D34  6EDA               	movwf	fsr2h,c
  2795   000D36  50DF               	movf	indf2,w,c
  2796   000D38  0012               	return	
  2797   000D3A                     __end_ofPL96:
  2798                           	callstack 0
  2799                           
  2800 ;; *************** function _MotorKeyboard *****************
  2801 ;; Defined at:
  2802 ;;		line 102 in file "teclat.c"
  2803 ;; Parameters:    Size  Location     Type
  2804 ;;		None
  2805 ;; Auto vars:     Size  Location     Type
  2806 ;;		None
  2807 ;; Return value:  Size  Location     Type
  2808 ;;                  1    wreg      void 
  2809 ;; Registers used:
  2810 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  2811 ;; Tracked objects:
  2812 ;;		On entry : 0/0
  2813 ;;		On exit  : 0/0
  2814 ;;		Unchanged: 0/0
  2815 ;; Data sizes:     COMRAM   BANK0   BANK1
  2816 ;;      Params:         0       0       0
  2817 ;;      Locals:         0       0       0
  2818 ;;      Temps:          0       0       0
  2819 ;;      Totals:         0       0       0
  2820 ;;Total ram usage:        0 bytes
  2821 ;; Hardware stack levels used: 1
  2822 ;; Hardware stack levels required when called: 3
  2823 ;; This function calls:
  2824 ;;		_GetTecla
  2825 ;;		_HiHaTecla
  2826 ;;		_SorollAlt
  2827 ;;		_TI_GetTics
  2828 ;;		_TI_ResetTics
  2829 ;;		_fiSoroll
  2830 ;; This function is called by:
  2831 ;;		_main
  2832 ;; This function uses a non-reentrant model
  2833 ;;
  2834                           
  2835                           	psect	text15
  2836   001234                     __ptext15:
  2837                           	callstack 0
  2838   001234                     _MotorKeyboard:
  2839                           	callstack 27
  2840                           
  2841                           ;teclat.c: 103:  switch(state) {
  2842                           
  2843                           ;incstack = 0
  2844   001234  D065               	goto	l5576
  2845   001236                     l5504:
  2846                           
  2847                           ;teclat.c: 105:    if (!HiHaTecla() && columna == 0) {
  2848   001236  EC69  F000         	call	_HiHaTecla	;wreg free
  2849   00123A  0900               	iorlw	0
  2850   00123C  E108               	bnz	l5514
  2851   00123E  5045               	movf	_columna^0,w,c
  2852   001240  E106               	bnz	l5514
  2853                           
  2854                           ;teclat.c: 106:                 LATBbits.LATB2=1;
  2855   001242  848A               	bsf	138,2,c	;volatile
  2856                           
  2857                           ;teclat.c: 107:                 LATBbits.LATB4=1;
  2858   001244  888A               	bsf	138,4,c	;volatile
  2859                           
  2860                           ;teclat.c: 108:                 LATBbits.LATB6=0;
  2861   001246  9C8A               	bcf	138,6,c	;volatile
  2862                           
  2863                           ;teclat.c: 110:     columna = 1;
  2864   001248  0E01               	movlw	1
  2865   00124A  6E45               	movwf	_columna^0,c
  2866                           
  2867                           ;teclat.c: 111:                 break;
  2868   00124C  0C01               	retlw	1
  2869   00124E                     l5514:
  2870   00124E  EC69  F000         	call	_HiHaTecla	;wreg free
  2871   001252  0900               	iorlw	0
  2872   001254  E108               	bnz	l5524
  2873   001256  0445               	decf	_columna^0,w,c
  2874   001258  E106               	bnz	l5524
  2875                           
  2876                           ;teclat.c: 114:                 LATBbits.LATB2=0;
  2877   00125A  948A               	bcf	138,2,c	;volatile
  2878                           
  2879                           ;teclat.c: 115:                 LATBbits.LATB4=1;
  2880   00125C  888A               	bsf	138,4,c	;volatile
  2881                           
  2882                           ;teclat.c: 116:                 LATBbits.LATB6=1;
  2883   00125E  8C8A               	bsf	138,6,c	;volatile
  2884                           
  2885                           ;teclat.c: 118:     columna = 2;
  2886   001260  0E02               	movlw	2
  2887   001262  6E45               	movwf	_columna^0,c
  2888                           
  2889                           ;teclat.c: 119:                 break;
  2890   001264  0C02               	retlw	2
  2891   001266                     l5524:
  2892   001266  EC69  F000         	call	_HiHaTecla	;wreg free
  2893   00126A  0900               	iorlw	0
  2894   00126C  E108               	bnz	l5532
  2895   00126E  0E02               	movlw	2
  2896   001270  1845               	xorwf	_columna^0,w,c
  2897   001272  E105               	bnz	l5532
  2898                           
  2899                           ;teclat.c: 122:                 LATBbits.LATB2=1;
  2900   001274  848A               	bsf	138,2,c	;volatile
  2901                           
  2902                           ;teclat.c: 123:                 LATBbits.LATB4=0;
  2903   001276  988A               	bcf	138,4,c	;volatile
  2904                           
  2905                           ;teclat.c: 124:                 LATBbits.LATB6=1;
  2906   001278  8C8A               	bsf	138,6,c	;volatile
  2907                           
  2908                           ;teclat.c: 126:     columna = 0;
  2909   00127A  6A45               	clrf	_columna^0,c
  2910                           
  2911                           ;teclat.c: 127:                 break;
  2912   00127C  0012               	return	
  2913   00127E                     l5532:
  2914   00127E  EC69  F000         	call	_HiHaTecla	;wreg free
  2915   001282  0900               	iorlw	0
  2916   001284  B4D8               	btfsc	status,2,c
  2917   001286  0012               	return	
  2918                           
  2919                           ;teclat.c: 130:                 LATAbits.LATA3 = 1;
  2920   001288  8689               	bsf	137,3,c	;volatile
  2921                           
  2922                           ;teclat.c: 131:                 TI_ResetTics(timer);
  2923   00128A  5057               	movf	_timer^0,w,c
  2924   00128C  EC1B  F000         	call	_TI_ResetTics
  2925   001290                     l5538:
  2926                           
  2927                           ;teclat.c: 132:     state++;
  2928   001290  2A46               	incf	_state^0,f,c
  2929                           
  2930                           ;teclat.c: 134:             break;
  2931   001292  0012               	return	
  2932   001294                     l5540:
  2933                           
  2934                           ;teclat.c: 136:    if (TI_GetTics(timer)>=500) {
  2935   001294  5057               	movf	_timer^0,w,c
  2936   001296  ECC1  F00E         	call	_TI_GetTics
  2937   00129A  505C               	movf	(?_TI_GetTics+3)^0,w,c
  2938   00129C  105B               	iorwf	(?_TI_GetTics+2)^0,w,c
  2939   00129E  E1F8               	bnz	l5538
  2940   0012A0  0EF4               	movlw	244
  2941   0012A2  5C59               	subwf	?_TI_GetTics^0,w,c
  2942   0012A4  0E01               	movlw	1
  2943   0012A6  585A               	subwfb	(?_TI_GetTics+1)^0,w,c
  2944   0012A8  E2F3               	bc	l5538
  2945   0012AA  0012               	return	
  2946   0012AC                     l5544:
  2947                           
  2948                           ;teclat.c: 141:    if (!HiHaTecla()) {
  2949   0012AC  EC69  F000         	call	_HiHaTecla	;wreg free
  2950   0012B0  0900               	iorlw	0
  2951   0012B2  E102               	bnz	l5548
  2952                           
  2953                           ;teclat.c: 142:     state = 0;
  2954   0012B4  6A46               	clrf	_state^0,c
  2955                           
  2956                           ;teclat.c: 143:    }
  2957   0012B6  0012               	return	
  2958   0012B8                     l5548:
  2959   0012B8  EC69  F000         	call	_HiHaTecla	;wreg free
  2960   0012BC  0900               	iorlw	0
  2961   0012BE  B4D8               	btfsc	status,2,c
  2962   0012C0  0012               	return	
  2963                           
  2964                           ;teclat.c: 145:                 teclapremuda=1;
  2965   0012C2  0E01               	movlw	1
  2966   0012C4  6E44               	movwf	_teclapremuda^0,c
  2967                           
  2968                           ;teclat.c: 146:                 SorollAlt(GetTecla());
  2969   0012C6  EC33  F00F         	call	_GetTecla	;wreg free
  2970   0012CA  ECDA  F00C         	call	_SorollAlt
  2971   0012CE  D7E0               	goto	l5538
  2972   0012D0                     l5556:
  2973                           
  2974                           ;teclat.c: 154:    if (!HiHaTecla()) {
  2975   0012D0  EC69  F000         	call	_HiHaTecla	;wreg free
  2976   0012D4  0900               	iorlw	0
  2977   0012D6  A4D8               	btfss	status,2,c
  2978   0012D8  0012               	return	
  2979                           
  2980                           ;teclat.c: 155:     TI_ResetTics(timer);
  2981   0012DA  5057               	movf	_timer^0,w,c
  2982   0012DC  EC1B  F000         	call	_TI_ResetTics
  2983                           
  2984                           ;teclat.c: 156:                 fiSoroll();
  2985   0012E0  ECCE  F000         	call	_fiSoroll	;wreg free
  2986                           
  2987                           ;teclat.c: 157:                 teclapremuda=0;
  2988   0012E4  6A44               	clrf	_teclapremuda^0,c
  2989   0012E6  D7D4               	goto	l5538
  2990   0012E8                     l5566:
  2991                           
  2992                           ;teclat.c: 162:    if (TI_GetTics(timer)>=500) {
  2993   0012E8  5057               	movf	_timer^0,w,c
  2994   0012EA  ECC1  F00E         	call	_TI_GetTics
  2995   0012EE  D7D5               	goto	L3
  2996   0012F0                     l5570:
  2997                           
  2998                           ;teclat.c: 167:    if (!HiHaTecla()) {
  2999   0012F0  EC69  F000         	call	_HiHaTecla	;wreg free
  3000   0012F4  0900               	iorlw	0
  3001   0012F6  A4D8               	btfss	status,2,c
  3002   0012F8  0012               	return	
  3003                           
  3004                           ;teclat.c: 170:                 LATAbits.LATA3=0;
  3005   0012FA  9689               	bcf	137,3,c	;volatile
  3006                           
  3007                           ;teclat.c: 172:     state = 0;
  3008   0012FC  6A46               	clrf	_state^0,c
  3009   0012FE  0012               	return	
  3010   001300                     l5576:
  3011   001300  5046               	movf	_state^0,w,c
  3012                           
  3013                           ; Switch size 1, requested type "space"
  3014                           ; Number of cases is 6, Range of values is 0 to 5
  3015                           ; switch strategies available:
  3016                           ; Name         Instructions Cycles
  3017                           ; simple_byte           19    10 (average)
  3018                           ;	Chosen strategy is simple_byte
  3019   001302  E099               	bz	l5504
  3020   001304  0A01               	xorlw	1	; case 1
  3021   001306  E0C6               	bz	l5540
  3022   001308  0A03               	xorlw	3	; case 2
  3023   00130A  E0D0               	bz	l5544
  3024   00130C  0A01               	xorlw	1	; case 3
  3025   00130E  E0E0               	bz	l5556
  3026   001310  0A07               	xorlw	7	; case 4
  3027   001312  E0EA               	bz	l5566
  3028   001314  0A01               	xorlw	1	; case 5
  3029   001316  E0EC               	bz	l5570
  3030   001318  0012               	return		;funcret
  3031   00131A                     __end_of_MotorKeyboard:
  3032                           	callstack 0
  3033                           
  3034 ;; *************** function _MotorEQM *****************
  3035 ;; Defined at:
  3036 ;;		line 753 in file "EQM.c"
  3037 ;; Parameters:    Size  Location     Type
  3038 ;;		None
  3039 ;; Auto vars:     Size  Location     Type
  3040 ;;		None
  3041 ;; Return value:  Size  Location     Type
  3042 ;;                  1    wreg      void 
  3043 ;; Registers used:
  3044 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3045 ;; Tracked objects:
  3046 ;;		On entry : 0/0
  3047 ;;		On exit  : 0/0
  3048 ;;		Unchanged: 0/0
  3049 ;; Data sizes:     COMRAM   BANK0   BANK1
  3050 ;;      Params:         0       0       0
  3051 ;;      Locals:         0       0       0
  3052 ;;      Temps:          0       0       0
  3053 ;;      Totals:         0       0       0
  3054 ;;Total ram usage:        0 bytes
  3055 ;; Hardware stack levels used: 1
  3056 ;; Hardware stack levels required when called: 9
  3057 ;; This function calls:
  3058 ;;		_CloseConn
  3059 ;;		_ConfWIFI
  3060 ;;		_EnterChatMode
  3061 ;;		_ListAccesPoints
  3062 ;;		_ListLastMessages
  3063 ;;		_OpcioMenu
  3064 ;;		_ReciveMSG
  3065 ;;		_ShowConnStatus
  3066 ;;		_StateMenu
  3067 ;;		_startMenu
  3068 ;; This function is called by:
  3069 ;;		_main
  3070 ;; This function uses a non-reentrant model
  3071 ;;
  3072                           
  3073                           	psect	text16
  3074   00131A                     __ptext16:
  3075                           	callstack 0
  3076   00131A                     _MotorEQM:
  3077                           	callstack 21
  3078                           
  3079                           ;EQM.c: 754:     static unsigned char state = 0;;EQM.c: 756:     if (start==1){
  3080                           
  3081                           ;incstack = 0
  3082   00131A  0430               	decf	_start@EQM$F1359^0,w,c
  3083   00131C  E05A               	bz	l5704
  3084   00131E  EFBE  F004         	goto	_ReciveMSG
  3085   001322                     l5624:
  3086                           
  3087                           ;EQM.c: 759:    if (start == 1) {
  3088   001322  0430               	decf	_start@EQM$F1359^0,w,c
  3089   001324  A4D8               	btfss	status,2,c
  3090   001326  0012               	return	
  3091                           
  3092                           ;EQM.c: 760:                 maxMSG = 0;
  3093   001328  6A29               	clrf	_maxMSG^0,c
  3094                           
  3095                           ;EQM.c: 761:                 lastMSG = 7;
  3096   00132A  0E07               	movlw	7
  3097   00132C  6E77               	movwf	_lastMSG^0,c
  3098                           
  3099                           ;EQM.c: 762:                 Opt3 = 0;
  3100                           
  3101                           ;EQM.c: 763:                 Opt4 = 0;
  3102                           
  3103                           ;EQM.c: 764:                 INTENTS=0;
  3104                           
  3105                           ;EQM.c: 765:                 port[4]=',';
  3106                           
  3107                           ; BSR set to: 0
  3108                           ;EQM.c: 766:                 port[9]='\0';
  3109   00132E  D858               	call	PL42	;call to abstracted procedure
  3110   001330                     l5638:
  3111                           
  3112                           ;EQM.c: 767:                 state++;
  3113   001330  2A1C               	incf	MotorEQM@state^0,f,c
  3114   001332  0012               	return	
  3115   001334                     l5640:
  3116                           
  3117                           ;EQM.c: 771:             if (ConfWIFI()==1){
  3118   001334  EC57  F001         	call	_ConfWIFI	;wreg free
  3119   001338  06E8               	decf	wreg,f,c
  3120   00133A  A4D8               	btfss	status,2,c
  3121   00133C  0012               	return	
  3122                           
  3123                           ;EQM.c: 772:                 if(wifiSTATE==1){
  3124   00133E  0421               	decf	_wifiSTATE^0,w,c
  3125   001340  E104               	bnz	l5650
  3126                           
  3127                           ;EQM.c: 773:                     startMenu();
  3128   001342  ECBF  F000         	call	_startMenu	;wreg free
  3129                           
  3130                           ;EQM.c: 774:                     state_option=0;
  3131   001346  6A2B               	clrf	_state_option^0,c
  3132   001348  D7F3               	goto	l5638
  3133   00134A                     l5650:
  3134                           
  3135                           ;EQM.c: 777:                     state--;
  3136   00134A  061C               	decf	MotorEQM@state^0,f,c
  3137   00134C  0012               	return	
  3138   00134E                     l5652:
  3139                           
  3140                           ;EQM.c: 782:             if (StateMenu() == 0){
  3141   00134E  ECD0  F000         	call	_StateMenu	;wreg free
  3142   001352  0900               	iorlw	0
  3143   001354  A4D8               	btfss	status,2,c
  3144   001356  0012               	return	
  3145                           
  3146                           ;EQM.c: 783:                 if(OpcioMenu()== 0) {
  3147   001358  ECD2  F000         	call	_OpcioMenu	;wreg free
  3148   00135C  0900               	iorlw	0
  3149   00135E  E108               	bnz	l5662
  3150                           
  3151                           ;EQM.c: 784:                     if(ListAccesPoints()== 1) {
  3152   001360  ECE9  F00E         	call	_ListAccesPoints	;wreg free
  3153   001364  06E8               	decf	wreg,f,c
  3154   001366  A4D8               	btfss	status,2,c
  3155   001368  0012               	return	
  3156   00136A                     u5100:
  3157                           
  3158                           ;EQM.c: 785:                         state_option=0;
  3159   00136A  6A2B               	clrf	_state_option^0,c
  3160                           
  3161                           ;EQM.c: 786:                         startMenu();
  3162   00136C  EFBF  F000         	goto	_startMenu	;wreg free
  3163   001370                     l5662:
  3164                           
  3165                           ;EQM.c: 790:                 if(OpcioMenu()== 1) {
  3166   001370  ECD2  F000         	call	_OpcioMenu	;wreg free
  3167   001374  06E8               	decf	wreg,f,c
  3168   001376  E105               	bnz	l5670
  3169                           
  3170                           ;EQM.c: 791:                     if(ShowConnStatus()== 1) {
  3171   001378  EC67  F00E         	call	_ShowConnStatus	;wreg free
  3172   00137C                     L4:
  3173   00137C  06E8               	decf	wreg,f,c
  3174   00137E  E0F5               	bz	u5100
  3175   001380  0012               	return	
  3176   001382                     l5670:
  3177                           
  3178                           ;EQM.c: 798:                 if(OpcioMenu()== 2) {
  3179   001382  ECD2  F000         	call	_OpcioMenu	;wreg free
  3180   001386  0A02               	xorlw	2
  3181   001388  E109               	bnz	l5680
  3182                           
  3183                           ;EQM.c: 799:                     Opt3 = 1;
  3184   00138A  0E01               	movlw	1
  3185   00138C  6E28               	movwf	_Opt3^0,c
  3186                           
  3187                           ;EQM.c: 800:                     if(ConfWIFI()== 1) {
  3188   00138E  EC57  F001         	call	_ConfWIFI	;wreg free
  3189   001392  06E8               	decf	wreg,f,c
  3190   001394  A4D8               	btfss	status,2,c
  3191   001396  0012               	return	
  3192                           
  3193                           ;EQM.c: 801:                         Opt3 = 0;
  3194   001398  6A28               	clrf	_Opt3^0,c
  3195   00139A  D7E7               	goto	u5100
  3196   00139C                     l5680:
  3197                           
  3198                           ;EQM.c: 808:                 if(OpcioMenu()== 3) {
  3199   00139C  ECD2  F000         	call	_OpcioMenu	;wreg free
  3200   0013A0  0A03               	xorlw	3
  3201   0013A2  E103               	bnz	l5688
  3202                           
  3203                           ;EQM.c: 809:                     if(EnterChatMode()==1) {
  3204   0013A4  ECBA  F003         	call	_EnterChatMode	;wreg free
  3205   0013A8  D7E9               	goto	L4
  3206   0013AA                     l5688:
  3207                           
  3208                           ;EQM.c: 816:                 if(OpcioMenu()== 4) {
  3209   0013AA  ECD2  F000         	call	_OpcioMenu	;wreg free
  3210   0013AE  0A04               	xorlw	4
  3211   0013B0  E103               	bnz	l5696
  3212                           
  3213                           ;EQM.c: 817:                     if(ListLastMessages()== 1) {
  3214   0013B2  EC95  F002         	call	_ListLastMessages	;wreg free
  3215   0013B6  D7E2               	goto	L4
  3216   0013B8                     l5696:
  3217                           
  3218                           ;EQM.c: 824:                 if(OpcioMenu()== 5) {
  3219   0013B8  ECD2  F000         	call	_OpcioMenu	;wreg free
  3220   0013BC  0A05               	xorlw	5
  3221   0013BE  A4D8               	btfss	status,2,c
  3222   0013C0  0012               	return	
  3223                           
  3224                           ;EQM.c: 825:                     if (CloseConn() == 1) {
  3225   0013C2  EC18  F00D         	call	_CloseConn	;wreg free
  3226   0013C6  06E8               	decf	wreg,f,c
  3227   0013C8  A4D8               	btfss	status,2,c
  3228   0013CA  0012               	return	
  3229                           
  3230                           ;EQM.c: 826:                         state_option=0;
  3231   0013CC  6A2B               	clrf	_state_option^0,c
  3232                           
  3233                           ;EQM.c: 827:                         state=0;
  3234   0013CE  6A1C               	clrf	MotorEQM@state^0,c
  3235   0013D0  0012               	return	
  3236   0013D2                     l5704:
  3237   0013D2  501C               	movf	MotorEQM@state^0,w,c
  3238                           
  3239                           ; Switch size 1, requested type "space"
  3240                           ; Number of cases is 3, Range of values is 0 to 2
  3241                           ; switch strategies available:
  3242                           ; Name         Instructions Cycles
  3243                           ; simple_byte           10     6 (average)
  3244                           ;	Chosen strategy is simple_byte
  3245   0013D4  E0A6               	bz	l5624
  3246   0013D6  0A01               	xorlw	1	; case 1
  3247   0013D8  E0AD               	bz	l5640
  3248   0013DA  0A03               	xorlw	3	; case 2
  3249   0013DC  E0B8               	bz	l5652
  3250                           
  3251                           ;EQM.c: 835:     }else{
  3252   0013DE  0012               	return	
  3253   0013E0                     __end_of_MotorEQM:
  3254                           	callstack 0
  3255   0013E0                     PL42:
  3256                           	callstack 27
  3257   0013E0  6A28               	clrf	_Opt3^0,c
  3258   0013E2  6A27               	clrf	_Opt4^0,c
  3259   0013E4  6A2C               	clrf	_INTENTS^0,c
  3260   0013E6  0E2C               	movlw	44
  3261   0013E8  0100               	movlb	0	; () banked
  3262   0013EA  6FCA               	movwf	(_port+4)& (0+255),b
  3263   0013EC  6BCF               	clrf	(_port+9)& (0+255),b
  3264   0013EE  0012               	return	
  3265   0013F0                     __end_ofPL42:
  3266                           	callstack 0
  3267                           
  3268 ;; *************** function _ReciveMSG *****************
  3269 ;; Defined at:
  3270 ;;		line 625 in file "EQM.c"
  3271 ;; Parameters:    Size  Location     Type
  3272 ;;		None
  3273 ;; Auto vars:     Size  Location     Type
  3274 ;;		None
  3275 ;; Return value:  Size  Location     Type
  3276 ;;                  1    wreg      void 
  3277 ;; Registers used:
  3278 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  3279 ;; Tracked objects:
  3280 ;;		On entry : 0/0
  3281 ;;		On exit  : 0/0
  3282 ;;		Unchanged: 0/0
  3283 ;; Data sizes:     COMRAM   BANK0   BANK1
  3284 ;;      Params:         0       0       0
  3285 ;;      Locals:         0       0       0
  3286 ;;      Temps:          3       0       0
  3287 ;;      Totals:         3       0       0
  3288 ;;Total ram usage:        3 bytes
  3289 ;; Hardware stack levels used: 1
  3290 ;; Hardware stack levels required when called: 6
  3291 ;; This function calls:
  3292 ;;		_GetFlag
  3293 ;;		_GetRxMSG
  3294 ;;		_LcClear
  3295 ;;		_LcGotoXY
  3296 ;;		_LcPutChar
  3297 ;;		_SIO_PutChar
  3298 ;;		_SorollAlt
  3299 ;;		_StateMenu
  3300 ;;		_TI_GetTics
  3301 ;;		_TI_ResetTics
  3302 ;;		_fiSoroll
  3303 ;;		_startMenu
  3304 ;;		_stopMenu
  3305 ;; This function is called by:
  3306 ;;		_MotorEQM
  3307 ;; This function uses a non-reentrant model
  3308 ;;
  3309                           
  3310                           	psect	text17
  3311   00097C                     __ptext17:
  3312                           	callstack 0
  3313   00097C                     _ReciveMSG:
  3314                           	callstack 23
  3315                           
  3316                           ;EQM.c: 626:     static unsigned char stateMSG = 0;;EQM.c: 627:         switch(stateMSG)
      +                           {
  3317                           
  3318                           ;incstack = 0
  3319   00097C  D0C8               	goto	l5370
  3320   00097E                     l5230:
  3321                           
  3322                           ;EQM.c: 629:                 if(StateMenu()==1){
  3323   00097E  ECD0  F000         	call	_StateMenu	;wreg free
  3324   000982  06E8               	decf	wreg,f,c
  3325   000984  E105               	bnz	l901
  3326                           
  3327                           ;EQM.c: 630:                     stopMenu();
  3328   000986  ECCC  F000         	call	_stopMenu	;wreg free
  3329                           
  3330                           ;EQM.c: 631:                     resetMENU=1;
  3331   00098A  0E01               	movlw	1
  3332   00098C  6E1F               	movwf	_resetMENU^0,c
  3333                           
  3334                           ;EQM.c: 632:                 }else{
  3335   00098E  D001               	goto	l5236
  3336   000990                     l901:
  3337                           
  3338                           ;EQM.c: 633:                     resetMENU=0;
  3339   000990  6A1F               	clrf	_resetMENU^0,c
  3340   000992                     l5236:
  3341                           
  3342                           ;EQM.c: 635:                 stateMSG++;
  3343   000992  2A1D               	incf	ReciveMSG@stateMSG^0,f,c
  3344                           
  3345                           ;EQM.c: 636:                 break;
  3346   000994  0012               	return	
  3347   000996                     l5238:
  3348                           
  3349                           ;EQM.c: 638:                 if (GetFlag()==1) {
  3350   000996  ECE0  F000         	call	_GetFlag	;wreg free
  3351   00099A  06E8               	decf	wreg,f,c
  3352   00099C  A4D8               	btfss	status,2,c
  3353   00099E  0012               	return	
  3354                           
  3355                           ;EQM.c: 639:                     msg=GetRxMSG();
  3356   0009A0  ECC5  F000         	call	_GetRxMSG	;wreg free
  3357   0009A4  6E2E               	movwf	_msg^0,c
  3358                           
  3359                           ;EQM.c: 641:                     if (msg==':'){
  3360   0009A6  0E3A               	movlw	58
  3361   0009A8  182E               	xorwf	_msg^0,w,c
  3362   0009AA  A4D8               	btfss	status,2,c
  3363   0009AC  0012               	return	
  3364                           
  3365                           ;EQM.c: 642:                         stateMSG++;
  3366   0009AE  2A1D               	incf	ReciveMSG@stateMSG^0,f,c
  3367                           
  3368                           ;EQM.c: 643:                         index=0;
  3369   0009B0  6A2F               	clrf	_index@EQM$F1361^0,c
  3370   0009B2  0012               	return	
  3371   0009B4                     l5248:
  3372                           
  3373                           ;EQM.c: 648:                 if (GetFlag()==1 ) {
  3374   0009B4  ECE0  F000         	call	_GetFlag	;wreg free
  3375   0009B8  06E8               	decf	wreg,f,c
  3376   0009BA  A4D8               	btfss	status,2,c
  3377   0009BC  0012               	return	
  3378                           
  3379                           ;EQM.c: 649:                     msg=GetRxMSG();
  3380   0009BE  ECC5  F000         	call	_GetRxMSG	;wreg free
  3381   0009C2  6E2E               	movwf	_msg^0,c
  3382                           
  3383                           ;EQM.c: 651:                     if(msg=='\r'){
  3384   0009C4  0E0D               	movlw	13
  3385   0009C6  182E               	xorwf	_msg^0,w,c
  3386   0009C8  E10A               	bnz	l5262
  3387                           
  3388                           ;EQM.c: 652:                         if(index!=13){
  3389   0009CA  0E0D               	movlw	13
  3390   0009CC  182F               	xorwf	_index@EQM$F1361^0,w,c
  3391   0009CE  E003               	bz	l5258
  3392                           
  3393                           ;EQM.c: 653:                             msgs[lastMSG][index] = '*';
  3394   0009D0  D8BB               	call	PL6	;call to abstracted procedure
  3395   0009D2  0E2A               	movlw	42
  3396   0009D4  6EDF               	movwf	indf2,c
  3397   0009D6                     l5258:
  3398                           
  3399                           ;EQM.c: 656:                         SIO_PutChar('-');
  3400   0009D6  0E2D               	movlw	45
  3401   0009D8  ECB5  F000         	call	_SIO_PutChar
  3402   0009DC  D7DA               	goto	l5236
  3403   0009DE                     l5262:
  3404                           
  3405                           ;EQM.c: 659:                         msgs[lastMSG][index] = msg;
  3406   0009DE  D8B4               	call	PL6	;call to abstracted procedure
  3407   0009E0  C02E  FFDF         	movff	_msg,indf2
  3408                           
  3409                           ;EQM.c: 660:                         index++;
  3410   0009E4  2A2F               	incf	_index@EQM$F1361^0,f,c
  3411   0009E6  0012               	return	
  3412   0009E8                     l5266:
  3413                           
  3414                           ;EQM.c: 665:                 LcClear();
  3415   0009E8  EC74  F000         	call	_LcClear	;wreg free
  3416                           
  3417                           ;EQM.c: 666:                 LcGotoXY(0,1);
  3418   0009EC  0E01               	movlw	1
  3419   0009EE  6E67               	movwf	LcGotoXY@Row^0,c
  3420   0009F0  0E00               	movlw	0
  3421   0009F2  ECD0  F00B         	call	_LcGotoXY
  3422                           
  3423                           ;EQM.c: 667:                 index=0;
  3424   0009F6  6A2F               	clrf	_index@EQM$F1361^0,c
  3425   0009F8  D7CC               	goto	l5236
  3426   0009FA                     l5272:
  3427                           
  3428                           ;EQM.c: 673:                 if(index < 14 ){
  3429   0009FA  0E0E               	movlw	14
  3430   0009FC  602F               	cpfslt	_index@EQM$F1361^0,c
  3431   0009FE  D00D               	goto	l5282
  3432                           
  3433                           ;EQM.c: 674:                     if(msgs[lastMSG][index] != '*'){
  3434   000A00  D8A3               	call	PL6	;call to abstracted procedure
  3435   000A02  0E2A               	movlw	42
  3436   000A04  18DE               	xorwf	postinc2,w,c
  3437   000A06  E006               	bz	l5280
  3438                           
  3439                           ;EQM.c: 676:                         LcPutChar(msgs[lastMSG][index]);
  3440   000A08  D89F               	call	PL6	;call to abstracted procedure
  3441   000A0A  50DF               	movf	indf2,w,c
  3442   000A0C  EC97  F00E         	call	_LcPutChar
  3443                           
  3444                           ;EQM.c: 677:                         index++;
  3445   000A10  2A2F               	incf	_index@EQM$F1361^0,f,c
  3446                           
  3447                           ;EQM.c: 678:                     }else {
  3448   000A12  D009               	goto	l5288
  3449   000A14                     l5280:
  3450                           
  3451                           ;EQM.c: 679:                         index=20;
  3452   000A14  0E14               	movlw	20
  3453   000A16  6E2F               	movwf	_index@EQM$F1361^0,c
  3454   000A18  D006               	goto	l5288
  3455   000A1A                     l5282:
  3456                           
  3457                           ;EQM.c: 683:                     SorollAlt(4);
  3458   000A1A  0E04               	movlw	4
  3459   000A1C  ECDA  F00C         	call	_SorollAlt
  3460                           
  3461                           ;EQM.c: 684:                     comptSEC=0;
  3462   000A20  6A1E               	clrf	_comptSEC^0,c
  3463                           
  3464                           ;EQM.c: 685:                     stateMSG=5;
  3465   000A22  0E05               	movlw	5
  3466   000A24  6E1D               	movwf	ReciveMSG@stateMSG^0,c
  3467   000A26                     l5288:
  3468                           
  3469                           ;EQM.c: 687:                 TI_ResetTics(timer);
  3470   000A26  5052               	movf	_timer@EQM$F1360^0,w,c
  3471   000A28  EF1B  F000         	goto	_TI_ResetTics
  3472   000A2C                     l5290:
  3473                           
  3474                           ;EQM.c: 690:                 if (TI_GetTics(timer) > 10000){
  3475   000A2C  5052               	movf	_timer@EQM$F1360^0,w,c
  3476   000A2E  ECC1  F00E         	call	_TI_GetTics
  3477   000A32  505C               	movf	(?_TI_GetTics+3)^0,w,c
  3478   000A34  105B               	iorwf	(?_TI_GetTics+2)^0,w,c
  3479   000A36  E103               	bnz	u4650
  3480   000A38  D896               	call	PL32	;call to abstracted procedure
  3481   000A3A  A0D8               	btfss	status,0,c
  3482   000A3C  0012               	return	
  3483   000A3E                     u4650:
  3484                           
  3485                           ;EQM.c: 691:                         SorollAlt(5);
  3486   000A3E  0E05               	movlw	5
  3487   000A40  ECDA  F00C         	call	_SorollAlt
  3488                           
  3489                           ;EQM.c: 692:                         comptSEC=0;
  3490   000A44  6A1E               	clrf	_comptSEC^0,c
  3491                           
  3492                           ;EQM.c: 693:                         TI_ResetTics(timer);
  3493   000A46  5052               	movf	_timer@EQM$F1360^0,w,c
  3494   000A48  EC1B  F000         	call	_TI_ResetTics
  3495   000A4C  D7A2               	goto	l5236
  3496   000A4E                     l5300:
  3497                           
  3498                           ;EQM.c: 698:                if (TI_GetTics(timer) > 10000){
  3499   000A4E  5052               	movf	_timer@EQM$F1360^0,w,c
  3500   000A50  ECC1  F00E         	call	_TI_GetTics
  3501   000A54  505C               	movf	(?_TI_GetTics+3)^0,w,c
  3502   000A56  105B               	iorwf	(?_TI_GetTics+2)^0,w,c
  3503   000A58  E103               	bnz	u4660
  3504   000A5A  D885               	call	PL32	;call to abstracted procedure
  3505   000A5C  A0D8               	btfss	status,0,c
  3506   000A5E  0012               	return	
  3507   000A60                     u4660:
  3508                           
  3509                           ;EQM.c: 699:                         SorollAlt(6);
  3510   000A60  0E06               	movlw	6
  3511   000A62  ECDA  F00C         	call	_SorollAlt
  3512                           
  3513                           ;EQM.c: 700:                         comptSEC=0;
  3514   000A66  6A1E               	clrf	_comptSEC^0,c
  3515                           
  3516                           ;EQM.c: 701:                         TI_ResetTics(timer);
  3517   000A68  5052               	movf	_timer@EQM$F1360^0,w,c
  3518   000A6A  EC1B  F000         	call	_TI_ResetTics
  3519   000A6E  D791               	goto	l5236
  3520   000A70                     l5310:
  3521                           
  3522                           ;EQM.c: 705:                if (TI_GetTics(timer) > 10000){
  3523   000A70  5052               	movf	_timer@EQM$F1360^0,w,c
  3524   000A72  ECC1  F00E         	call	_TI_GetTics
  3525   000A76  505C               	movf	(?_TI_GetTics+3)^0,w,c
  3526   000A78  105B               	iorwf	(?_TI_GetTics+2)^0,w,c
  3527   000A7A  E103               	bnz	u4670
  3528   000A7C  D874               	call	PL32	;call to abstracted procedure
  3529   000A7E  A0D8               	btfss	status,0,c
  3530   000A80  0012               	return	
  3531   000A82                     u4670:
  3532                           
  3533                           ;EQM.c: 706:                         SorollAlt(7);
  3534   000A82  0E07               	movlw	7
  3535   000A84  ECDA  F00C         	call	_SorollAlt
  3536                           
  3537                           ;EQM.c: 707:                         comptSEC=0;
  3538   000A88  6A1E               	clrf	_comptSEC^0,c
  3539                           
  3540                           ;EQM.c: 708:                         TI_ResetTics(timer);
  3541   000A8A  5052               	movf	_timer@EQM$F1360^0,w,c
  3542   000A8C  EC1B  F000         	call	_TI_ResetTics
  3543   000A90  D780               	goto	l5236
  3544   000A92                     l5320:
  3545                           
  3546                           ;EQM.c: 712:                if (TI_GetTics(timer) > 10000){
  3547   000A92  5052               	movf	_timer@EQM$F1360^0,w,c
  3548   000A94  ECC1  F00E         	call	_TI_GetTics
  3549   000A98  505C               	movf	(?_TI_GetTics+3)^0,w,c
  3550   000A9A  105B               	iorwf	(?_TI_GetTics+2)^0,w,c
  3551   000A9C  E103               	bnz	u4680
  3552   000A9E  D863               	call	PL32	;call to abstracted procedure
  3553   000AA0  A0D8               	btfss	status,0,c
  3554   000AA2  0012               	return	
  3555   000AA4                     u4680:
  3556                           
  3557                           ;EQM.c: 713:                         SorollAlt(8);
  3558   000AA4  0E08               	movlw	8
  3559   000AA6  ECDA  F00C         	call	_SorollAlt
  3560                           
  3561                           ;EQM.c: 714:                         comptSEC=0;
  3562   000AAA  6A1E               	clrf	_comptSEC^0,c
  3563                           
  3564                           ;EQM.c: 715:                         TI_ResetTics(timer);
  3565   000AAC  5052               	movf	_timer@EQM$F1360^0,w,c
  3566   000AAE  EC1B  F000         	call	_TI_ResetTics
  3567   000AB2  D76F               	goto	l5236
  3568   000AB4                     l5330:
  3569                           
  3570                           ;EQM.c: 720:                 if (TI_GetTics(timer) > 10000){
  3571   000AB4  5052               	movf	_timer@EQM$F1360^0,w,c
  3572   000AB6  ECC1  F00E         	call	_TI_GetTics
  3573   000ABA  505C               	movf	(?_TI_GetTics+3)^0,w,c
  3574   000ABC  105B               	iorwf	(?_TI_GetTics+2)^0,w,c
  3575   000ABE  E103               	bnz	u4690
  3576   000AC0  D852               	call	PL32	;call to abstracted procedure
  3577   000AC2  A0D8               	btfss	status,0,c
  3578   000AC4  0012               	return	
  3579   000AC6                     u4690:
  3580                           
  3581                           ;EQM.c: 721:                         fiSoroll();
  3582   000AC6  ECCE  F000         	call	_fiSoroll	;wreg free
  3583                           
  3584                           ;EQM.c: 722:                         comptSEC=0;
  3585   000ACA  6A1E               	clrf	_comptSEC^0,c
  3586                           
  3587                           ;EQM.c: 723:                         TI_ResetTics(timer);
  3588   000ACC  5052               	movf	_timer@EQM$F1360^0,w,c
  3589   000ACE  EC1B  F000         	call	_TI_ResetTics
  3590   000AD2  D75F               	goto	l5236
  3591   000AD4                     l5340:
  3592                           
  3593                           ;EQM.c: 728:                 TI_ResetTics(timer);
  3594   000AD4  5052               	movf	_timer@EQM$F1360^0,w,c
  3595   000AD6  EC1B  F000         	call	_TI_ResetTics
  3596                           
  3597                           ;EQM.c: 729:                 if (lastMSG != 0){
  3598   000ADA  5077               	movf	_lastMSG^0,w,c
  3599   000ADC  E002               	bz	l5346
  3600                           
  3601                           ;EQM.c: 730:                     lastMSG--;
  3602   000ADE  0677               	decf	_lastMSG^0,f,c
  3603                           
  3604                           ;EQM.c: 731:                 }else{
  3605   000AE0  D002               	goto	l5348
  3606   000AE2                     l5346:
  3607                           
  3608                           ;EQM.c: 732:                     lastMSG=7;
  3609   000AE2  0E07               	movlw	7
  3610   000AE4  6E77               	movwf	_lastMSG^0,c
  3611   000AE6                     l5348:
  3612                           
  3613                           ;EQM.c: 734:                 if (maxMSG<8){
  3614   000AE6  0E08               	movlw	8
  3615   000AE8  6029               	cpfslt	_maxMSG^0,c
  3616   000AEA  D001               	goto	l5352
  3617                           
  3618                           ;EQM.c: 735:                     maxMSG++;
  3619   000AEC  2A29               	incf	_maxMSG^0,f,c
  3620   000AEE                     l5352:
  3621                           
  3622                           ;EQM.c: 737:                 start=1;
  3623   000AEE  0E01               	movlw	1
  3624   000AF0  6E30               	movwf	_start@EQM$F1359^0,c
  3625                           
  3626                           ;EQM.c: 738:                 stateMSG=0;
  3627   000AF2  6A1D               	clrf	ReciveMSG@stateMSG^0,c
  3628                           
  3629                           ;EQM.c: 740:                 LcClear();
  3630   000AF4  EC74  F000         	call	_LcClear	;wreg free
  3631                           
  3632                           ;EQM.c: 741:                 LcGotoXY(0,0);
  3633   000AF8  0E00               	movlw	0
  3634   000AFA  6A67               	clrf	LcGotoXY@Row^0,c
  3635   000AFC  ECD0  F00B         	call	_LcGotoXY
  3636                           
  3637                           ;EQM.c: 742:                 state_option=0;
  3638   000B00  6A2B               	clrf	_state_option^0,c
  3639                           
  3640                           ;EQM.c: 743:                 state4=0;
  3641   000B02  6A2A               	clrf	_state4^0,c
  3642                           
  3643                           ;EQM.c: 744:                 if(resetMENU==1){
  3644   000B04  041F               	decf	_resetMENU^0,w,c
  3645   000B06  A4D8               	btfss	status,2,c
  3646   000B08  0012               	return	
  3647                           
  3648                           ;EQM.c: 745:                     startMenu();
  3649   000B0A  EFBF  F000         	goto	_startMenu	;wreg free
  3650   000B0E                     l5370:
  3651   000B0E  501D               	movf	ReciveMSG@stateMSG^0,w,c
  3652                           
  3653                           ; Switch size 1, requested type "space"
  3654                           ; Number of cases is 11, Range of values is 0 to 10
  3655                           ; switch strategies available:
  3656                           ; Name         Instructions Cycles
  3657                           ; simple_byte           34    18 (average)
  3658                           ;	Chosen strategy is simple_byte
  3659   000B10  E101 D735          	bz	l5230
  3660   000B14  0A01               	xorlw	1	; case 1
  3661   000B16  E101 D73E          	bz	l5238
  3662   000B1A  0A03               	xorlw	3	; case 2
  3663   000B1C  E101 D74A          	bz	l5248
  3664   000B20  0A01               	xorlw	1	; case 3
  3665   000B22  E101 D761          	bz	l5266
  3666   000B26  0A07               	xorlw	7	; case 4
  3667   000B28  E101 D767          	bz	l5272
  3668   000B2C  0A01               	xorlw	1	; case 5
  3669   000B2E  E101 D77D          	bz	l5290
  3670   000B32  0A03               	xorlw	3	; case 6
  3671   000B34  E08C               	bz	l5300
  3672   000B36  0A01               	xorlw	1	; case 7
  3673   000B38  E09B               	bz	l5310
  3674   000B3A  0A0F               	xorlw	15	; case 8
  3675   000B3C  E0AA               	bz	l5320
  3676   000B3E  0A01               	xorlw	1	; case 9
  3677   000B40  E0B9               	bz	l5330
  3678   000B42  0A03               	xorlw	3	; case 10
  3679   000B44  E0C7               	bz	l5340
  3680   000B46  0012               	return		;funcret
  3681   000B48                     __end_of_ReciveMSG:
  3682                           	callstack 0
  3683   000B48                     PL6:
  3684                           	callstack 23
  3685   000B48  5077               	movf	_lastMSG^0,w,c
  3686   000B4A  0D0E               	mullw	14
  3687   000B4C  0E7E               	movlw	low _msgs
  3688   000B4E  24F3               	addwf	243,w,c
  3689   000B50  6E70               	movwf	??_ReciveMSG^0,c
  3690   000B52  0E01               	movlw	high _msgs
  3691   000B54  20F4               	addwfc	prodh,w,c
  3692   000B56  6E71               	movwf	(??_ReciveMSG+1)^0,c
  3693   000B58  502F               	movf	_index@EQM$F1361^0,w,c
  3694   000B5A  2470               	addwf	??_ReciveMSG^0,w,c
  3695   000B5C  6ED9               	movwf	fsr2l,c
  3696   000B5E  0E00               	movlw	0
  3697   000B60  2071               	addwfc	(??_ReciveMSG+1)^0,w,c
  3698   000B62  6EDA               	movwf	fsr2h,c
  3699   000B64  0012               	return	
  3700   000B66                     __end_ofPL6:
  3701                           	callstack 0
  3702   000B66                     PL32:
  3703                           	callstack 23
  3704   000B66  0E11               	movlw	17
  3705   000B68  5C59               	subwf	?_TI_GetTics^0,w,c
  3706   000B6A  0E27               	movlw	39
  3707   000B6C  585A               	subwfb	(?_TI_GetTics+1)^0,w,c
  3708   000B6E  0012               	return	
  3709   000B70                     __end_ofPL32:
  3710                           	callstack 0
  3711                           
  3712 ;; *************** function _stopMenu *****************
  3713 ;; Defined at:
  3714 ;;		line 43 in file "menu.c"
  3715 ;; Parameters:    Size  Location     Type
  3716 ;;		None
  3717 ;; Auto vars:     Size  Location     Type
  3718 ;;		None
  3719 ;; Return value:  Size  Location     Type
  3720 ;;                  1    wreg      void 
  3721 ;; Registers used:
  3722 ;;		None
  3723 ;; Tracked objects:
  3724 ;;		On entry : 0/0
  3725 ;;		On exit  : 0/0
  3726 ;;		Unchanged: 0/0
  3727 ;; Data sizes:     COMRAM   BANK0   BANK1
  3728 ;;      Params:         0       0       0
  3729 ;;      Locals:         0       0       0
  3730 ;;      Temps:          0       0       0
  3731 ;;      Totals:         0       0       0
  3732 ;;Total ram usage:        0 bytes
  3733 ;; Hardware stack levels used: 1
  3734 ;; Hardware stack levels required when called: 2
  3735 ;; This function calls:
  3736 ;;		Nothing
  3737 ;; This function is called by:
  3738 ;;		_ReciveMSG
  3739 ;; This function uses a non-reentrant model
  3740 ;;
  3741                           
  3742                           	psect	text18
  3743   000198                     __ptext18:
  3744                           	callstack 0
  3745   000198                     _stopMenu:
  3746                           	callstack 26
  3747                           
  3748                           ;menu.c: 44:     start=0;
  3749                           
  3750                           ;incstack = 0
  3751   000198  6A17               	clrf	_start@menu$F1451^0,c
  3752   00019A  0012               	return		;funcret
  3753   00019C                     __end_of_stopMenu:
  3754                           	callstack 0
  3755                           
  3756 ;; *************** function _fiSoroll *****************
  3757 ;; Defined at:
  3758 ;;		line 38 in file "altaveu.c"
  3759 ;; Parameters:    Size  Location     Type
  3760 ;;		None
  3761 ;; Auto vars:     Size  Location     Type
  3762 ;;		None
  3763 ;; Return value:  Size  Location     Type
  3764 ;;                  1    wreg      void 
  3765 ;; Registers used:
  3766 ;;		None
  3767 ;; Tracked objects:
  3768 ;;		On entry : 0/0
  3769 ;;		On exit  : 0/0
  3770 ;;		Unchanged: 0/0
  3771 ;; Data sizes:     COMRAM   BANK0   BANK1
  3772 ;;      Params:         0       0       0
  3773 ;;      Locals:         0       0       0
  3774 ;;      Temps:          0       0       0
  3775 ;;      Totals:         0       0       0
  3776 ;;Total ram usage:        0 bytes
  3777 ;; Hardware stack levels used: 1
  3778 ;; Hardware stack levels required when called: 2
  3779 ;; This function calls:
  3780 ;;		Nothing
  3781 ;; This function is called by:
  3782 ;;		_MotorKeyboard
  3783 ;;		_ReciveMSG
  3784 ;; This function uses a non-reentrant model
  3785 ;;
  3786                           
  3787                           	psect	text19
  3788   00019C                     __ptext19:
  3789                           	callstack 0
  3790   00019C                     _fiSoroll:
  3791                           	callstack 27
  3792                           
  3793                           ;altaveu.c: 39:     sound=0;
  3794                           
  3795                           ;incstack = 0
  3796   00019C  6A12               	clrf	_sound^0,c
  3797   00019E  0012               	return		;funcret
  3798   0001A0                     __end_of_fiSoroll:
  3799                           	callstack 0
  3800                           
  3801 ;; *************** function _StateMenu *****************
  3802 ;; Defined at:
  3803 ;;		line 47 in file "menu.c"
  3804 ;; Parameters:    Size  Location     Type
  3805 ;;		None
  3806 ;; Auto vars:     Size  Location     Type
  3807 ;;		None
  3808 ;; Return value:  Size  Location     Type
  3809 ;;                  1    wreg      unsigned char 
  3810 ;; Registers used:
  3811 ;;		wreg, status,2
  3812 ;; Tracked objects:
  3813 ;;		On entry : 0/0
  3814 ;;		On exit  : 0/0
  3815 ;;		Unchanged: 0/0
  3816 ;; Data sizes:     COMRAM   BANK0   BANK1
  3817 ;;      Params:         0       0       0
  3818 ;;      Locals:         0       0       0
  3819 ;;      Temps:          0       0       0
  3820 ;;      Totals:         0       0       0
  3821 ;;Total ram usage:        0 bytes
  3822 ;; Hardware stack levels used: 1
  3823 ;; Hardware stack levels required when called: 2
  3824 ;; This function calls:
  3825 ;;		Nothing
  3826 ;; This function is called by:
  3827 ;;		_ReciveMSG
  3828 ;;		_MotorEQM
  3829 ;; This function uses a non-reentrant model
  3830 ;;
  3831                           
  3832                           	psect	text20
  3833   0001A0                     __ptext20:
  3834                           	callstack 0
  3835   0001A0                     _StateMenu:
  3836                           	callstack 27
  3837                           
  3838                           ;menu.c: 48:     return start;
  3839                           
  3840                           ;incstack = 0
  3841   0001A0  5017               	movf	_start@menu$F1451^0,w,c
  3842   0001A2  0012               	return		;funcret
  3843   0001A4                     __end_of_StateMenu:
  3844                           	callstack 0
  3845                           
  3846 ;; *************** function _SorollAlt *****************
  3847 ;; Defined at:
  3848 ;;		line 22 in file "altaveu.c"
  3849 ;; Parameters:    Size  Location     Type
  3850 ;;  tecla           1    wreg     unsigned char 
  3851 ;; Auto vars:     Size  Location     Type
  3852 ;;  tecla           1    0[COMRAM] unsigned char 
  3853 ;; Return value:  Size  Location     Type
  3854 ;;                  1    wreg      void 
  3855 ;; Registers used:
  3856 ;;		wreg, status,2, status,0
  3857 ;; Tracked objects:
  3858 ;;		On entry : 0/0
  3859 ;;		On exit  : 0/0
  3860 ;;		Unchanged: 0/0
  3861 ;; Data sizes:     COMRAM   BANK0   BANK1
  3862 ;;      Params:         0       0       0
  3863 ;;      Locals:         1       0       0
  3864 ;;      Temps:          0       0       0
  3865 ;;      Totals:         1       0       0
  3866 ;;Total ram usage:        1 bytes
  3867 ;; Hardware stack levels used: 1
  3868 ;; Hardware stack levels required when called: 2
  3869 ;; This function calls:
  3870 ;;		Nothing
  3871 ;; This function is called by:
  3872 ;;		_MotorKeyboard
  3873 ;;		_ReciveMSG
  3874 ;; This function uses a non-reentrant model
  3875 ;;
  3876                           
  3877                           	psect	text21
  3878   0019B4                     __ptext21:
  3879                           	callstack 0
  3880   0019B4                     _SorollAlt:
  3881                           	callstack 27
  3882                           
  3883                           ;incstack = 0
  3884                           ;SorollAlt@tecla stored from wreg
  3885   0019B4  6E59               	movwf	SorollAlt@tecla^0,c
  3886                           
  3887                           ;altaveu.c: 23:     if(tecla=='*') {dutycycle=300;}
  3888   0019B6  0E2A               	movlw	42
  3889   0019B8  1859               	xorwf	SorollAlt@tecla^0,w,c
  3890   0019BA  E102               	bnz	l4292
  3891   0019BC  0E2C               	movlw	44
  3892   0019BE  6E11               	movwf	_dutycycle^0,c
  3893   0019C0                     l4292:
  3894                           
  3895                           ;altaveu.c: 24:     if(tecla=='#') {dutycycle=950;}
  3896   0019C0  0E23               	movlw	35
  3897   0019C2  1859               	xorwf	SorollAlt@tecla^0,w,c
  3898   0019C4  E102               	bnz	l1131
  3899   0019C6  0EB6               	movlw	182
  3900   0019C8  6E11               	movwf	_dutycycle^0,c
  3901   0019CA                     l1131:
  3902                           
  3903                           ;altaveu.c: 25:     if(tecla==0) {dutycycle=1300;}
  3904   0019CA  5059               	movf	SorollAlt@tecla^0,w,c
  3905   0019CC  E102               	bnz	l4298
  3906   0019CE  0E14               	movlw	20
  3907   0019D0  6E11               	movwf	_dutycycle^0,c
  3908   0019D2                     l4298:
  3909                           
  3910                           ;altaveu.c: 26:     if(tecla==1) {dutycycle=900;}
  3911   0019D2  0459               	decf	SorollAlt@tecla^0,w,c
  3912   0019D4  E102               	bnz	l4302
  3913   0019D6  0E84               	movlw	132
  3914   0019D8  6E11               	movwf	_dutycycle^0,c
  3915   0019DA                     l4302:
  3916                           
  3917                           ;altaveu.c: 27:     if(tecla==2) {dutycycle=1100;}
  3918   0019DA  0E02               	movlw	2
  3919   0019DC  1859               	xorwf	SorollAlt@tecla^0,w,c
  3920   0019DE  E102               	bnz	l4306
  3921   0019E0  0E4C               	movlw	76
  3922   0019E2  6E11               	movwf	_dutycycle^0,c
  3923   0019E4                     l4306:
  3924                           
  3925                           ;altaveu.c: 28:     if(tecla==3) {dutycycle=2600;}
  3926   0019E4  0E03               	movlw	3
  3927   0019E6  1859               	xorwf	SorollAlt@tecla^0,w,c
  3928   0019E8  E102               	bnz	l4310
  3929   0019EA  0E28               	movlw	40
  3930   0019EC  6E11               	movwf	_dutycycle^0,c
  3931   0019EE                     l4310:
  3932                           
  3933                           ;altaveu.c: 29:     if(tecla==4) {dutycycle=1000;}
  3934   0019EE  0E04               	movlw	4
  3935   0019F0  1859               	xorwf	SorollAlt@tecla^0,w,c
  3936   0019F2  E102               	bnz	l4314
  3937   0019F4  0EE8               	movlw	232
  3938   0019F6  6E11               	movwf	_dutycycle^0,c
  3939   0019F8                     l4314:
  3940                           
  3941                           ;altaveu.c: 30:     if(tecla==5) {dutycycle=800;}
  3942   0019F8  0E05               	movlw	5
  3943   0019FA  1859               	xorwf	SorollAlt@tecla^0,w,c
  3944   0019FC  E102               	bnz	l4318
  3945   0019FE  0E20               	movlw	32
  3946   001A00  6E11               	movwf	_dutycycle^0,c
  3947   001A02                     l4318:
  3948                           
  3949                           ;altaveu.c: 31:     if(tecla==6) {dutycycle=750;}
  3950   001A02  0E06               	movlw	6
  3951   001A04  1859               	xorwf	SorollAlt@tecla^0,w,c
  3952   001A06  E102               	bnz	l4322
  3953   001A08  0EEE               	movlw	238
  3954   001A0A  6E11               	movwf	_dutycycle^0,c
  3955   001A0C                     l4322:
  3956                           
  3957                           ;altaveu.c: 32:     if(tecla==7) {dutycycle=2900;}
  3958   001A0C  0E07               	movlw	7
  3959   001A0E  1859               	xorwf	SorollAlt@tecla^0,w,c
  3960   001A10  E102               	bnz	l4326
  3961   001A12  0E54               	movlw	84
  3962   001A14  6E11               	movwf	_dutycycle^0,c
  3963   001A16                     l4326:
  3964                           
  3965                           ;altaveu.c: 33:     if(tecla==8) {dutycycle=400;}
  3966   001A16  0E08               	movlw	8
  3967   001A18  1859               	xorwf	SorollAlt@tecla^0,w,c
  3968   001A1A  E102               	bnz	l4330
  3969   001A1C  0E90               	movlw	144
  3970   001A1E  6E11               	movwf	_dutycycle^0,c
  3971   001A20                     l4330:
  3972                           
  3973                           ;altaveu.c: 34:     if(tecla==9) {dutycycle=3100;}
  3974   001A20  0E09               	movlw	9
  3975   001A22  1859               	xorwf	SorollAlt@tecla^0,w,c
  3976   001A24  E102               	bnz	l1141
  3977   001A26  0E1C               	movlw	28
  3978   001A28  6E11               	movwf	_dutycycle^0,c
  3979   001A2A                     l1141:
  3980                           
  3981                           ;altaveu.c: 35:     sound=1;
  3982   001A2A  0E01               	movlw	1
  3983   001A2C  6E12               	movwf	_sound^0,c
  3984   001A2E  0C01               	retlw	1	;funcret
  3985   001A30                     __end_of_SorollAlt:
  3986                           	callstack 0
  3987                           
  3988 ;; *************** function _OpcioMenu *****************
  3989 ;; Defined at:
  3990 ;;		line 50 in file "menu.c"
  3991 ;; Parameters:    Size  Location     Type
  3992 ;;		None
  3993 ;; Auto vars:     Size  Location     Type
  3994 ;;		None
  3995 ;; Return value:  Size  Location     Type
  3996 ;;                  1    wreg      unsigned char 
  3997 ;; Registers used:
  3998 ;;		wreg, status,2
  3999 ;; Tracked objects:
  4000 ;;		On entry : 0/0
  4001 ;;		On exit  : 0/0
  4002 ;;		Unchanged: 0/0
  4003 ;; Data sizes:     COMRAM   BANK0   BANK1
  4004 ;;      Params:         0       0       0
  4005 ;;      Locals:         0       0       0
  4006 ;;      Temps:          0       0       0
  4007 ;;      Totals:         0       0       0
  4008 ;;Total ram usage:        0 bytes
  4009 ;; Hardware stack levels used: 1
  4010 ;; Hardware stack levels required when called: 2
  4011 ;; This function calls:
  4012 ;;		Nothing
  4013 ;; This function is called by:
  4014 ;;		_MotorEQM
  4015 ;; This function uses a non-reentrant model
  4016 ;;
  4017                           
  4018                           	psect	text22
  4019   0001A4                     __ptext22:
  4020                           	callstack 0
  4021   0001A4                     _OpcioMenu:
  4022                           	callstack 27
  4023                           
  4024                           ;menu.c: 51:     return Opt;
  4025                           
  4026                           ;incstack = 0
  4027   0001A4  5019               	movf	_Opt^0,w,c
  4028   0001A6  0012               	return		;funcret
  4029   0001A8                     __end_of_OpcioMenu:
  4030                           	callstack 0
  4031                           
  4032 ;; *************** function _ListLastMessages *****************
  4033 ;; Defined at:
  4034 ;;		line 475 in file "EQM.c"
  4035 ;; Parameters:    Size  Location     Type
  4036 ;;		None
  4037 ;; Auto vars:     Size  Location     Type
  4038 ;;		None
  4039 ;; Return value:  Size  Location     Type
  4040 ;;                  1    wreg      unsigned char 
  4041 ;; Registers used:
  4042 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4043 ;; Tracked objects:
  4044 ;;		On entry : 0/0
  4045 ;;		On exit  : 0/0
  4046 ;;		Unchanged: 0/0
  4047 ;; Data sizes:     COMRAM   BANK0   BANK1
  4048 ;;      Params:         0       0       0
  4049 ;;      Locals:         0       0       0
  4050 ;;      Temps:          5       0       0
  4051 ;;      Totals:         5       0       0
  4052 ;;Total ram usage:        5 bytes
  4053 ;; Hardware stack levels used: 1
  4054 ;; Hardware stack levels required when called: 7
  4055 ;; This function calls:
  4056 ;;		_GetTecla
  4057 ;;		_HiHaTecla
  4058 ;;		_LcClear
  4059 ;;		_LcGotoXY
  4060 ;;		_LcPutChar
  4061 ;;		_LcPutString
  4062 ;;		_SIO_PutChar
  4063 ;;		_finishConversion
  4064 ;;		_getAction
  4065 ;;		_mouJoyAvail
  4066 ;;		_startConversion
  4067 ;; This function is called by:
  4068 ;;		_MotorEQM
  4069 ;; This function uses a non-reentrant model
  4070 ;;
  4071                           
  4072                           	psect	text23
  4073   00052A                     __ptext23:
  4074                           	callstack 0
  4075   00052A                     _ListLastMessages:
  4076                           	callstack 22
  4077                           
  4078                           ;EQM.c: 476:     switch(state_option) {
  4079                           
  4080                           ;incstack = 0
  4081   00052A  D0EB               	goto	l5226
  4082   00052C                     l5012:
  4083                           
  4084                           ;EQM.c: 478:         LcClear();
  4085   00052C  EC74  F000         	call	_LcClear	;wreg free
  4086                           
  4087                           ;EQM.c: 479:         LcGotoXY(0,0);
  4088   000530  0E00               	movlw	0
  4089   000532  6A67               	clrf	LcGotoXY@Row^0,c
  4090   000534  ECD0  F00B         	call	_LcGotoXY
  4091                           
  4092                           ;EQM.c: 480:         compt = lastMSG + 1;
  4093   000538  2877               	incf	_lastMSG^0,w,c
  4094   00053A  6E26               	movwf	_compt^0,c
  4095                           
  4096                           ;EQM.c: 481:         if (compt==8){
  4097   00053C  0E08               	movlw	8
  4098   00053E  1826               	xorwf	_compt^0,w,c
  4099   000540  E101               	bnz	l847
  4100                           
  4101                           ;EQM.c: 482:             compt=0;
  4102   000542  6A26               	clrf	_compt^0,c
  4103   000544                     l847:
  4104                           
  4105                           ;EQM.c: 484:         index=0;
  4106   000544  6A2F               	clrf	_index@EQM$F1361^0,c
  4107                           
  4108                           ;EQM.c: 485:         if (maxMSG>1){
  4109   000546  0E01               	movlw	1
  4110   000548  6429               	cpfsgt	_maxMSG^0,c
  4111   00054A  D007               	goto	l5026
  4112                           
  4113                           ;EQM.c: 486:             compt2 = compt+1;
  4114   00054C  2826               	incf	_compt^0,w,c
  4115   00054E  6E25               	movwf	_compt2^0,c
  4116                           
  4117                           ;EQM.c: 487:             if (compt==7){
  4118   000550  0E07               	movlw	7
  4119   000552  1826               	xorwf	_compt^0,w,c
  4120   000554  E104               	bnz	l5028
  4121                           
  4122                           ;EQM.c: 488:                 compt2=0;
  4123   000556  6A25               	clrf	_compt2^0,c
  4124   000558  D002               	goto	l5028
  4125   00055A                     l5026:
  4126                           
  4127                           ;EQM.c: 491:             compt2='*';
  4128   00055A  0E2A               	movlw	42
  4129   00055C  6E25               	movwf	_compt2^0,c
  4130   00055E                     l5028:
  4131                           
  4132                           ;EQM.c: 493:         iMSG=0;
  4133   00055E  6A2D               	clrf	_iMSG^0,c
  4134                           
  4135                           ;EQM.c: 494:         if (maxMSG == 0){
  4136   000560  5029               	movf	_maxMSG^0,w,c
  4137   000562  E102               	bnz	l5032
  4138                           
  4139                           ;EQM.c: 495:             state_option=7;
  4140   000564  0E07               	movlw	7
  4141   000566  D0C2               	goto	L7
  4142   000568                     l5032:
  4143                           
  4144                           ;EQM.c: 497:             state_option++;
  4145   000568  2A2B               	incf	_state_option^0,f,c
  4146                           
  4147                           ;EQM.c: 498:             LcGotoXY(0,0);
  4148   00056A  0E00               	movlw	0
  4149   00056C  6A67               	clrf	LcGotoXY@Row^0,c
  4150   00056E  ECD0  F00B         	call	_LcGotoXY
  4151                           
  4152                           ;EQM.c: 500:         return 0;
  4153   000572  0C00               	retlw	0
  4154   000574                     l5040:
  4155                           
  4156                           ;EQM.c: 502:         if(index == 0){
  4157   000574  502F               	movf	_index@EQM$F1361^0,w,c
  4158   000576  E104               	bnz	l5044
  4159                           
  4160                           ;EQM.c: 503:             LcPutChar('1'+ iMSG);
  4161   000578  502D               	movf	_iMSG^0,w,c
  4162   00057A  0F31               	addlw	49
  4163   00057C  EC97  F00E         	call	_LcPutChar
  4164   000580                     l5044:
  4165                           
  4166                           ;EQM.c: 505:         if (index ==1){
  4167   000580  042F               	decf	_index@EQM$F1361^0,w,c
  4168   000582  E103               	bnz	l5048
  4169                           
  4170                           ;EQM.c: 506:             LcPutChar(':');
  4171   000584  0E3A               	movlw	58
  4172   000586  EC97  F00E         	call	_LcPutChar
  4173   00058A                     l5048:
  4174                           
  4175                           ;EQM.c: 508:         if(1 < index ){
  4176   00058A  0E01               	movlw	1
  4177   00058C  642F               	cpfsgt	_index@EQM$F1361^0,c
  4178   00058E  D01D               	goto	l5084
  4179                           
  4180                           ;EQM.c: 509:             LcPutChar(msgs[compt][index-2]);
  4181   000590  5026               	movf	_compt^0,w,c
  4182   000592  D8CB               	call	PL12	;call to abstracted procedure
  4183   000594  EC97  F00E         	call	_LcPutChar
  4184                           
  4185                           ;EQM.c: 510:             if (index == 15){
  4186   000598  0E0F               	movlw	15
  4187   00059A  182F               	xorwf	_index@EQM$F1361^0,w,c
  4188   00059C  E109               	bnz	l5068
  4189                           
  4190                           ;EQM.c: 511:                 state_option++;
  4191                           
  4192                           ;EQM.c: 512:                 index=0;
  4193                           
  4194                           ;EQM.c: 513:                 LcGotoXY(0,1);
  4195   00059E  D8E5               	call	PL54	;call to abstracted procedure
  4196   0005A0  ECD0  F00B         	call	_LcGotoXY
  4197                           
  4198                           ;EQM.c: 514:                 if (compt2=='*'){
  4199   0005A4  0E2A               	movlw	42
  4200   0005A6  1825               	xorwf	_compt2^0,w,c
  4201   0005A8  A4D8               	btfss	status,2,c
  4202   0005AA  0C00               	retlw	0
  4203   0005AC                     u4330:
  4204                           
  4205                           ;EQM.c: 515:                     state_option++;
  4206   0005AC  2A2B               	incf	_state_option^0,f,c
  4207   0005AE  0C00               	retlw	0
  4208   0005B0                     l5068:
  4209                           
  4210                           ;EQM.c: 519:             if ('*' == msgs[compt][index-1]){
  4211   0005B0  5026               	movf	_compt^0,w,c
  4212   0005B2  D8D5               	call	PL24	;call to abstracted procedure
  4213   0005B4  D8C9               	call	PL14	;call to abstracted procedure
  4214   0005B6  E109               	bnz	l5084
  4215                           
  4216                           ;EQM.c: 520:                 state_option++;
  4217                           
  4218                           ;EQM.c: 521:                 index=0;
  4219                           
  4220                           ;EQM.c: 522:                 LcGotoXY(0,1);
  4221   0005B8  D8D8               	call	PL54	;call to abstracted procedure
  4222   0005BA  ECD0  F00B         	call	_LcGotoXY
  4223                           
  4224                           ;EQM.c: 523:                 if (compt2=='*'){
  4225   0005BE  0E2A               	movlw	42
  4226   0005C0  1825               	xorwf	_compt2^0,w,c
  4227   0005C2  A4D8               	btfss	status,2,c
  4228   0005C4  0C00               	retlw	0
  4229   0005C6                     u4350:
  4230                           
  4231                           ;EQM.c: 524:                     state_option=3;
  4232   0005C6  0E03               	movlw	3
  4233   0005C8  D091               	goto	L7
  4234   0005CA                     l5084:
  4235                           
  4236                           ;EQM.c: 529:         index++;
  4237   0005CA  2A2F               	incf	_index@EQM$F1361^0,f,c
  4238   0005CC  0C00               	retlw	0
  4239   0005CE                     l5090:
  4240                           
  4241                           ;EQM.c: 532:         if(index == 0){
  4242   0005CE  502F               	movf	_index@EQM$F1361^0,w,c
  4243   0005D0  E108               	bnz	l5096
  4244                           
  4245                           ;EQM.c: 533:             LcPutChar('2'+iMSG);
  4246   0005D2  502D               	movf	_iMSG^0,w,c
  4247   0005D4  0F32               	addlw	50
  4248   0005D6  EC97  F00E         	call	_LcPutChar
  4249                           
  4250                           ;EQM.c: 534:             SIO_PutChar('2'+iMSG);
  4251   0005DA  502D               	movf	_iMSG^0,w,c
  4252   0005DC  0F32               	addlw	50
  4253   0005DE  ECB5  F000         	call	_SIO_PutChar
  4254   0005E2                     l5096:
  4255                           
  4256                           ;EQM.c: 536:         if (index ==1){
  4257   0005E2  042F               	decf	_index@EQM$F1361^0,w,c
  4258   0005E4  E106               	bnz	l5102
  4259                           
  4260                           ;EQM.c: 537:             LcPutChar(':');
  4261   0005E6  0E3A               	movlw	58
  4262   0005E8  EC97  F00E         	call	_LcPutChar
  4263                           
  4264                           ;EQM.c: 538:             SIO_PutChar(':');
  4265   0005EC  0E3A               	movlw	58
  4266   0005EE  ECB5  F000         	call	_SIO_PutChar
  4267   0005F2                     l5102:
  4268                           
  4269                           ;EQM.c: 540:         if(1 < index ){
  4270   0005F2  0E01               	movlw	1
  4271   0005F4  642F               	cpfsgt	_index@EQM$F1361^0,c
  4272   0005F6  D7E9               	goto	l5084
  4273                           
  4274                           ;EQM.c: 541:             LcPutChar(msgs[compt2][index-2]);
  4275   0005F8  5025               	movf	_compt2^0,w,c
  4276   0005FA  D897               	call	PL12	;call to abstracted procedure
  4277   0005FC  EC97  F00E         	call	_LcPutChar
  4278                           
  4279                           ;EQM.c: 542:             SIO_PutChar(msgs[compt2][index-2]);
  4280   000600  5025               	movf	_compt2^0,w,c
  4281   000602  D893               	call	PL12	;call to abstracted procedure
  4282   000604  ECB5  F000         	call	_SIO_PutChar
  4283                           
  4284                           ;EQM.c: 543:             if ('*' == msgs[compt2][index-1]){
  4285   000608  5025               	movf	_compt2^0,w,c
  4286   00060A  D8A9               	call	PL24	;call to abstracted procedure
  4287   00060C  D89D               	call	PL14	;call to abstracted procedure
  4288   00060E  E101               	bnz	l5110
  4289                           
  4290                           ;EQM.c: 544:                 state_option++;
  4291   000610  2A2B               	incf	_state_option^0,f,c
  4292   000612                     l5110:
  4293                           
  4294                           ;EQM.c: 546:             if (index == 13){
  4295   000612  0E0D               	movlw	13
  4296   000614  182F               	xorwf	_index@EQM$F1361^0,w,c
  4297   000616  E1D9               	bnz	l5084
  4298                           
  4299                           ;EQM.c: 547:                 state_option++;
  4300   000618  2A2B               	incf	_state_option^0,f,c
  4301   00061A  D7D7               	goto	l5084
  4302   00061C                     l5118:
  4303                           
  4304                           ;EQM.c: 553:          if (HiHaTecla()) {
  4305   00061C  EC69  F000         	call	_HiHaTecla	;wreg free
  4306   000620  0900               	iorlw	0
  4307   000622  E004               	bz	l5124
  4308                           
  4309                           ;EQM.c: 554:              tecla = GetTecla();
  4310   000624  EC33  F00F         	call	_GetTecla	;wreg free
  4311   000628  6E23               	movwf	_tecla^0,c
  4312   00062A  D7C0               	goto	u4330
  4313   00062C                     l5124:
  4314   00062C  EC69  F000         	call	_HiHaTecla	;wreg free
  4315   000630  0900               	iorlw	0
  4316   000632  A4D8               	btfss	status,2,c
  4317   000634  0C00               	retlw	0
  4318   000636  5029               	movf	_maxMSG^0,w,c
  4319   000638  B4D8               	btfsc	status,2,c
  4320   00063A  0C00               	retlw	0
  4321                           
  4322                           ;EQM.c: 558:              startConversion();
  4323   00063C  ECD4  F000         	call	_startConversion	;wreg free
  4324                           
  4325                           ;EQM.c: 559:              state_option = 5;
  4326   000640  0E05               	movlw	5
  4327   000642  D054               	goto	L7
  4328   000644                     l5136:
  4329                           
  4330                           ;EQM.c: 563:          if (tecla=='*') {
  4331   000644  0E2A               	movlw	42
  4332   000646  1823               	xorwf	_tecla^0,w,c
  4333   000648  E101               	bnz	l5144
  4334                           
  4335                           ;EQM.c: 564:              return 1;
  4336   00064A  0C01               	retlw	1
  4337   00064C                     l5144:
  4338                           
  4339                           ;EQM.c: 567:              state_option--;
  4340   00064C  062B               	decf	_state_option^0,f,c
  4341   00064E  0012               	return	
  4342   000650                     l5146:
  4343                           
  4344                           ;EQM.c: 571:          if (finishConversion()==1 && mouJoyAvail()==1) {
  4345   000650  ECBC  F000         	call	_finishConversion	;wreg free
  4346   000654  06E8               	decf	wreg,f,c
  4347   000656  E108               	bnz	l5154
  4348   000658  EC93  F00F         	call	_mouJoyAvail	;wreg free
  4349   00065C  06E8               	decf	wreg,f,c
  4350   00065E  E104               	bnz	l5154
  4351                           
  4352                           ;EQM.c: 572:              action=getAction();
  4353   000660  ECD6  F000         	call	_getAction	;wreg free
  4354   000664  6E24               	movwf	_action^0,c
  4355   000666  D7A2               	goto	u4330
  4356   000668                     l5154:
  4357   000668  ECBC  F000         	call	_finishConversion	;wreg free
  4358   00066C  06E8               	decf	wreg,f,c
  4359   00066E  A4D8               	btfss	status,2,c
  4360   000670  0C00               	retlw	0
  4361   000672  EC93  F00F         	call	_mouJoyAvail	;wreg free
  4362   000676  0900               	iorlw	0
  4363   000678  E0A6               	bz	u4350
  4364   00067A  0C00               	retlw	0
  4365   00067C                     l5164:
  4366                           
  4367                           ;EQM.c: 580:          if (action==2) {
  4368   00067C  0E02               	movlw	2
  4369   00067E  1824               	xorwf	_action^0,w,c
  4370   000680  E10C               	bnz	l5184
  4371                           
  4372                           ;EQM.c: 581:              if (iMSG != 0){
  4373   000682  502D               	movf	_iMSG^0,w,c
  4374   000684  E0A0               	bz	u4350
  4375                           
  4376                           ;EQM.c: 582:                  iMSG--;
  4377   000686  062D               	decf	_iMSG^0,f,c
  4378                           
  4379                           ;EQM.c: 583:                  compt2 = compt;
  4380   000688  C026  F025         	movff	_compt,_compt2
  4381                           
  4382                           ;EQM.c: 584:                  if (compt==0){
  4383   00068C  5026               	movf	_compt^0,w,c
  4384   00068E  E103               	bnz	l5176
  4385                           
  4386                           ;EQM.c: 585:                      compt=7;
  4387   000690  0E07               	movlw	7
  4388   000692  6E26               	movwf	_compt^0,c
  4389                           
  4390                           ;EQM.c: 586:                  }else{
  4391   000694  D023               	goto	l886
  4392   000696                     l5176:
  4393                           
  4394                           ;EQM.c: 587:                      compt--;
  4395   000696  0626               	decf	_compt^0,f,c
  4396   000698  D021               	goto	l886
  4397   00069A                     l5184:
  4398   00069A  0424               	decf	_action^0,w,c
  4399   00069C  E11F               	bnz	l886
  4400                           
  4401                           ;EQM.c: 595:              if (maxMSG > 2){
  4402   00069E  0E02               	movlw	2
  4403   0006A0  6429               	cpfsgt	_maxMSG^0,c
  4404   0006A2  D01C               	goto	l886
  4405                           
  4406                           ;EQM.c: 596:                 if (iMSG < maxMSG-2){
  4407   0006A4  0EFE               	movlw	254
  4408   0006A6  2429               	addwf	_maxMSG^0,w,c
  4409   0006A8  6E72               	movwf	??_ListLastMessages^0,c
  4410   0006AA  6A73               	clrf	(??_ListLastMessages+1)^0,c
  4411   0006AC  0EFF               	movlw	255
  4412   0006AE  2273               	addwfc	(??_ListLastMessages+1)^0,f,c
  4413   0006B0  502D               	movf	_iMSG^0,w,c
  4414   0006B2  6E74               	movwf	(??_ListLastMessages+2)^0,c
  4415   0006B4  6A75               	clrf	(??_ListLastMessages+3)^0,c
  4416   0006B6  5072               	movf	??_ListLastMessages^0,w,c
  4417   0006B8  5C74               	subwf	(??_ListLastMessages+2)^0,w,c
  4418   0006BA  5075               	movf	(??_ListLastMessages+3)^0,w,c
  4419   0006BC  0A80               	xorlw	128
  4420   0006BE  6E76               	movwf	(??_ListLastMessages+4)^0,c
  4421   0006C0  5073               	movf	(??_ListLastMessages+1)^0,w,c
  4422   0006C2  0A80               	xorlw	128
  4423   0006C4  5876               	subwfb	(??_ListLastMessages+4)^0,w,c
  4424   0006C6  E301 D77E          	bc	u4350
  4425                           
  4426                           ;EQM.c: 597:                     iMSG++;
  4427   0006CA  2A2D               	incf	_iMSG^0,f,c
  4428                           
  4429                           ;EQM.c: 598:                     compt=compt2;
  4430   0006CC  C025  F026         	movff	_compt2,_compt
  4431                           
  4432                           ;EQM.c: 599:                     if (compt2==7){
  4433   0006D0  0E07               	movlw	7
  4434   0006D2  1825               	xorwf	_compt2^0,w,c
  4435   0006D4  E102               	bnz	l5198
  4436                           
  4437                           ;EQM.c: 600:                         compt2=0;
  4438   0006D6  6A25               	clrf	_compt2^0,c
  4439                           
  4440                           ;EQM.c: 601:                     }else{
  4441   0006D8  D001               	goto	l886
  4442   0006DA                     l5198:
  4443                           
  4444                           ;EQM.c: 602:                         compt2++;
  4445   0006DA  2A25               	incf	_compt2^0,f,c
  4446   0006DC                     l886:
  4447                           
  4448                           ;EQM.c: 610:          index=0;
  4449   0006DC  6A2F               	clrf	_index@EQM$F1361^0,c
  4450                           
  4451                           ;EQM.c: 611:          LcClear();
  4452   0006DE  EC74  F000         	call	_LcClear	;wreg free
  4453                           
  4454                           ;EQM.c: 612:          LcGotoXY(0,0);
  4455   0006E2  0E00               	movlw	0
  4456   0006E4  6A67               	clrf	LcGotoXY@Row^0,c
  4457   0006E6  ECD0  F00B         	call	_LcGotoXY
  4458                           
  4459                           ;EQM.c: 613:          state_option=1;
  4460   0006EA  0E01               	movlw	1
  4461   0006EC                     L7:
  4462   0006EC  6E2B               	movwf	_state_option^0,c
  4463   0006EE  0C00               	retlw	0
  4464   0006F0                     l5214:
  4465                           
  4466                           ;EQM.c: 616:             msgToLCD =(char*)"NO MSGS.";
  4467   0006F0  0E9F               	movlw	low STR_16
  4468                           
  4469                           ;EQM.c: 617:             if(LcPutString(msgToLCD)==2) {
  4470   0006F2  EC93  F00E         	call	PL28	;call to abstracted procedure
  4471   0006F6  EC90  F002         	call	PL26	;call to abstracted procedure
  4472   0006FA  ECC9  F00D         	call	_LcPutString	;wreg free
  4473   0006FE  0A02               	xorlw	2
  4474   000700  D7BB               	goto	L8
  4475   000702                     l5226:
  4476   000702  502B               	movf	_state_option^0,w,c
  4477                           
  4478                           ; Switch size 1, requested type "space"
  4479                           ; Number of cases is 8, Range of values is 0 to 7
  4480                           ; switch strategies available:
  4481                           ; Name         Instructions Cycles
  4482                           ; simple_byte           25    13 (average)
  4483                           ;	Chosen strategy is simple_byte
  4484   000704  E101 D712          	bz	l5012
  4485   000708  0A01               	xorlw	1	; case 1
  4486   00070A  E101 D733          	bz	l5040
  4487   00070E  0A03               	xorlw	3	; case 2
  4488   000710  E101 D75D          	bz	l5090
  4489   000714  0A01               	xorlw	1	; case 3
  4490   000716  E082               	bz	l5118
  4491   000718  0A07               	xorlw	7	; case 4
  4492   00071A  E094               	bz	l5136
  4493   00071C  0A01               	xorlw	1	; case 5
  4494   00071E  E098               	bz	l5146
  4495   000720  0A03               	xorlw	3	; case 6
  4496   000722  E0AC               	bz	l5164
  4497   000724  0A01               	xorlw	1	; case 7
  4498   000726  E0E4               	bz	l5214
  4499   000728  0012               	return		;funcret
  4500   00072A                     __end_of_ListLastMessages:
  4501                           	callstack 0
  4502   00072A                     PL12:
  4503                           	callstack 22
  4504   00072A  0D0E               	mullw	14
  4505   00072C  0E7C               	movlw	low (_msgs+65534)
  4506   00072E  24F3               	addwf	243,w,c
  4507   000730  6E72               	movwf	??_ListLastMessages^0,c
  4508   000732  0E01               	movlw	high (_msgs+65534)
  4509   000734  20F4               	addwfc	prodh,w,c
  4510   000736  6E73               	movwf	(??_ListLastMessages+1)^0,c
  4511   000738  502F               	movf	_index@EQM$F1361^0,w,c
  4512   00073A  2472               	addwf	??_ListLastMessages^0,w,c
  4513   00073C  6ED9               	movwf	fsr2l,c
  4514   00073E  0E00               	movlw	0
  4515   000740  2073               	addwfc	(??_ListLastMessages+1)^0,w,c
  4516   000742  6EDA               	movwf	fsr2h,c
  4517   000744  50DF               	movf	indf2,w,c
  4518   000746  0012               	return	
  4519   000748                     __end_ofPL12:
  4520                           	callstack 0
  4521   000748                     PL14:
  4522                           	callstack 22
  4523   000748  20F4               	addwfc	prodh,w,c
  4524   00074A  6E73               	movwf	(??_ListLastMessages+1)^0,c
  4525   00074C  502F               	movf	_index@EQM$F1361^0,w,c
  4526   00074E  2472               	addwf	??_ListLastMessages^0,w,c
  4527   000750  6ED9               	movwf	fsr2l,c
  4528   000752  0E00               	movlw	0
  4529   000754  2073               	addwfc	(??_ListLastMessages+1)^0,w,c
  4530   000756  6EDA               	movwf	fsr2h,c
  4531   000758  0E2A               	movlw	42
  4532   00075A  18DE               	xorwf	postinc2,w,c
  4533   00075C  0012               	return	
  4534   00075E                     __end_ofPL14:
  4535                           	callstack 0
  4536   00075E                     PL24:
  4537                           	callstack 22
  4538   00075E  0D0E               	mullw	14
  4539   000760  0E7D               	movlw	low (_msgs+65535)
  4540   000762  24F3               	addwf	243,w,c
  4541   000764  6E72               	movwf	??_ListLastMessages^0,c
  4542   000766  0E01               	movlw	high (_msgs+65535)
  4543   000768  0012               	return	
  4544   00076A                     __end_ofPL24:
  4545                           	callstack 0
  4546   00076A                     PL54:
  4547                           	callstack 22
  4548   00076A  2A2B               	incf	_state_option^0,f,c
  4549   00076C  6A2F               	clrf	_index@EQM$F1361^0,c
  4550   00076E  0E01               	movlw	1
  4551   000770  6E67               	movwf	LcGotoXY@Row^0,c
  4552   000772  0C00               	retlw	0
  4553   000774                     __end_ofPL54:
  4554                           	callstack 0
  4555                           
  4556 ;; *************** function _startConversion *****************
  4557 ;; Defined at:
  4558 ;;		line 28 in file "joystick.c"
  4559 ;; Parameters:    Size  Location     Type
  4560 ;;		None
  4561 ;; Auto vars:     Size  Location     Type
  4562 ;;		None
  4563 ;; Return value:  Size  Location     Type
  4564 ;;                  1    wreg      void 
  4565 ;; Registers used:
  4566 ;;		None
  4567 ;; Tracked objects:
  4568 ;;		On entry : 0/0
  4569 ;;		On exit  : 0/0
  4570 ;;		Unchanged: 0/0
  4571 ;; Data sizes:     COMRAM   BANK0   BANK1
  4572 ;;      Params:         0       0       0
  4573 ;;      Locals:         0       0       0
  4574 ;;      Temps:          0       0       0
  4575 ;;      Totals:         0       0       0
  4576 ;;Total ram usage:        0 bytes
  4577 ;; Hardware stack levels used: 1
  4578 ;; Hardware stack levels required when called: 2
  4579 ;; This function calls:
  4580 ;;		Nothing
  4581 ;; This function is called by:
  4582 ;;		_ListLastMessages
  4583 ;;		_MotorMenu
  4584 ;; This function uses a non-reentrant model
  4585 ;;
  4586                           
  4587                           	psect	text24
  4588   0001A8                     __ptext24:
  4589                           	callstack 0
  4590   0001A8                     _startConversion:
  4591                           	callstack 27
  4592                           
  4593                           ;joystick.c: 31:     ADCON0bits.GODONE=1;
  4594                           
  4595                           ;incstack = 0
  4596   0001A8  82C2               	bsf	194,1,c	;volatile
  4597   0001AA  0012               	return		;funcret
  4598   0001AC                     __end_of_startConversion:
  4599                           	callstack 0
  4600                           
  4601 ;; *************** function _mouJoyAvail *****************
  4602 ;; Defined at:
  4603 ;;		line 40 in file "joystick.c"
  4604 ;; Parameters:    Size  Location     Type
  4605 ;;		None
  4606 ;; Auto vars:     Size  Location     Type
  4607 ;;		None
  4608 ;; Return value:  Size  Location     Type
  4609 ;;                  1    wreg      unsigned char 
  4610 ;; Registers used:
  4611 ;;		wreg, status,2, status,0
  4612 ;; Tracked objects:
  4613 ;;		On entry : 0/0
  4614 ;;		On exit  : 0/0
  4615 ;;		Unchanged: 0/0
  4616 ;; Data sizes:     COMRAM   BANK0   BANK1
  4617 ;;      Params:         0       0       0
  4618 ;;      Locals:         0       0       0
  4619 ;;      Temps:          0       0       0
  4620 ;;      Totals:         0       0       0
  4621 ;;Total ram usage:        0 bytes
  4622 ;; Hardware stack levels used: 1
  4623 ;; Hardware stack levels required when called: 2
  4624 ;; This function calls:
  4625 ;;		Nothing
  4626 ;; This function is called by:
  4627 ;;		_ListLastMessages
  4628 ;;		_MotorMenu
  4629 ;; This function uses a non-reentrant model
  4630 ;;
  4631                           
  4632                           	psect	text25
  4633   001F26                     __ptext25:
  4634                           	callstack 0
  4635   001F26                     _mouJoyAvail:
  4636                           	callstack 27
  4637                           
  4638                           ;joystick.c: 43:     if (ADRESH < 5 && estatAnterior== 0) {
  4639                           
  4640                           ;incstack = 0
  4641   001F26  0E05               	movlw	5
  4642   001F28  60C4               	cpfslt	196,c	;volatile
  4643   001F2A  D005               	goto	l4640
  4644   001F2C  5013               	movf	_estatAnterior^0,w,c
  4645   001F2E  E103               	bnz	l4640
  4646                           
  4647                           ;joystick.c: 44:         estatAnterior=2;
  4648   001F30  0E02               	movlw	2
  4649   001F32  6E13               	movwf	_estatAnterior^0,c
  4650                           
  4651                           ;joystick.c: 45:         return 1;
  4652   001F34  0C01               	retlw	1
  4653   001F36                     l4640:
  4654   001F36  0EF5               	movlw	245
  4655   001F38  64C4               	cpfsgt	196,c	;volatile
  4656   001F3A  D004               	goto	l4652
  4657   001F3C  5013               	movf	_estatAnterior^0,w,c
  4658   001F3E  E102               	bnz	l4652
  4659                           
  4660                           ;joystick.c: 48:         estatAnterior=1;
  4661   001F40  0E01               	movlw	1
  4662   001F42  D7F7               	goto	L9
  4663   001F44                     l4652:
  4664   001F44  0E05               	movlw	5
  4665   001F46  64C4               	cpfsgt	196,c	;volatile
  4666   001F48  0C00               	retlw	0
  4667   001F4A  0EF5               	movlw	245
  4668   001F4C  60C4               	cpfslt	196,c	;volatile
  4669   001F4E  0C00               	retlw	0
  4670                           
  4671                           ;joystick.c: 52:         estatAnterior=0;
  4672   001F50  6A13               	clrf	_estatAnterior^0,c
  4673                           
  4674                           ;joystick.c: 53:         return 0;
  4675   001F52  0C00               	retlw	0	;funcret
  4676   001F54                     __end_of_mouJoyAvail:
  4677                           	callstack 0
  4678                           
  4679 ;; *************** function _getAction *****************
  4680 ;; Defined at:
  4681 ;;		line 58 in file "joystick.c"
  4682 ;; Parameters:    Size  Location     Type
  4683 ;;		None
  4684 ;; Auto vars:     Size  Location     Type
  4685 ;;		None
  4686 ;; Return value:  Size  Location     Type
  4687 ;;                  1    wreg      unsigned char 
  4688 ;; Registers used:
  4689 ;;		wreg, status,2
  4690 ;; Tracked objects:
  4691 ;;		On entry : 0/0
  4692 ;;		On exit  : 0/0
  4693 ;;		Unchanged: 0/0
  4694 ;; Data sizes:     COMRAM   BANK0   BANK1
  4695 ;;      Params:         0       0       0
  4696 ;;      Locals:         0       0       0
  4697 ;;      Temps:          0       0       0
  4698 ;;      Totals:         0       0       0
  4699 ;;Total ram usage:        0 bytes
  4700 ;; Hardware stack levels used: 1
  4701 ;; Hardware stack levels required when called: 2
  4702 ;; This function calls:
  4703 ;;		Nothing
  4704 ;; This function is called by:
  4705 ;;		_ListLastMessages
  4706 ;;		_MotorMenu
  4707 ;; This function uses a non-reentrant model
  4708 ;;
  4709                           
  4710                           	psect	text26
  4711   0001AC                     __ptext26:
  4712                           	callstack 0
  4713   0001AC                     _getAction:
  4714                           	callstack 27
  4715                           
  4716                           ;joystick.c: 61:     return estatAnterior;
  4717                           
  4718                           ;incstack = 0
  4719   0001AC  5013               	movf	_estatAnterior^0,w,c
  4720   0001AE  0012               	return		;funcret
  4721   0001B0                     __end_of_getAction:
  4722                           	callstack 0
  4723                           
  4724 ;; *************** function _finishConversion *****************
  4725 ;; Defined at:
  4726 ;;		line 34 in file "joystick.c"
  4727 ;; Parameters:    Size  Location     Type
  4728 ;;		None
  4729 ;; Auto vars:     Size  Location     Type
  4730 ;;		None
  4731 ;; Return value:  Size  Location     Type
  4732 ;;                  1    wreg      unsigned char 
  4733 ;; Registers used:
  4734 ;;		wreg
  4735 ;; Tracked objects:
  4736 ;;		On entry : 0/0
  4737 ;;		On exit  : 0/0
  4738 ;;		Unchanged: 0/0
  4739 ;; Data sizes:     COMRAM   BANK0   BANK1
  4740 ;;      Params:         0       0       0
  4741 ;;      Locals:         0       0       0
  4742 ;;      Temps:          0       0       0
  4743 ;;      Totals:         0       0       0
  4744 ;;Total ram usage:        0 bytes
  4745 ;; Hardware stack levels used: 1
  4746 ;; Hardware stack levels required when called: 2
  4747 ;; This function calls:
  4748 ;;		Nothing
  4749 ;; This function is called by:
  4750 ;;		_ListLastMessages
  4751 ;;		_MotorMenu
  4752 ;; This function uses a non-reentrant model
  4753 ;;
  4754                           
  4755                           	psect	text27
  4756   000178                     __ptext27:
  4757                           	callstack 0
  4758   000178                     _finishConversion:
  4759                           	callstack 27
  4760                           
  4761                           ;joystick.c: 37:     return ((ADCON0bits.GODONE==0)?1:0);
  4762                           
  4763                           ;incstack = 0
  4764   000178  A2C2               	btfss	194,1,c	;volatile
  4765   00017A  0C01               	retlw	1
  4766   00017C  0C00               	retlw	0	;funcret
  4767   00017E                     __end_of_finishConversion:
  4768                           	callstack 0
  4769                           
  4770 ;; *************** function _HiHaTecla *****************
  4771 ;; Defined at:
  4772 ;;		line 98 in file "teclat.c"
  4773 ;; Parameters:    Size  Location     Type
  4774 ;;		None
  4775 ;; Auto vars:     Size  Location     Type
  4776 ;;		None
  4777 ;; Return value:  Size  Location     Type
  4778 ;;                  1    wreg      unsigned char 
  4779 ;; Registers used:
  4780 ;;		wreg, status,2
  4781 ;; Tracked objects:
  4782 ;;		On entry : 0/0
  4783 ;;		On exit  : 0/0
  4784 ;;		Unchanged: 0/0
  4785 ;; Data sizes:     COMRAM   BANK0   BANK1
  4786 ;;      Params:         0       0       0
  4787 ;;      Locals:         1       0       0
  4788 ;;      Temps:          0       0       0
  4789 ;;      Totals:         1       0       0
  4790 ;;Total ram usage:        1 bytes
  4791 ;; Hardware stack levels used: 1
  4792 ;; Hardware stack levels required when called: 2
  4793 ;; This function calls:
  4794 ;;		Nothing
  4795 ;; This function is called by:
  4796 ;;		_MotorKeyboard
  4797 ;;		_ListLastMessages
  4798 ;;		_MotorMenu
  4799 ;; This function uses a non-reentrant model
  4800 ;;
  4801                           
  4802                           	psect	text28
  4803   0000D2                     __ptext28:
  4804                           	callstack 0
  4805   0000D2                     _HiHaTecla:
  4806                           	callstack 27
  4807                           
  4808                           ;teclat.c: 99:     return (((PORTBbits.RB5 == 0) || (PORTBbits.RB0 == 0) || (PORTBbits.R
      +                          B1 == 0) || (PORTBbits.RB3 == 0))?1:0);
  4809                           
  4810                           ;incstack = 0
  4811   0000D2  0E01               	movlw	1
  4812   0000D4  6E59               	movwf	_HiHaTecla$840^0,c
  4813   0000D6  BA81               	btfsc	129,5,c	;volatile
  4814   0000D8  A081               	btfss	129,0,c	;volatile
  4815   0000DA  D004               	goto	l4284
  4816   0000DC  B281               	btfsc	129,1,c	;volatile
  4817   0000DE  A681               	btfss	129,3,c	;volatile
  4818   0000E0  D001               	goto	l4284
  4819   0000E2  6A59               	clrf	_HiHaTecla$840^0,c
  4820   0000E4                     l4284:
  4821   0000E4  5059               	movf	_HiHaTecla$840^0,w,c
  4822   0000E6  0012               	return		;funcret
  4823   0000E8                     __end_of_HiHaTecla:
  4824                           	callstack 0
  4825                           
  4826 ;; *************** function _ListAccesPoints *****************
  4827 ;; Defined at:
  4828 ;;		line 239 in file "EQM.c"
  4829 ;; Parameters:    Size  Location     Type
  4830 ;;		None
  4831 ;; Auto vars:     Size  Location     Type
  4832 ;;		None
  4833 ;; Return value:  Size  Location     Type
  4834 ;;                  1    wreg      unsigned char 
  4835 ;; Registers used:
  4836 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4837 ;; Tracked objects:
  4838 ;;		On entry : 0/0
  4839 ;;		On exit  : 0/0
  4840 ;;		Unchanged: 0/0
  4841 ;; Data sizes:     COMRAM   BANK0   BANK1
  4842 ;;      Params:         0       0       0
  4843 ;;      Locals:         0       0       0
  4844 ;;      Temps:          0       0       0
  4845 ;;      Totals:         0       0       0
  4846 ;;Total ram usage:        0 bytes
  4847 ;; Hardware stack levels used: 1
  4848 ;; Hardware stack levels required when called: 7
  4849 ;; This function calls:
  4850 ;;		_LcPutString
  4851 ;;		_MotorCOM
  4852 ;;		_SIO_GetChar
  4853 ;;		_SIO_RXAvail
  4854 ;; This function is called by:
  4855 ;;		_MotorEQM
  4856 ;; This function uses a non-reentrant model
  4857 ;;
  4858                           
  4859                           	psect	text29
  4860   001DD2                     __ptext29:
  4861                           	callstack 0
  4862   001DD2                     _ListAccesPoints:
  4863                           	callstack 22
  4864                           
  4865                           ;EQM.c: 241:  switch(state_option) {
  4866                           
  4867                           ;incstack = 0
  4868   001DD2  D01E               	goto	l4770
  4869   001DD4                     l4736:
  4870                           
  4871                           ;EQM.c: 243:             msgToLCD =(char*)"SCANNING...\0";
  4872   001DD4  0E44               	movlw	low STR_7
  4873                           
  4874                           ;EQM.c: 244:             if(LcPutString(msgToLCD) == 2){
  4875   001DD6  EC93  F00E         	call	PL28	;call to abstracted procedure
  4876   001DDA  EC90  F002         	call	PL26	;call to abstracted procedure
  4877   001DDE  ECC9  F00D         	call	_LcPutString	;wreg free
  4878   001DE2  0A02               	xorlw	2
  4879   001DE4  A4D8               	btfss	status,2,c
  4880   001DE6  0C00               	retlw	0
  4881   001DE8                     u3960:
  4882                           
  4883                           ;EQM.c: 245:                 state_option++;
  4884   001DE8  2A2B               	incf	_state_option^0,f,c
  4885                           
  4886                           ;EQM.c: 247:             return 0;
  4887   001DEA  0C00               	retlw	0
  4888   001DEC                     l4746:
  4889                           
  4890                           ;EQM.c: 251:             if(MotorCOM("AT+CWLAP\r\n")==3) {
  4891   001DEC  0E76               	movlw	low STR_8
  4892   001DEE  ECAE  F004         	call	PL16	;call to abstracted procedure
  4893   001DF2  EC7A  F00B         	call	_MotorCOM	;wreg free
  4894   001DF6  0A03               	xorlw	3
  4895   001DF8  E0F7               	bz	u3960
  4896   001DFA  0C00               	retlw	0
  4897   001DFC                     l4754:
  4898                           
  4899                           ;EQM.c: 257:             if(SIO_RXAvail()==1){
  4900   001DFC  ECC2  F000         	call	_SIO_RXAvail	;wreg free
  4901   001E00  06E8               	decf	wreg,f,c
  4902   001E02  A4D8               	btfss	status,2,c
  4903   001E04  0C00               	retlw	0
  4904                           
  4905                           ;EQM.c: 258:                 msg = SIO_GetChar();
  4906   001E06  ECDC  F000         	call	_SIO_GetChar	;wreg free
  4907   001E0A  6E2E               	movwf	_msg^0,c
  4908                           
  4909                           ;EQM.c: 259:                 state_option=0;
  4910   001E0C  6A2B               	clrf	_state_option^0,c
  4911                           
  4912                           ;EQM.c: 260:                 return 1;
  4913   001E0E  0C01               	retlw	1
  4914   001E10                     l4770:
  4915   001E10  502B               	movf	_state_option^0,w,c
  4916                           
  4917                           ; Switch size 1, requested type "space"
  4918                           ; Number of cases is 3, Range of values is 0 to 2
  4919                           ; switch strategies available:
  4920                           ; Name         Instructions Cycles
  4921                           ; simple_byte           10     6 (average)
  4922                           ;	Chosen strategy is simple_byte
  4923   001E12  E0E0               	bz	l4736
  4924   001E14  0A01               	xorlw	1	; case 1
  4925   001E16  E0EA               	bz	l4746
  4926   001E18  0A03               	xorlw	3	; case 2
  4927   001E1A  E0F0               	bz	l4754
  4928   001E1C  0012               	return		;funcret
  4929   001E1E                     __end_of_ListAccesPoints:
  4930                           	callstack 0
  4931                           
  4932 ;; *************** function _EnterChatMode *****************
  4933 ;; Defined at:
  4934 ;;		line 337 in file "EQM.c"
  4935 ;; Parameters:    Size  Location     Type
  4936 ;;		None
  4937 ;; Auto vars:     Size  Location     Type
  4938 ;;		None
  4939 ;; Return value:  Size  Location     Type
  4940 ;;                  1    wreg      unsigned char 
  4941 ;; Registers used:
  4942 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4943 ;; Tracked objects:
  4944 ;;		On entry : 0/0
  4945 ;;		On exit  : 0/0
  4946 ;;		Unchanged: 0/0
  4947 ;; Data sizes:     COMRAM   BANK0   BANK1
  4948 ;;      Params:         0       0       0
  4949 ;;      Locals:         0       0       0
  4950 ;;      Temps:          4       0       0
  4951 ;;      Totals:         4       0       0
  4952 ;;Total ram usage:        4 bytes
  4953 ;; Hardware stack levels used: 1
  4954 ;; Hardware stack levels required when called: 8
  4955 ;; This function calls:
  4956 ;;		_ConfWIFI
  4957 ;;		_GetEND
  4958 ;;		_GetFlag
  4959 ;;		_GetRxMSG
  4960 ;;		_GetTecla
  4961 ;;		_LcClear
  4962 ;;		_LcGotoXY
  4963 ;;		_LcPutString
  4964 ;;		_MotorCOM
  4965 ;;		_SIO_GetChar
  4966 ;;		_SIO_PutChar
  4967 ;;		_SIO_RXAvail
  4968 ;;		_SetMSG
  4969 ;;		_ShowConnStatus
  4970 ;;		_StartRead
  4971 ;;		_TI_GetTics
  4972 ;;		_TI_ResetTics
  4973 ;;		_ValorsState
  4974 ;;		_getIND
  4975 ;;		_getMSG
  4976 ;; This function is called by:
  4977 ;;		_MotorEQM
  4978 ;; This function uses a non-reentrant model
  4979 ;;
  4980                           
  4981                           	psect	text30
  4982   000774                     __ptext30:
  4983                           	callstack 0
  4984   000774                     _EnterChatMode:
  4985                           	callstack 21
  4986                           
  4987                           ;EQM.c: 339:  switch(state4) {
  4988                           
  4989                           ;incstack = 0
  4990   000774  D0CE               	goto	l5008
  4991   000776                     l4826:
  4992                           
  4993                           ;EQM.c: 341:             LcClear();
  4994   000776  EC74  F000         	call	_LcClear	;wreg free
  4995                           
  4996                           ;EQM.c: 342:             LcGotoXY(0,0);
  4997   00077A  0E00               	movlw	0
  4998   00077C  6A67               	clrf	LcGotoXY@Row^0,c
  4999   00077E  ECD0  F00B         	call	_LcGotoXY
  5000                           
  5001                           ;EQM.c: 343:             StartRead(10);
  5002   000782  0E0A               	movlw	10
  5003   000784  EC0B  F000         	call	_StartRead
  5004   000788                     l4830:
  5005                           
  5006                           ;EQM.c: 344:             state4++;
  5007   000788  2A2A               	incf	_state4^0,f,c
  5008                           
  5009                           ;EQM.c: 345:             return 0;
  5010   00078A  0C00               	retlw	0
  5011   00078C                     l4836:
  5012                           
  5013                           ;EQM.c: 347:             if (ValorsState()==0) {
  5014   00078C  ECDA  F000         	call	_ValorsState	;wreg free
  5015   000790  0900               	iorlw	0
  5016   000792  A4D8               	btfss	status,2,c
  5017   000794  0C00               	retlw	0
  5018                           
  5019                           ;EQM.c: 348:                 if(GetTecla()=='*'){
  5020   000796  EC33  F00F         	call	_GetTecla	;wreg free
  5021   00079A  0A2A               	xorlw	42
  5022   00079C  E102               	bnz	l4846
  5023   00079E                     u4030:
  5024                           
  5025                           ;EQM.c: 349:                     state4 = 0;
  5026   00079E  6A2A               	clrf	_state4^0,c
  5027                           
  5028                           ;EQM.c: 350:                     return 1;
  5029   0007A0  0C01               	retlw	1
  5030   0007A2                     l4846:
  5031                           
  5032                           ;EQM.c: 352:                 state_option=1;
  5033   0007A2  0E01               	movlw	1
  5034   0007A4  6E2B               	movwf	_state_option^0,c
  5035   0007A6  D7F0               	goto	l4830
  5036   0007A8                     l4854:
  5037                           
  5038                           ;EQM.c: 357:             if (ShowConnStatus()==1){
  5039   0007A8  EC67  F00E         	call	_ShowConnStatus	;wreg free
  5040   0007AC  06E8               	decf	wreg,f,c
  5041   0007AE  A4D8               	btfss	status,2,c
  5042   0007B0  0C00               	retlw	0
  5043                           
  5044                           ;EQM.c: 358:                 if (statusSTATE==1){
  5045   0007B2  0420               	decf	_statusSTATE^0,w,c
  5046   0007B4  E103               	bnz	l4860
  5047   0007B6                     u4050:
  5048                           
  5049                           ;EQM.c: 359:                     state4=6;
  5050   0007B6  0E06               	movlw	6
  5051   0007B8  6E2A               	movwf	_state4^0,c
  5052                           
  5053                           ;EQM.c: 360:                 } else {
  5054   0007BA  0C00               	retlw	0
  5055   0007BC                     l4860:
  5056                           
  5057                           ;EQM.c: 361:                     state4++;
  5058   0007BC  2A2A               	incf	_state4^0,f,c
  5059                           
  5060                           ;EQM.c: 362:                     state_option=7;
  5061   0007BE  0E07               	movlw	7
  5062   0007C0  6E2B               	movwf	_state_option^0,c
  5063                           
  5064                           ;EQM.c: 363:                     Opt4=1;
  5065   0007C2  0E01               	movlw	1
  5066   0007C4  6E27               	movwf	_Opt4^0,c
  5067   0007C6  0C00               	retlw	0
  5068   0007C8                     l4870:
  5069                           
  5070                           ;EQM.c: 368:             if(ConfWIFI()==1) {
  5071   0007C8  EC57  F001         	call	_ConfWIFI	;wreg free
  5072   0007CC  06E8               	decf	wreg,f,c
  5073   0007CE  A4D8               	btfss	status,2,c
  5074   0007D0  0C00               	retlw	0
  5075                           
  5076                           ;EQM.c: 369:                 if (wifiSTATE==1){
  5077   0007D2  0421               	decf	_wifiSTATE^0,w,c
  5078   0007D4  E0F0               	bz	u4050
  5079   0007D6  D7D8               	goto	l4830
  5080   0007D8                     l4882:
  5081                           
  5082                           ;EQM.c: 377:             if(LcPutString("ERROR...F")==2){
  5083   0007D8  0E8C               	movlw	low STR_12
  5084   0007DA  6E70               	movwf	LcPutString@s^0,c
  5085   0007DC  EC90  F002         	call	PL26	;call to abstracted procedure
  5086   0007E0  ECC9  F00D         	call	_LcPutString	;wreg free
  5087   0007E4  0A02               	xorlw	2
  5088   0007E6  A4D8               	btfss	status,2,c
  5089   0007E8  0C00               	retlw	0
  5090                           
  5091                           ;EQM.c: 378:                 TI_ResetTics(timer);
  5092   0007EA  5052               	movf	_timer@EQM$F1360^0,w,c
  5093   0007EC  EC1B  F000         	call	_TI_ResetTics
  5094   0007F0  D7CB               	goto	l4830
  5095   0007F2                     l4892:
  5096                           
  5097                           ;EQM.c: 383:             if(TI_GetTics(timer)>temps){
  5098   0007F2  5052               	movf	_timer@EQM$F1360^0,w,c
  5099   0007F4  ECC1  F00E         	call	_TI_GetTics
  5100   0007F8  505C               	movf	(?_TI_GetTics+3)^0,w,c
  5101   0007FA  105B               	iorwf	(?_TI_GetTics+2)^0,w,c
  5102   0007FC  E104               	bnz	u4090
  5103   0007FE  0EE9               	movlw	233
  5104   000800  D8B9               	call	PL94	;call to abstracted procedure
  5105   000802  A0D8               	btfss	status,0,c
  5106   000804  0C00               	retlw	0
  5107   000806                     u4090:
  5108                           
  5109                           ;EQM.c: 384:                 LcClear();
  5110   000806  EC74  F000         	call	_LcClear	;wreg free
  5111                           
  5112                           ;EQM.c: 385:                 LcGotoXY(0,0);
  5113   00080A  0E00               	movlw	0
  5114   00080C  6A67               	clrf	LcGotoXY@Row^0,c
  5115   00080E  ECD0  F00B         	call	_LcGotoXY
  5116   000812  D7C5               	goto	u4030
  5117   000814                     l4906:
  5118                           
  5119                           ;EQM.c: 391:             if(MotorCOM("AT+CIPSEND=\0")==3){
  5120   000814  0E51               	movlw	low STR_13
  5121   000816  D8A2               	call	PL16	;call to abstracted procedure
  5122   000818  EC7A  F00B         	call	_MotorCOM	;wreg free
  5123   00081C  0A03               	xorlw	3
  5124   00081E  A4D8               	btfss	status,2,c
  5125   000820  0C00               	retlw	0
  5126                           
  5127                           ;EQM.c: 395:                 index = getIND() + 6;
  5128   000822  ECD8  F000         	call	_getIND	;wreg free
  5129   000826  0F06               	addlw	6
  5130   000828  6E2F               	movwf	_index@EQM$F1361^0,c
  5131                           
  5132                           ;EQM.c: 396:                 if (index > 9){
  5133   00082A  0E09               	movlw	9
  5134   00082C  642F               	cpfsgt	_index@EQM$F1361^0,c
  5135   00082E  D7AC               	goto	l4830
  5136                           
  5137                           ;EQM.c: 397:                     SetMSG('1');
  5138   000830  0E31               	movlw	49
  5139   000832  ECA3  F000         	call	_SetMSG
  5140                           
  5141                           ;EQM.c: 398:                     index= index - 10;
  5142   000836  0EF6               	movlw	246
  5143   000838  262F               	addwf	_index@EQM$F1361^0,f,c
  5144   00083A  D7A6               	goto	l4830
  5145   00083C                     l4922:
  5146                           
  5147                           ;EQM.c: 404:             if (GetEND()==1){
  5148   00083C  ECDE  F000         	call	_GetEND	;wreg free
  5149   000840  06E8               	decf	wreg,f,c
  5150   000842  A4D8               	btfss	status,2,c
  5151   000844  0C00               	retlw	0
  5152                           
  5153                           ;EQM.c: 405:                 SetMSG('0'+index);
  5154   000846  502F               	movf	_index@EQM$F1361^0,w,c
  5155   000848  0F30               	addlw	48
  5156   00084A  ECA3  F000         	call	_SetMSG
  5157   00084E  D79C               	goto	l4830
  5158   000850                     l4932:
  5159                           
  5160                           ;EQM.c: 410:             if (GetEND()==1){
  5161   000850  ECDE  F000         	call	_GetEND	;wreg free
  5162   000854  06E8               	decf	wreg,f,c
  5163   000856                     L10:
  5164   000856  E098               	bz	l4830
  5165   000858  0C00               	retlw	0
  5166   00085A                     l4940:
  5167                           
  5168                           ;EQM.c: 415:             if (MotorCOM("\r\n\0")==3){
  5169   00085A  0EA8               	movlw	low STR_6
  5170   00085C  D87F               	call	PL16	;call to abstracted procedure
  5171   00085E  EC7A  F00B         	call	_MotorCOM	;wreg free
  5172   000862  0A03               	xorlw	3
  5173   000864  D7F8               	goto	L10
  5174   000866                     l4948:
  5175                           
  5176                           ;EQM.c: 420:             if (GetFlag()==1 && GetRxMSG() == '>'){
  5177   000866  ECE0  F000         	call	_GetFlag	;wreg free
  5178   00086A  06E8               	decf	wreg,f,c
  5179   00086C  A4D8               	btfss	status,2,c
  5180   00086E  0C00               	retlw	0
  5181   000870  ECC5  F000         	call	_GetRxMSG	;wreg free
  5182   000874  0A3E               	xorlw	62
  5183   000876  A4D8               	btfss	status,2,c
  5184   000878  0C00               	retlw	0
  5185                           
  5186                           ;EQM.c: 421:                 index=0;
  5187   00087A  6A2F               	clrf	_index@EQM$F1361^0,c
  5188   00087C  D785               	goto	l4830
  5189   00087E                     l4960:
  5190                           
  5191                           ;EQM.c: 426:             if (GetEND()==1){
  5192   00087E  ECDE  F000         	call	_GetEND	;wreg free
  5193   000882  06E8               	decf	wreg,f,c
  5194   000884  A4D8               	btfss	status,2,c
  5195   000886  0C00               	retlw	0
  5196                           
  5197                           ;EQM.c: 427:                 if(index < 3){
  5198   000888  0E03               	movlw	3
  5199   00088A  602F               	cpfslt	_index@EQM$F1361^0,c
  5200   00088C  D006               	goto	l4966
  5201                           
  5202                           ;EQM.c: 429:                     SetMSG(user[index]);
  5203   00088E  D86C               	call	PL52	;call to abstracted procedure
  5204   000890  ECA3  F000         	call	_SetMSG
  5205                           
  5206                           ;EQM.c: 430:                     SIO_PutChar(user[index]);
  5207   000894  D869               	call	PL52	;call to abstracted procedure
  5208   000896  ECB5  F000         	call	_SIO_PutChar
  5209   00089A                     l4966:
  5210                           
  5211                           ;EQM.c: 432:                 if (index ==3){
  5212   00089A  0E03               	movlw	3
  5213   00089C  182F               	xorwf	_index@EQM$F1361^0,w,c
  5214   00089E  E106               	bnz	l4972
  5215                           
  5216                           ;EQM.c: 433:                     SetMSG(';');
  5217   0008A0  0E3B               	movlw	59
  5218   0008A2  ECA3  F000         	call	_SetMSG
  5219                           
  5220                           ;EQM.c: 434:                     SIO_PutChar(';');
  5221   0008A6  0E3B               	movlw	59
  5222   0008A8  ECB5  F000         	call	_SIO_PutChar
  5223   0008AC                     l4972:
  5224                           
  5225                           ;EQM.c: 437:                 if(3 < index){
  5226   0008AC  0E03               	movlw	3
  5227   0008AE  642F               	cpfsgt	_index@EQM$F1361^0,c
  5228   0008B0  D01D               	goto	l835
  5229                           
  5230                           ;EQM.c: 439:                     SetMSG(getMSG(index-4));
  5231   0008B2  502F               	movf	_index@EQM$F1361^0,w,c
  5232   0008B4  0FFC               	addlw	252
  5233   0008B6  EC9C  F000         	call	_getMSG
  5234   0008BA  ECA3  F000         	call	_SetMSG
  5235                           
  5236                           ;EQM.c: 440:                     SIO_PutChar(getMSG(index-4));
  5237   0008BE  502F               	movf	_index@EQM$F1361^0,w,c
  5238   0008C0  0FFC               	addlw	252
  5239   0008C2  EC9C  F000         	call	_getMSG
  5240   0008C6  ECB5  F000         	call	_SIO_PutChar
  5241                           
  5242                           ;EQM.c: 441:                     if(index-3 == getIND()){
  5243   0008CA  ECD8  F000         	call	_getIND	;wreg free
  5244   0008CE  6E72               	movwf	??_EnterChatMode^0,c
  5245   0008D0  6A73               	clrf	(??_EnterChatMode+1)^0,c
  5246   0008D2  0EFD               	movlw	253
  5247   0008D4  242F               	addwf	_index@EQM$F1361^0,w,c
  5248   0008D6  6E74               	movwf	(??_EnterChatMode+2)^0,c
  5249   0008D8  6A75               	clrf	(??_EnterChatMode+3)^0,c
  5250   0008DA  0EFF               	movlw	255
  5251   0008DC  2275               	addwfc	(??_EnterChatMode+3)^0,f,c
  5252   0008DE  5072               	movf	??_EnterChatMode^0,w,c
  5253   0008E0  1874               	xorwf	(??_EnterChatMode+2)^0,w,c
  5254   0008E2  E104               	bnz	l835
  5255   0008E4  5073               	movf	(??_EnterChatMode+1)^0,w,c
  5256   0008E6  1875               	xorwf	(??_EnterChatMode+3)^0,w,c
  5257   0008E8  E101               	bnz	l835
  5258                           
  5259                           ;EQM.c: 443:                         state4++;
  5260   0008EA  2A2A               	incf	_state4^0,f,c
  5261   0008EC                     l835:
  5262                           
  5263                           ;EQM.c: 447:                 index++;
  5264   0008EC  2A2F               	incf	_index@EQM$F1361^0,f,c
  5265   0008EE  0C00               	retlw	0
  5266   0008F0                     l4984:
  5267                           
  5268                           ;EQM.c: 451:             if (MotorCOM("\r\n\0")==3){
  5269   0008F0  0EA8               	movlw	low STR_6
  5270   0008F2  D834               	call	PL16	;call to abstracted procedure
  5271   0008F4  EC7A  F00B         	call	_MotorCOM	;wreg free
  5272   0008F8  D7B4               	goto	L11
  5273   0008FA                     l4992:
  5274                           
  5275                           ;EQM.c: 465:             if(SIO_RXAvail()==1){
  5276   0008FA  ECC2  F000         	call	_SIO_RXAvail	;wreg free
  5277   0008FE  06E8               	decf	wreg,f,c
  5278   000900  A4D8               	btfss	status,2,c
  5279   000902  0C00               	retlw	0
  5280                           
  5281                           ;EQM.c: 466:                 state4=0;
  5282   000904  6A2A               	clrf	_state4^0,c
  5283                           
  5284                           ;EQM.c: 467:                 if(SIO_GetChar()!=0x06){
  5285   000906  ECDC  F000         	call	_SIO_GetChar	;wreg free
  5286   00090A  0A06               	xorlw	6
  5287   00090C  B4D8               	btfsc	status,2,c
  5288   00090E  0C00               	retlw	0
  5289   000910  0C01               	retlw	1
  5290   000912                     l5008:
  5291   000912  502A               	movf	_state4^0,w,c
  5292                           
  5293                           ; Switch size 1, requested type "space"
  5294                           ; Number of cases is 14, Range of values is 0 to 13
  5295                           ; switch strategies available:
  5296                           ; Name         Instructions Cycles
  5297                           ; simple_byte           43    22 (average)
  5298                           ;	Chosen strategy is simple_byte
  5299   000914  E101 D72F          	bz	l4826
  5300   000918  0A01               	xorlw	1	; case 1
  5301   00091A  E101 D737          	bz	l4836
  5302   00091E  0A03               	xorlw	3	; case 2
  5303   000920  E101 D742          	bz	l4854
  5304   000924  0A01               	xorlw	1	; case 3
  5305   000926  E101 D74F          	bz	l4870
  5306   00092A  0A07               	xorlw	7	; case 4
  5307   00092C  E101 D754          	bz	l4882
  5308   000930  0A01               	xorlw	1	; case 5
  5309   000932  E101 D75E          	bz	l4892
  5310   000936  0A03               	xorlw	3	; case 6
  5311   000938  E101 D76C          	bz	l4906
  5312   00093C  0A01               	xorlw	1	; case 7
  5313   00093E  E101 D77D          	bz	l4922
  5314   000942  0A0F               	xorlw	15	; case 8
  5315   000944  E085               	bz	l4932
  5316   000946  0A01               	xorlw	1	; case 9
  5317   000948  E088               	bz	l4940
  5318   00094A  0A03               	xorlw	3	; case 10
  5319   00094C  E08C               	bz	l4948
  5320   00094E  0A01               	xorlw	1	; case 11
  5321   000950  E096               	bz	l4960
  5322   000952  0A07               	xorlw	7	; case 12
  5323   000954  E0CD               	bz	l4984
  5324   000956  0A01               	xorlw	1	; case 13
  5325   000958  E0D0               	bz	l4992
  5326   00095A  0012               	return		;funcret
  5327   00095C                     __end_of_EnterChatMode:
  5328                           	callstack 0
  5329   00095C                     PL16:
  5330                           	callstack 21
  5331   00095C  6E5A               	movwf	MotorCOM@new_msgC^0,c
  5332   00095E  505A               	movf	MotorCOM@new_msgC^0,w,c
  5333   000960  A4D8               	btfss	status,2,c
  5334   000962  0E02               	movlw	high __smallconst
  5335   000964  6E5B               	movwf	(MotorCOM@new_msgC+1)^0,c
  5336   000966  0012               	return	
  5337   000968                     __end_ofPL16:
  5338                           	callstack 0
  5339   000968                     PL52:
  5340                           	callstack 21
  5341   000968  502F               	movf	_index@EQM$F1361^0,w,c
  5342   00096A  0F4D               	addlw	low _user
  5343   00096C  6ED9               	movwf	fsr2l,c
  5344   00096E  6ADA               	clrf	fsr2h,c
  5345   000970  50DF               	movf	indf2,w,c
  5346   000972  0012               	return	
  5347   000974                     __end_ofPL52:
  5348                           	callstack 0
  5349   000974                     PL94:
  5350                           	callstack 21
  5351   000974  5C59               	subwf	?_TI_GetTics^0,w,c
  5352   000976  0E03               	movlw	3
  5353   000978  585A               	subwfb	(?_TI_GetTics+1)^0,w,c
  5354   00097A  0012               	return	
  5355   00097C                     __end_ofPL94:
  5356                           	callstack 0
  5357                           
  5358 ;; *************** function _getIND *****************
  5359 ;; Defined at:
  5360 ;;		line 76 in file "valorsteclat.c"
  5361 ;; Parameters:    Size  Location     Type
  5362 ;;		None
  5363 ;; Auto vars:     Size  Location     Type
  5364 ;;		None
  5365 ;; Return value:  Size  Location     Type
  5366 ;;                  1    wreg      unsigned char 
  5367 ;; Registers used:
  5368 ;;		wreg, status,2
  5369 ;; Tracked objects:
  5370 ;;		On entry : 0/0
  5371 ;;		On exit  : 0/0
  5372 ;;		Unchanged: 0/0
  5373 ;; Data sizes:     COMRAM   BANK0   BANK1
  5374 ;;      Params:         0       0       0
  5375 ;;      Locals:         0       0       0
  5376 ;;      Temps:          0       0       0
  5377 ;;      Totals:         0       0       0
  5378 ;;Total ram usage:        0 bytes
  5379 ;; Hardware stack levels used: 1
  5380 ;; Hardware stack levels required when called: 2
  5381 ;; This function calls:
  5382 ;;		Nothing
  5383 ;; This function is called by:
  5384 ;;		_EnterChatMode
  5385 ;; This function uses a non-reentrant model
  5386 ;;
  5387                           
  5388                           	psect	text31
  5389   0001B0                     __ptext31:
  5390                           	callstack 0
  5391   0001B0                     _getIND:
  5392                           	callstack 26
  5393                           
  5394                           ;valorsteclat.c: 77:     return numChars;
  5395                           
  5396                           ;incstack = 0
  5397   0001B0  5040               	movf	_numChars^0,w,c
  5398   0001B2  0012               	return		;funcret
  5399   0001B4                     __end_of_getIND:
  5400                           	callstack 0
  5401                           
  5402 ;; *************** function _ShowConnStatus *****************
  5403 ;; Defined at:
  5404 ;;		line 266 in file "EQM.c"
  5405 ;; Parameters:    Size  Location     Type
  5406 ;;		None
  5407 ;; Auto vars:     Size  Location     Type
  5408 ;;		None
  5409 ;; Return value:  Size  Location     Type
  5410 ;;                  1    wreg      unsigned char 
  5411 ;; Registers used:
  5412 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5413 ;; Tracked objects:
  5414 ;;		On entry : 0/0
  5415 ;;		On exit  : 0/0
  5416 ;;		Unchanged: 0/0
  5417 ;; Data sizes:     COMRAM   BANK0   BANK1
  5418 ;;      Params:         0       0       0
  5419 ;;      Locals:         0       0       0
  5420 ;;      Temps:          0       0       0
  5421 ;;      Totals:         0       0       0
  5422 ;;Total ram usage:        0 bytes
  5423 ;; Hardware stack levels used: 1
  5424 ;; Hardware stack levels required when called: 7
  5425 ;; This function calls:
  5426 ;;		_LcPutString
  5427 ;;		_MotorCOM
  5428 ;;		_SIO_GetChar
  5429 ;;		_SIO_RXAvail
  5430 ;; This function is called by:
  5431 ;;		_EnterChatMode
  5432 ;;		_MotorEQM
  5433 ;; This function uses a non-reentrant model
  5434 ;;
  5435                           
  5436                           	psect	text32
  5437   001CCE                     __ptext32:
  5438                           	callstack 0
  5439   001CCE                     _ShowConnStatus:
  5440                           	callstack 22
  5441                           
  5442                           ;EQM.c: 268:  switch(state_option) {
  5443                           
  5444                           ;incstack = 0
  5445   001CCE  D024               	goto	l4620
  5446   001CD0                     l4584:
  5447                           
  5448                           ;EQM.c: 270:             msgToLCD =(char*)"SCANNING...\0";
  5449   001CD0  0E44               	movlw	low STR_7
  5450                           
  5451                           ;EQM.c: 271:             if(LcPutString(msgToLCD)==2) {
  5452   001CD2  D829               	call	PL28	;call to abstracted procedure
  5453   001CD4  EC90  F002         	call	PL26	;call to abstracted procedure
  5454   001CD8  ECC9  F00D         	call	_LcPutString	;wreg free
  5455   001CDC  0A02               	xorlw	2
  5456   001CDE  A4D8               	btfss	status,2,c
  5457   001CE0  0C00               	retlw	0
  5458   001CE2                     u3780:
  5459                           
  5460                           ;EQM.c: 273:                 state_option++;
  5461   001CE2  2A2B               	incf	_state_option^0,f,c
  5462                           
  5463                           ;EQM.c: 275:             return 0;
  5464   001CE4  0C00               	retlw	0
  5465   001CE6                     l4594:
  5466                           
  5467                           ;EQM.c: 284:             if(MotorCOM("AT+CIPSTATUS\r\n")==3){
  5468   001CE6  0E27               	movlw	low STR_10
  5469   001CE8  ECAE  F004         	call	PL16	;call to abstracted procedure
  5470   001CEC  EC7A  F00B         	call	_MotorCOM	;wreg free
  5471   001CF0  0A03               	xorlw	3
  5472   001CF2  E0F7               	bz	u3780
  5473   001CF4  0C00               	retlw	0
  5474   001CF6                     l4602:
  5475                           
  5476                           ;EQM.c: 289:             if(SIO_RXAvail()==1){
  5477   001CF6  ECC2  F000         	call	_SIO_RXAvail	;wreg free
  5478   001CFA  06E8               	decf	wreg,f,c
  5479   001CFC  A4D8               	btfss	status,2,c
  5480   001CFE  0C00               	retlw	0
  5481                           
  5482                           ;EQM.c: 290:                 msg = SIO_GetChar();
  5483   001D00  ECDC  F000         	call	_SIO_GetChar	;wreg free
  5484   001D04  6E2E               	movwf	_msg^0,c
  5485                           
  5486                           ;EQM.c: 291:                 if(msg == 0x06){
  5487   001D06  0E06               	movlw	6
  5488   001D08  182E               	xorwf	_msg^0,w,c
  5489   001D0A  E103               	bnz	l784
  5490                           
  5491                           ;EQM.c: 292:                     statusSTATE=1;
  5492   001D0C  0E01               	movlw	1
  5493   001D0E  6E20               	movwf	_statusSTATE^0,c
  5494                           
  5495                           ;EQM.c: 293:                 } else {
  5496   001D10  D001               	goto	l785
  5497   001D12                     l784:
  5498                           
  5499                           ;EQM.c: 294:                     statusSTATE=0;
  5500   001D12  6A20               	clrf	_statusSTATE^0,c
  5501   001D14                     l785:
  5502                           
  5503                           ;EQM.c: 296:                 state_option = 0;
  5504   001D14  6A2B               	clrf	_state_option^0,c
  5505                           
  5506                           ;EQM.c: 297:                 return 1;
  5507   001D16  0C01               	retlw	1
  5508   001D18                     l4620:
  5509   001D18  502B               	movf	_state_option^0,w,c
  5510                           
  5511                           ; Switch size 1, requested type "space"
  5512                           ; Number of cases is 3, Range of values is 0 to 2
  5513                           ; switch strategies available:
  5514                           ; Name         Instructions Cycles
  5515                           ; simple_byte           10     6 (average)
  5516                           ;	Chosen strategy is simple_byte
  5517   001D1A  E0DA               	bz	l4584
  5518   001D1C  0A01               	xorlw	1	; case 1
  5519   001D1E  E0E3               	bz	l4594
  5520   001D20  0A03               	xorlw	3	; case 2
  5521   001D22  E0E9               	bz	l4602
  5522   001D24  0012               	return		;funcret
  5523   001D26                     __end_of_ShowConnStatus:
  5524                           	callstack 0
  5525   001D26                     PL28:
  5526                           	callstack 22
  5527   001D26  6E22               	movwf	_msgToLCD^0,c
  5528   001D28  C022  F070         	movff	_msgToLCD,LcPutString@s
  5529   001D2C  0012               	return	
  5530   001D2E                     __end_ofPL28:
  5531                           	callstack 0
  5532                           
  5533 ;; *************** function _SIO_PutChar *****************
  5534 ;; Defined at:
  5535 ;;		line 45 in file "sio.c"
  5536 ;; Parameters:    Size  Location     Type
  5537 ;;  Valor           1    wreg     unsigned char 
  5538 ;; Auto vars:     Size  Location     Type
  5539 ;;  Valor           1    0[COMRAM] unsigned char 
  5540 ;; Return value:  Size  Location     Type
  5541 ;;                  1    wreg      void 
  5542 ;; Registers used:
  5543 ;;		wreg
  5544 ;; Tracked objects:
  5545 ;;		On entry : 0/0
  5546 ;;		On exit  : 0/0
  5547 ;;		Unchanged: 0/0
  5548 ;; Data sizes:     COMRAM   BANK0   BANK1
  5549 ;;      Params:         0       0       0
  5550 ;;      Locals:         1       0       0
  5551 ;;      Temps:          0       0       0
  5552 ;;      Totals:         1       0       0
  5553 ;;Total ram usage:        1 bytes
  5554 ;; Hardware stack levels used: 1
  5555 ;; Hardware stack levels required when called: 2
  5556 ;; This function calls:
  5557 ;;		Nothing
  5558 ;; This function is called by:
  5559 ;;		_MotorRX
  5560 ;;		_EnterChatMode
  5561 ;;		_ListLastMessages
  5562 ;;		_ReciveMSG
  5563 ;; This function uses a non-reentrant model
  5564 ;;
  5565                           
  5566                           	psect	text33
  5567   00016A                     __ptext33:
  5568                           	callstack 0
  5569   00016A                     _SIO_PutChar:
  5570                           	callstack 27
  5571                           
  5572                           ;incstack = 0
  5573                           ;SIO_PutChar@Valor stored from wreg
  5574   00016A  6E59               	movwf	SIO_PutChar@Valor^0,c
  5575                           
  5576                           ;sio.c: 48:     TXREG=Valor;
  5577   00016C  C059  FFAD         	movff	SIO_PutChar@Valor,4013	;volatile
  5578   000170  0012               	return		;funcret
  5579   000172                     __end_of_SIO_PutChar:
  5580                           	callstack 0
  5581                           
  5582 ;; *************** function _GetTecla *****************
  5583 ;; Defined at:
  5584 ;;		line 47 in file "teclat.c"
  5585 ;; Parameters:    Size  Location     Type
  5586 ;;		None
  5587 ;; Auto vars:     Size  Location     Type
  5588 ;;		None
  5589 ;; Return value:  Size  Location     Type
  5590 ;;                  1    wreg      unsigned char 
  5591 ;; Registers used:
  5592 ;;		wreg, status,2, status,0
  5593 ;; Tracked objects:
  5594 ;;		On entry : 0/0
  5595 ;;		On exit  : 0/0
  5596 ;;		Unchanged: 0/0
  5597 ;; Data sizes:     COMRAM   BANK0   BANK1
  5598 ;;      Params:         0       0       0
  5599 ;;      Locals:         0       0       0
  5600 ;;      Temps:          0       0       0
  5601 ;;      Totals:         0       0       0
  5602 ;;Total ram usage:        0 bytes
  5603 ;; Hardware stack levels used: 1
  5604 ;; Hardware stack levels required when called: 2
  5605 ;; This function calls:
  5606 ;;		Nothing
  5607 ;; This function is called by:
  5608 ;;		_MotorKeyboard
  5609 ;;		_MotorValorsTeclat
  5610 ;;		_EnterChatMode
  5611 ;;		_ListLastMessages
  5612 ;;		_MotorMenu
  5613 ;; This function uses a non-reentrant model
  5614 ;;
  5615                           
  5616                           	psect	text34
  5617   001E66                     __ptext34:
  5618                           	callstack 0
  5619   001E66                     _GetTecla:
  5620                           	callstack 27
  5621                           
  5622                           ;teclat.c: 48:     switch (columna) {
  5623                           
  5624                           ;incstack = 0
  5625   001E66  D01A               	goto	l4266
  5626   001E68                     l229:
  5627                           
  5628                           ;teclat.c: 50:             if(PORTBbits.RB5 == 0) {
  5629   001E68  AA81               	btfss	129,5,c	;volatile
  5630                           
  5631                           ;teclat.c: 52:                 return 1;}
  5632   001E6A  0C01               	retlw	1
  5633                           
  5634                           ;teclat.c: 53:             if(PORTBbits.RB0 == 0) {
  5635   001E6C  A081               	btfss	129,0,c	;volatile
  5636                           
  5637                           ;teclat.c: 55:                 return 4;}
  5638   001E6E  0C04               	retlw	4
  5639                           
  5640                           ;teclat.c: 56:             if(PORTBbits.RB1 == 0) {
  5641   001E70  A281               	btfss	129,1,c	;volatile
  5642                           
  5643                           ;teclat.c: 58:                 return 7;}
  5644   001E72  0C07               	retlw	7
  5645                           
  5646                           ;teclat.c: 59:             if(PORTBbits.RB3 == 0) {
  5647   001E74  B681               	btfsc	129,3,c	;volatile
  5648   001E76  0C00               	retlw	0
  5649                           
  5650                           ;teclat.c: 61:                 return '*';}
  5651   001E78  0C2A               	retlw	42
  5652   001E7A                     l236:
  5653                           
  5654                           ;teclat.c: 64:             if(PORTBbits.RB5 == 0) {
  5655   001E7A  AA81               	btfss	129,5,c	;volatile
  5656                           
  5657                           ;teclat.c: 66:                 return 2;}
  5658   001E7C  0C02               	retlw	2
  5659                           
  5660                           ;teclat.c: 67:             if(PORTBbits.RB0 == 0) {
  5661   001E7E  A081               	btfss	129,0,c	;volatile
  5662                           
  5663                           ;teclat.c: 69:                 return 5;}
  5664   001E80  0C05               	retlw	5
  5665                           
  5666                           ;teclat.c: 70:             if(PORTBbits.RB1 == 0) {
  5667   001E82  A281               	btfss	129,1,c	;volatile
  5668                           
  5669                           ;teclat.c: 72:                 return 8;}
  5670   001E84  0C08               	retlw	8
  5671                           
  5672                           ;teclat.c: 73:             if(PORTBbits.RB3 == 0) {
  5673   001E86  5081               	movf	129,w,c	;volatile
  5674                           
  5675                           ;teclat.c: 75:                 return 0;}
  5676   001E88  0C00               	retlw	0
  5677   001E8A                     l241:
  5678                           
  5679                           ;teclat.c: 78:             if(PORTBbits.RB5 == 0) {
  5680   001E8A  AA81               	btfss	129,5,c	;volatile
  5681                           
  5682                           ;teclat.c: 80:                 return 3;}
  5683   001E8C  0C03               	retlw	3
  5684                           
  5685                           ;teclat.c: 81:             if(PORTBbits.RB0 == 0) {
  5686   001E8E  A081               	btfss	129,0,c	;volatile
  5687                           
  5688                           ;teclat.c: 83:                 return 6;}
  5689   001E90  0C06               	retlw	6
  5690                           
  5691                           ;teclat.c: 84:             if(PORTBbits.RB1 == 0) {
  5692   001E92  A281               	btfss	129,1,c	;volatile
  5693                           
  5694                           ;teclat.c: 86:                 return 9;}
  5695   001E94  0C09               	retlw	9
  5696                           
  5697                           ;teclat.c: 87:             if(PORTBbits.RB3 == 0) {
  5698   001E96  B681               	btfsc	129,3,c	;volatile
  5699   001E98  0C00               	retlw	0
  5700                           
  5701                           ;teclat.c: 89:                 return '#';}
  5702   001E9A  0C23               	retlw	35
  5703   001E9C                     l4266:
  5704   001E9C  5045               	movf	_columna^0,w,c
  5705                           
  5706                           ; Switch size 1, requested type "space"
  5707                           ; Number of cases is 3, Range of values is 0 to 2
  5708                           ; switch strategies available:
  5709                           ; Name         Instructions Cycles
  5710                           ; simple_byte           10     6 (average)
  5711                           ;	Chosen strategy is simple_byte
  5712   001E9E  E0E4               	bz	l229
  5713   001EA0  0A01               	xorlw	1	; case 1
  5714   001EA2  E0EB               	bz	l236
  5715   001EA4  0A03               	xorlw	3	; case 2
  5716   001EA6  A4D8               	btfss	status,2,c
  5717   001EA8  0C00               	retlw	0
  5718   001EAA  D7EF               	goto	l241
  5719   001EAC                     __end_of_GetTecla:
  5720                           	callstack 0
  5721                           
  5722 ;; *************** function _ConfWIFI *****************
  5723 ;; Defined at:
  5724 ;;		line 76 in file "EQM.c"
  5725 ;; Parameters:    Size  Location     Type
  5726 ;;		None
  5727 ;; Auto vars:     Size  Location     Type
  5728 ;;		None
  5729 ;; Return value:  Size  Location     Type
  5730 ;;                  1    wreg      unsigned char 
  5731 ;; Registers used:
  5732 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5733 ;; Tracked objects:
  5734 ;;		On entry : 0/0
  5735 ;;		On exit  : 0/0
  5736 ;;		Unchanged: 0/0
  5737 ;; Data sizes:     COMRAM   BANK0   BANK1
  5738 ;;      Params:         0       0       0
  5739 ;;      Locals:         0       0       0
  5740 ;;      Temps:          0       0       0
  5741 ;;      Totals:         0       0       0
  5742 ;;Total ram usage:        0 bytes
  5743 ;; Hardware stack levels used: 1
  5744 ;; Hardware stack levels required when called: 7
  5745 ;; This function calls:
  5746 ;;		_GetFlag
  5747 ;;		_GetRxMSG
  5748 ;;		_LcClear
  5749 ;;		_LcGotoXY
  5750 ;;		_LcPutString
  5751 ;;		_MotorCOM
  5752 ;;		_SIO_GetChar
  5753 ;;		_SIO_RXAvail
  5754 ;;		_StartRead
  5755 ;;		_TI_GetTics
  5756 ;;		_TI_ResetTics
  5757 ;;		_ValorsState
  5758 ;;		_endMSG
  5759 ;;		_getMSG
  5760 ;;		_startMenu
  5761 ;; This function is called by:
  5762 ;;		_EnterChatMode
  5763 ;;		_MotorEQM
  5764 ;; This function uses a non-reentrant model
  5765 ;;
  5766                           
  5767                           	psect	text35
  5768   0002AE                     __ptext35:
  5769                           	callstack 0
  5770   0002AE                     _ConfWIFI:
  5771                           	callstack 21
  5772                           
  5773                           ;EQM.c: 77:     switch (state_option){
  5774                           
  5775                           ;incstack = 0
  5776   0002AE  D10E               	goto	l4580
  5777   0002B0                     l4344:
  5778                           
  5779                           ;EQM.c: 79:             LcClear();
  5780   0002B0  EC74  F000         	call	_LcClear	;wreg free
  5781                           
  5782                           ;EQM.c: 80:             LcGotoXY(0,0);
  5783   0002B4  0E00               	movlw	0
  5784   0002B6  6A67               	clrf	LcGotoXY@Row^0,c
  5785   0002B8  ECD0  F00B         	call	_LcGotoXY
  5786   0002BC                     l4346:
  5787                           
  5788                           ;EQM.c: 81:             state_option++;
  5789   0002BC  2A2B               	incf	_state_option^0,f,c
  5790                           
  5791                           ;EQM.c: 82:             return 0;
  5792   0002BE  0C00               	retlw	0
  5793   0002C0                     l4352:
  5794                           
  5795                           ;EQM.c: 84:             if (LcPutString("DEST.PORT: ") == 2) {
  5796   0002C0  0E6A               	movlw	low STR_1
  5797   0002C2  6E70               	movwf	LcPutString@s^0,c
  5798   0002C4  D92D               	call	PL26	;call to abstracted procedure
  5799   0002C6  ECC9  F00D         	call	_LcPutString	;wreg free
  5800   0002CA  0A02               	xorlw	2
  5801   0002CC  A4D8               	btfss	status,2,c
  5802   0002CE  0C00               	retlw	0
  5803                           
  5804                           ;EQM.c: 85:                 StartRead(4);
  5805   0002D0  0E04               	movlw	4
  5806   0002D2  EC0B  F000         	call	_StartRead
  5807   0002D6  D7F2               	goto	l4346
  5808   0002D8                     l4362:
  5809                           
  5810                           ;EQM.c: 91:    if (ValorsState()==0) {
  5811   0002D8  ECDA  F000         	call	_ValorsState	;wreg free
  5812   0002DC  0900               	iorlw	0
  5813   0002DE  A4D8               	btfss	status,2,c
  5814   0002E0  0C00               	retlw	0
  5815                           
  5816                           ;EQM.c: 92:                 port[0] = getMSG(0);
  5817   0002E2  0E00               	movlw	0
  5818   0002E4  EC9C  F000         	call	_getMSG
  5819   0002E8  0100               	movlb	0	; () banked
  5820   0002EA  6FC6               	movwf	_port& (0+255),b
  5821                           
  5822                           ;EQM.c: 93:                 port[1] = getMSG(1);
  5823   0002EC  0E01               	movlw	1
  5824   0002EE  EC9C  F000         	call	_getMSG
  5825   0002F2  0100               	movlb	0	; () banked
  5826   0002F4  6FC7               	movwf	(_port+1)& (0+255),b
  5827                           
  5828                           ;EQM.c: 94:                 port[2] = getMSG(2);
  5829   0002F6  0E02               	movlw	2
  5830   0002F8  EC9C  F000         	call	_getMSG
  5831   0002FC  0100               	movlb	0	; () banked
  5832   0002FE  6FC8               	movwf	(_port+2)& (0+255),b
  5833                           
  5834                           ;EQM.c: 95:                 port[3] = getMSG(3);
  5835   000300  0E03               	movlw	3
  5836   000302  EC9C  F000         	call	_getMSG
  5837   000306  0100               	movlb	0	; () banked
  5838   000308  6FC9               	movwf	(_port+3)& (0+255),b
  5839                           
  5840                           ; BSR set to: 0
  5841                           ;EQM.c: 96:                 LcClear();
  5842   00030A  EC74  F000         	call	_LcClear	;wreg free
  5843                           
  5844                           ;EQM.c: 97:                 LcGotoXY(0,0);
  5845   00030E  0E00               	movlw	0
  5846   000310  6A67               	clrf	LcGotoXY@Row^0,c
  5847   000312  ECD0  F00B         	call	_LcGotoXY
  5848   000316  D7D2               	goto	l4346
  5849   000318                     l4376:
  5850                           
  5851                           ;EQM.c: 102:             if (LcPutString("REC.PORT: ") == 2) {
  5852   000318  0E81               	movlw	low STR_2
  5853   00031A  6E70               	movwf	LcPutString@s^0,c
  5854   00031C  D901               	call	PL26	;call to abstracted procedure
  5855   00031E  ECC9  F00D         	call	_LcPutString	;wreg free
  5856   000322  0A02               	xorlw	2
  5857   000324  A4D8               	btfss	status,2,c
  5858   000326  0C00               	retlw	0
  5859                           
  5860                           ;EQM.c: 103:                 StartRead(4);
  5861   000328  0E04               	movlw	4
  5862   00032A  EC0B  F000         	call	_StartRead
  5863   00032E  D7C6               	goto	l4346
  5864   000330                     l4386:
  5865                           
  5866                           ;EQM.c: 108:    if (ValorsState()==0) {
  5867   000330  ECDA  F000         	call	_ValorsState	;wreg free
  5868   000334  0900               	iorlw	0
  5869   000336  A4D8               	btfss	status,2,c
  5870   000338  0C00               	retlw	0
  5871                           
  5872                           ;EQM.c: 109:                 port[5] = getMSG(0);
  5873   00033A  0E00               	movlw	0
  5874   00033C  EC9C  F000         	call	_getMSG
  5875   000340  0100               	movlb	0	; () banked
  5876   000342  6FCB               	movwf	(_port+5)& (0+255),b
  5877                           
  5878                           ;EQM.c: 110:                 port[6] = getMSG(1);
  5879   000344  0E01               	movlw	1
  5880   000346  EC9C  F000         	call	_getMSG
  5881   00034A  0100               	movlb	0	; () banked
  5882   00034C  6FCC               	movwf	(_port+6)& (0+255),b
  5883                           
  5884                           ;EQM.c: 111:                 port[7] = getMSG(2);
  5885   00034E  0E02               	movlw	2
  5886   000350  EC9C  F000         	call	_getMSG
  5887   000354  0100               	movlb	0	; () banked
  5888   000356  6FCD               	movwf	(_port+7)& (0+255),b
  5889                           
  5890                           ;EQM.c: 112:                 port[8] = getMSG(3);
  5891   000358  0E03               	movlw	3
  5892   00035A  EC9C  F000         	call	_getMSG
  5893   00035E  0100               	movlb	0	; () banked
  5894   000360  6FCE               	movwf	(_port+8)& (0+255),b
  5895                           
  5896                           ; BSR set to: 0
  5897                           ;EQM.c: 113:                 LcClear();
  5898   000362  EC74  F000         	call	_LcClear	;wreg free
  5899                           
  5900                           ;EQM.c: 114:                 LcGotoXY(0,0);
  5901   000366  0E00               	movlw	0
  5902   000368  6A67               	clrf	LcGotoXY@Row^0,c
  5903   00036A  ECD0  F00B         	call	_LcGotoXY
  5904                           
  5905                           ;EQM.c: 115:     state_option++;
  5906   00036E  2A2B               	incf	_state_option^0,f,c
  5907                           
  5908                           ;EQM.c: 116:                 if (Opt3==1 ){
  5909   000370  0428               	decf	_Opt3^0,w,c
  5910   000372  A4D8               	btfss	status,2,c
  5911   000374  0C00               	retlw	0
  5912                           
  5913                           ;EQM.c: 117:                     state_option=7;
  5914   000376  0E07               	movlw	7
  5915   000378  6E2B               	movwf	_state_option^0,c
  5916   00037A  0C00               	retlw	0
  5917   00037C                     l4404:
  5918                           
  5919                           ;EQM.c: 122:             if (LcPutString("USER NAME: ") == 2) {
  5920   00037C  0E5E               	movlw	low STR_3
  5921   00037E  6E70               	movwf	LcPutString@s^0,c
  5922   000380  D8CF               	call	PL26	;call to abstracted procedure
  5923   000382  ECC9  F00D         	call	_LcPutString	;wreg free
  5924   000386  0A02               	xorlw	2
  5925   000388  A4D8               	btfss	status,2,c
  5926   00038A  0C00               	retlw	0
  5927                           
  5928                           ;EQM.c: 123:                 StartRead(3);
  5929   00038C  0E03               	movlw	3
  5930   00038E  EC0B  F000         	call	_StartRead
  5931   000392  D794               	goto	l4346
  5932   000394                     l4414:
  5933                           
  5934                           ;EQM.c: 128:             if (ValorsState()==0) {
  5935   000394  ECDA  F000         	call	_ValorsState	;wreg free
  5936   000398  0900               	iorlw	0
  5937   00039A  A4D8               	btfss	status,2,c
  5938   00039C  0C00               	retlw	0
  5939                           
  5940                           ;EQM.c: 129:                 user[0] = getMSG(0);
  5941   00039E  0E00               	movlw	0
  5942   0003A0  EC9C  F000         	call	_getMSG
  5943   0003A4  6E4D               	movwf	_user^0,c
  5944                           
  5945                           ;EQM.c: 130:                 user[1] = getMSG(1);
  5946   0003A6  0E01               	movlw	1
  5947   0003A8  EC9C  F000         	call	_getMSG
  5948   0003AC  6E4E               	movwf	(_user+1)^0,c
  5949                           
  5950                           ;EQM.c: 131:                 user[2] = getMSG(2);
  5951   0003AE  0E02               	movlw	2
  5952   0003B0  EC9C  F000         	call	_getMSG
  5953   0003B4  6E4F               	movwf	(_user+2)^0,c
  5954                           
  5955                           ;EQM.c: 132:                 LcClear();
  5956   0003B6  EC74  F000         	call	_LcClear	;wreg free
  5957                           
  5958                           ;EQM.c: 133:                 LcGotoXY(0,0);
  5959   0003BA  0E00               	movlw	0
  5960   0003BC  6A67               	clrf	LcGotoXY@Row^0,c
  5961   0003BE  ECD0  F00B         	call	_LcGotoXY
  5962   0003C2  D77C               	goto	l4346
  5963   0003C4                     l4428:
  5964                           
  5965                           ;EQM.c: 137:             if (MotorCOM("AT+CIPCLOSE\r\n")==3){
  5966   0003C4  0E36               	movlw	low STR_4
  5967   0003C6  ECAE  F004         	call	PL16	;call to abstracted procedure
  5968   0003CA  EC7A  F00B         	call	_MotorCOM	;wreg free
  5969   0003CE  0A03               	xorlw	3
  5970   0003D0  A4D8               	btfss	status,2,c
  5971   0003D2  0C00               	retlw	0
  5972   0003D4                     u3610:
  5973                           
  5974                           ;EQM.c: 138:                 index = 0;
  5975   0003D4  6A2F               	clrf	_index@EQM$F1361^0,c
  5976   0003D6  D772               	goto	l4346
  5977   0003D8                     l4438:
  5978                           
  5979                           ;EQM.c: 143:             if (GetFlag()==1){
  5980   0003D8  ECE0  F000         	call	_GetFlag	;wreg free
  5981   0003DC  06E8               	decf	wreg,f,c
  5982   0003DE  A4D8               	btfss	status,2,c
  5983   0003E0  0C00               	retlw	0
  5984                           
  5985                           ;EQM.c: 144:                 index++;
  5986   0003E2  2A2F               	incf	_index@EQM$F1361^0,f,c
  5987                           
  5988                           ;EQM.c: 145:                 msg= GetRxMSG();
  5989   0003E4  ECC5  F000         	call	_GetRxMSG	;wreg free
  5990   0003E8  D017               	goto	L12
  5991   0003EA                     l4450:
  5992                           
  5993                           ;EQM.c: 150:             if (msg == '\n' && index>7){
  5994   0003EA  0E0A               	movlw	10
  5995   0003EC  182E               	xorwf	_msg^0,w,c
  5996   0003EE  E106               	bnz	l4458
  5997   0003F0  0E07               	movlw	7
  5998   0003F2  642F               	cpfsgt	_index@EQM$F1361^0,c
  5999   0003F4  D003               	goto	l4458
  6000                           
  6001                           ;EQM.c: 151:                 index=0;
  6002   0003F6  6A2F               	clrf	_index@EQM$F1361^0,c
  6003   0003F8                     l4456:
  6004                           
  6005                           ;EQM.c: 152:                 state_option--;
  6006   0003F8  062B               	decf	_state_option^0,f,c
  6007                           
  6008                           ;EQM.c: 153:             }else if (msg == '\n' && index<8) {
  6009   0003FA  0C00               	retlw	0
  6010   0003FC                     l4458:
  6011   0003FC  0E0A               	movlw	10
  6012   0003FE  182E               	xorwf	_msg^0,w,c
  6013   000400  E1FB               	bnz	l4456
  6014   000402  0E08               	movlw	8
  6015   000404  602F               	cpfslt	_index@EQM$F1361^0,c
  6016   000406  D7F8               	goto	l4456
  6017   000408  D759               	goto	l4346
  6018   00040A                     l4470:
  6019                           
  6020                           ;EQM.c: 162:             if(SIO_RXAvail()==1){
  6021   00040A  ECC2  F000         	call	_SIO_RXAvail	;wreg free
  6022   00040E  06E8               	decf	wreg,f,c
  6023   000410  A4D8               	btfss	status,2,c
  6024   000412  0C00               	retlw	0
  6025                           
  6026                           ;EQM.c: 163:                 msg =SIO_GetChar();
  6027   000414  ECDC  F000         	call	_SIO_GetChar	;wreg free
  6028   000418                     L12:
  6029   000418  6E2E               	movwf	_msg^0,c
  6030   00041A  D750               	goto	l4346
  6031   00041C                     l4480:
  6032                           
  6033                           ;EQM.c: 174:             if (MotorCOM("AT+CIPSTART=\"UDP\",\"255.255.255.255\",\0")==3){
  6034   00041C  0E01               	movlw	low STR_5
  6035   00041E  ECAE  F004         	call	PL16	;call to abstracted procedure
  6036   000422  EC7A  F00B         	call	_MotorCOM	;wreg free
  6037   000426  0A03               	xorlw	3
  6038   000428  E101 D748          	bz	l4346
  6039   00042C  0C00               	retlw	0
  6040   00042E                     l4488:
  6041                           
  6042                           ;EQM.c: 180:             msgToSend =(char*)port;
  6043   00042E  0EC6               	movlw	low _port
  6044   000430  6E09               	movwf	_msgToSend^0,c
  6045   000432  6A0A               	clrf	(_msgToSend+1)^0,c
  6046                           
  6047                           ;EQM.c: 181:             if (MotorCOM(msgToSend)==3){
  6048   000434  C009  F05A         	movff	_msgToSend,MotorCOM@new_msgC
  6049   000438  C00A  F05B         	movff	_msgToSend+1,MotorCOM@new_msgC+1
  6050   00043C  EC7A  F00B         	call	_MotorCOM	;wreg free
  6051   000440  D7F2               	goto	L13
  6052   000442                     l4498:
  6053                           
  6054                           ;EQM.c: 186:             if (MotorCOM("\r\n\0")==3){
  6055   000442  0EA8               	movlw	low STR_6
  6056   000444  ECAE  F004         	call	PL16	;call to abstracted procedure
  6057   000448  EC7A  F00B         	call	_MotorCOM	;wreg free
  6058   00044C  0A03               	xorlw	3
  6059   00044E  A4D8               	btfss	status,2,c
  6060   000450  0C00               	retlw	0
  6061                           
  6062                           ;EQM.c: 187:                 comptSEC=0;
  6063   000452  6A1E               	clrf	_comptSEC^0,c
  6064                           
  6065                           ;EQM.c: 188:                 TI_ResetTics(timer);
  6066   000454  5052               	movf	_timer@EQM$F1360^0,w,c
  6067   000456  EC1B  F000         	call	_TI_ResetTics
  6068   00045A  D7BC               	goto	u3610
  6069   00045C                     l4512:
  6070                           
  6071                           ;EQM.c: 194:             if(SIO_RXAvail()==1){
  6072   00045C  ECC2  F000         	call	_SIO_RXAvail	;wreg free
  6073   000460  06E8               	decf	wreg,f,c
  6074   000462  E116               	bnz	l4544
  6075                           
  6076                           ;EQM.c: 196:                 if(SIO_GetChar()==0x06){
  6077   000464  ECDC  F000         	call	_SIO_GetChar	;wreg free
  6078   000468  0A06               	xorlw	6
  6079   00046A  E106               	bnz	l4528
  6080                           
  6081                           ;EQM.c: 197:                     startMenu();
  6082   00046C  ECBF  F000         	call	_startMenu	;wreg free
  6083                           
  6084                           ;EQM.c: 198:                     state_option=0;
  6085   000470  6A2B               	clrf	_state_option^0,c
  6086                           
  6087                           ;EQM.c: 199:                     wifiSTATE=1;
  6088   000472  0E01               	movlw	1
  6089   000474  6E21               	movwf	_wifiSTATE^0,c
  6090                           
  6091                           ;EQM.c: 200:                     return 1;
  6092   000476  0C01               	retlw	1
  6093   000478                     l4528:
  6094                           
  6095                           ;EQM.c: 202:                 {;EQM.c: 203:                     endMSG();
  6096   000478  ECE2  F000         	call	_endMSG	;wreg free
  6097                           
  6098                           ;EQM.c: 204:                     state_option=11;
  6099   00047C  0E0B               	movlw	11
  6100   00047E  6E2B               	movwf	_state_option^0,c
  6101                           
  6102                           ;EQM.c: 205:                     INTENTS++;
  6103   000480  2A2C               	incf	_INTENTS^0,f,c
  6104                           
  6105                           ;EQM.c: 206:                     if(INTENTS >2){
  6106   000482  0E02               	movlw	2
  6107   000484  642C               	cpfsgt	_INTENTS^0,c
  6108   000486  D003               	goto	l4542
  6109   000488                     u3730:
  6110                           
  6111                           ;EQM.c: 207:                      state_option=0;
  6112   000488  6A2B               	clrf	_state_option^0,c
  6113                           
  6114                           ;EQM.c: 208:                      wifiSTATE=0;
  6115   00048A  6A21               	clrf	_wifiSTATE^0,c
  6116   00048C  0C01               	retlw	1
  6117   00048E                     l4542:
  6118                           
  6119                           ;EQM.c: 212:                 index++;
  6120   00048E  2A2F               	incf	_index@EQM$F1361^0,f,c
  6121   000490                     l4544:
  6122                           
  6123                           ;EQM.c: 214:             if (TI_GetTics(timer)>=1000) {
  6124   000490  5052               	movf	_timer@EQM$F1360^0,w,c
  6125   000492  ECC1  F00E         	call	_TI_GetTics
  6126   000496  505C               	movf	(?_TI_GetTics+3)^0,w,c
  6127   000498  105B               	iorwf	(?_TI_GetTics+2)^0,w,c
  6128   00049A  E105               	bnz	u3740
  6129   00049C  0EE8               	movlw	232
  6130   00049E  ECBA  F004         	call	PL94	;call to abstracted procedure
  6131   0004A2  A0D8               	btfss	status,0,c
  6132   0004A4  0C00               	retlw	0
  6133   0004A6                     u3740:
  6134                           
  6135                           ;EQM.c: 216:                 if (comptSEC>=100){
  6136   0004A6  0E63               	movlw	99
  6137   0004A8  641E               	cpfsgt	_comptSEC^0,c
  6138   0004AA  D00B               	goto	l4570
  6139                           
  6140                           ;EQM.c: 217:                     endMSG();
  6141   0004AC  ECE2  F000         	call	_endMSG	;wreg free
  6142                           
  6143                           ;EQM.c: 218:                      state_option=11;
  6144   0004B0  0E0B               	movlw	11
  6145   0004B2  6E2B               	movwf	_state_option^0,c
  6146                           
  6147                           ;EQM.c: 219:                      INTENTS++;
  6148   0004B4  2A2C               	incf	_INTENTS^0,f,c
  6149                           
  6150                           ;EQM.c: 220:                     if (Opt4==1){
  6151   0004B6  0427               	decf	_Opt4^0,w,c
  6152   0004B8  E0E7               	bz	u3730
  6153                           
  6154                           ;EQM.c: 225:                      if(INTENTS > 2){
  6155   0004BA  0E02               	movlw	2
  6156   0004BC  642C               	cpfsgt	_INTENTS^0,c
  6157   0004BE  0C00               	retlw	0
  6158   0004C0  D7E3               	goto	u3730
  6159   0004C2                     l4570:
  6160                           
  6161                           ;EQM.c: 230:                     comptSEC++;
  6162   0004C2  2A1E               	incf	_comptSEC^0,f,c
  6163                           
  6164                           ;EQM.c: 231:                     TI_ResetTics(timer);
  6165   0004C4  5052               	movf	_timer@EQM$F1360^0,w,c
  6166   0004C6  EC1B  F000         	call	_TI_ResetTics
  6167   0004CA  0C00               	retlw	0
  6168   0004CC                     l4580:
  6169   0004CC  502B               	movf	_state_option^0,w,c
  6170                           
  6171                           ; Switch size 1, requested type "space"
  6172                           ; Number of cases is 15, Range of values is 0 to 14
  6173                           ; switch strategies available:
  6174                           ; Name         Instructions Cycles
  6175                           ; simple_byte           46    24 (average)
  6176                           ;	Chosen strategy is simple_byte
  6177   0004CE  E101 D6EF          	bz	l4344
  6178   0004D2  0A01               	xorlw	1	; case 1
  6179   0004D4  E101 D6F4          	bz	l4352
  6180   0004D8  0A03               	xorlw	3	; case 2
  6181   0004DA  E101 D6FD          	bz	l4362
  6182   0004DE  0A01               	xorlw	1	; case 3
  6183   0004E0  E101 D71A          	bz	l4376
  6184   0004E4  0A07               	xorlw	7	; case 4
  6185   0004E6  E101 D723          	bz	l4386
  6186   0004EA  0A01               	xorlw	1	; case 5
  6187   0004EC  E101 D746          	bz	l4404
  6188   0004F0  0A03               	xorlw	3	; case 6
  6189   0004F2  E101 D74F          	bz	l4414
  6190   0004F6  0A01               	xorlw	1	; case 7
  6191   0004F8  E101 D764          	bz	l4428
  6192   0004FC  0A0F               	xorlw	15	; case 8
  6193   0004FE  E101 D76B          	bz	l4438
  6194   000502  0A01               	xorlw	1	; case 9
  6195   000504  E101 D771          	bz	l4450
  6196   000508  0A03               	xorlw	3	; case 10
  6197   00050A  E101 D77E          	bz	l4470
  6198   00050E  0A01               	xorlw	1	; case 11
  6199   000510  E085               	bz	l4480
  6200   000512  0A07               	xorlw	7	; case 12
  6201   000514  E08C               	bz	l4488
  6202   000516  0A01               	xorlw	1	; case 13
  6203   000518  E094               	bz	l4498
  6204   00051A  0A03               	xorlw	3	; case 14
  6205   00051C  E09F               	bz	l4512
  6206   00051E  0012               	return		;funcret
  6207   000520                     __end_of_ConfWIFI:
  6208                           	callstack 0
  6209   000520                     PL26:
  6210                           	callstack 21
  6211   000520  5070               	movf	LcPutString@s^0,w,c
  6212   000522  A4D8               	btfss	status,2,c
  6213   000524  0E02               	movlw	high __smallconst
  6214   000526  6E71               	movwf	(LcPutString@s+1)^0,c
  6215   000528  0012               	return	
  6216   00052A                     __end_ofPL26:
  6217                           	callstack 0
  6218                           
  6219 ;; *************** function _startMenu *****************
  6220 ;; Defined at:
  6221 ;;		line 39 in file "menu.c"
  6222 ;; Parameters:    Size  Location     Type
  6223 ;;		None
  6224 ;; Auto vars:     Size  Location     Type
  6225 ;;		None
  6226 ;; Return value:  Size  Location     Type
  6227 ;;                  1    wreg      void 
  6228 ;; Registers used:
  6229 ;;		wreg, status,2
  6230 ;; Tracked objects:
  6231 ;;		On entry : 0/0
  6232 ;;		On exit  : 0/0
  6233 ;;		Unchanged: 0/0
  6234 ;; Data sizes:     COMRAM   BANK0   BANK1
  6235 ;;      Params:         0       0       0
  6236 ;;      Locals:         0       0       0
  6237 ;;      Temps:          0       0       0
  6238 ;;      Totals:         0       0       0
  6239 ;;Total ram usage:        0 bytes
  6240 ;; Hardware stack levels used: 1
  6241 ;; Hardware stack levels required when called: 2
  6242 ;; This function calls:
  6243 ;;		Nothing
  6244 ;; This function is called by:
  6245 ;;		_ConfWIFI
  6246 ;;		_ReciveMSG
  6247 ;;		_MotorEQM
  6248 ;; This function uses a non-reentrant model
  6249 ;;
  6250                           
  6251                           	psect	text36
  6252   00017E                     __ptext36:
  6253                           	callstack 0
  6254   00017E                     _startMenu:
  6255                           	callstack 27
  6256                           
  6257                           ;menu.c: 40:     start=1;
  6258                           
  6259                           ;incstack = 0
  6260   00017E  0E01               	movlw	1
  6261   000180  6E17               	movwf	_start@menu$F1451^0,c
  6262   000182  0C01               	retlw	1	;funcret
  6263   000184                     __end_of_startMenu:
  6264                           	callstack 0
  6265                           
  6266 ;; *************** function _getMSG *****************
  6267 ;; Defined at:
  6268 ;;		line 72 in file "valorsteclat.c"
  6269 ;; Parameters:    Size  Location     Type
  6270 ;;  index           1    wreg     unsigned char 
  6271 ;; Auto vars:     Size  Location     Type
  6272 ;;  index           1    0[COMRAM] unsigned char 
  6273 ;; Return value:  Size  Location     Type
  6274 ;;                  1    wreg      unsigned char 
  6275 ;; Registers used:
  6276 ;;		wreg, fsr2l, fsr2h, status,2, status,0
  6277 ;; Tracked objects:
  6278 ;;		On entry : 0/0
  6279 ;;		On exit  : 0/0
  6280 ;;		Unchanged: 0/0
  6281 ;; Data sizes:     COMRAM   BANK0   BANK1
  6282 ;;      Params:         0       0       0
  6283 ;;      Locals:         1       0       0
  6284 ;;      Temps:          0       0       0
  6285 ;;      Totals:         1       0       0
  6286 ;;Total ram usage:        1 bytes
  6287 ;; Hardware stack levels used: 1
  6288 ;; Hardware stack levels required when called: 2
  6289 ;; This function calls:
  6290 ;;		Nothing
  6291 ;; This function is called by:
  6292 ;;		_ConfWIFI
  6293 ;;		_EnterChatMode
  6294 ;; This function uses a non-reentrant model
  6295 ;;
  6296                           
  6297                           	psect	text37
  6298   000138                     __ptext37:
  6299                           	callstack 0
  6300   000138                     _getMSG:
  6301                           	callstack 26
  6302                           
  6303                           ;incstack = 0
  6304                           ;getMSG@index stored from wreg
  6305   000138  6E59               	movwf	getMSG@index^0,c
  6306                           
  6307                           ;valorsteclat.c: 73:     return arrayChars[index];
  6308   00013A  5059               	movf	getMSG@index^0,w,c
  6309   00013C  0FBC               	addlw	low _arrayChars
  6310   00013E  6ED9               	movwf	fsr2l,c
  6311   000140  6ADA               	clrf	fsr2h,c
  6312   000142  50DF               	movf	indf2,w,c
  6313   000144  0012               	return		;funcret
  6314   000146                     __end_of_getMSG:
  6315                           	callstack 0
  6316                           
  6317 ;; *************** function _endMSG *****************
  6318 ;; Defined at:
  6319 ;;		line 14 in file "comunicacio.c"
  6320 ;; Parameters:    Size  Location     Type
  6321 ;;		None
  6322 ;; Auto vars:     Size  Location     Type
  6323 ;;		None
  6324 ;; Return value:  Size  Location     Type
  6325 ;;                  1    wreg      void 
  6326 ;; Registers used:
  6327 ;;		None
  6328 ;; Tracked objects:
  6329 ;;		On entry : 0/0
  6330 ;;		On exit  : 0/0
  6331 ;;		Unchanged: 0/0
  6332 ;; Data sizes:     COMRAM   BANK0   BANK1
  6333 ;;      Params:         0       0       0
  6334 ;;      Locals:         0       0       0
  6335 ;;      Temps:          0       0       0
  6336 ;;      Totals:         0       0       0
  6337 ;;Total ram usage:        0 bytes
  6338 ;; Hardware stack levels used: 1
  6339 ;; Hardware stack levels required when called: 2
  6340 ;; This function calls:
  6341 ;;		Nothing
  6342 ;; This function is called by:
  6343 ;;		_ConfWIFI
  6344 ;; This function uses a non-reentrant model
  6345 ;;
  6346                           
  6347                           	psect	text38
  6348   0001C4                     __ptext38:
  6349                           	callstack 0
  6350   0001C4                     _endMSG:
  6351                           	callstack 25
  6352                           
  6353                           ;incstack = 0
  6354   0001C4  0012               	return		;funcret
  6355   0001C6                     __end_of_endMSG:
  6356                           	callstack 0
  6357                           
  6358 ;; *************** function _ValorsState *****************
  6359 ;; Defined at:
  6360 ;;		line 56 in file "valorsteclat.c"
  6361 ;; Parameters:    Size  Location     Type
  6362 ;;		None
  6363 ;; Auto vars:     Size  Location     Type
  6364 ;;		None
  6365 ;; Return value:  Size  Location     Type
  6366 ;;                  1    wreg      unsigned char 
  6367 ;; Registers used:
  6368 ;;		wreg, status,2
  6369 ;; Tracked objects:
  6370 ;;		On entry : 0/0
  6371 ;;		On exit  : 0/0
  6372 ;;		Unchanged: 0/0
  6373 ;; Data sizes:     COMRAM   BANK0   BANK1
  6374 ;;      Params:         0       0       0
  6375 ;;      Locals:         0       0       0
  6376 ;;      Temps:          0       0       0
  6377 ;;      Totals:         0       0       0
  6378 ;;Total ram usage:        0 bytes
  6379 ;; Hardware stack levels used: 1
  6380 ;; Hardware stack levels required when called: 2
  6381 ;; This function calls:
  6382 ;;		Nothing
  6383 ;; This function is called by:
  6384 ;;		_ConfWIFI
  6385 ;;		_EnterChatMode
  6386 ;; This function uses a non-reentrant model
  6387 ;;
  6388                           
  6389                           	psect	text39
  6390   0001B4                     __ptext39:
  6391                           	callstack 0
  6392   0001B4                     _ValorsState:
  6393                           	callstack 26
  6394                           
  6395                           ;valorsteclat.c: 57:     return start;
  6396                           
  6397                           ;incstack = 0
  6398   0001B4  5043               	movf	_start^0,w,c
  6399   0001B6  0012               	return		;funcret
  6400   0001B8                     __end_of_ValorsState:
  6401                           	callstack 0
  6402                           
  6403 ;; *************** function _StartRead *****************
  6404 ;; Defined at:
  6405 ;;		line 60 in file "valorsteclat.c"
  6406 ;; Parameters:    Size  Location     Type
  6407 ;;  numMax          1    wreg     unsigned char 
  6408 ;; Auto vars:     Size  Location     Type
  6409 ;;  numMax          1    0[COMRAM] unsigned char 
  6410 ;; Return value:  Size  Location     Type
  6411 ;;                  1    wreg      void 
  6412 ;; Registers used:
  6413 ;;		wreg, status,2, status,0
  6414 ;; Tracked objects:
  6415 ;;		On entry : 0/0
  6416 ;;		On exit  : 0/0
  6417 ;;		Unchanged: 0/0
  6418 ;; Data sizes:     COMRAM   BANK0   BANK1
  6419 ;;      Params:         0       0       0
  6420 ;;      Locals:         1       0       0
  6421 ;;      Temps:          0       0       0
  6422 ;;      Totals:         1       0       0
  6423 ;;Total ram usage:        1 bytes
  6424 ;; Hardware stack levels used: 1
  6425 ;; Hardware stack levels required when called: 2
  6426 ;; This function calls:
  6427 ;;		Nothing
  6428 ;; This function is called by:
  6429 ;;		_ConfWIFI
  6430 ;;		_EnterChatMode
  6431 ;; This function uses a non-reentrant model
  6432 ;;
  6433                           
  6434                           	psect	text40
  6435   000016                     __ptext40:
  6436                           	callstack 0
  6437   000016                     _StartRead:
  6438                           	callstack 26
  6439                           
  6440                           ;incstack = 0
  6441                           ;StartRead@numMax stored from wreg
  6442   000016  6E59               	movwf	StartRead@numMax^0,c
  6443                           
  6444                           ;valorsteclat.c: 61:     if (numMax ==10){
  6445   000018  0E0A               	movlw	10
  6446   00001A  1859               	xorwf	StartRead@numMax^0,w,c
  6447   00001C  E102               	bnz	l4140
  6448                           
  6449                           ;valorsteclat.c: 62:         pos=0;
  6450   00001E  6A3F               	clrf	_pos^0,c
  6451                           
  6452                           ;valorsteclat.c: 63:     }else {
  6453   000020  D002               	goto	l4142
  6454   000022                     l4140:
  6455                           
  6456                           ;valorsteclat.c: 64:         pos=1;
  6457   000022  0E01               	movlw	1
  6458   000024  6E3F               	movwf	_pos^0,c
  6459   000026                     l4142:
  6460                           
  6461                           ;valorsteclat.c: 66:     numChars=0;
  6462   000026  6A40               	clrf	_numChars^0,c
  6463                           
  6464                           ;valorsteclat.c: 67:     filaAnterior=100;
  6465   000028  0E64               	movlw	100
  6466   00002A  6E41               	movwf	_filaAnterior^0,c
  6467                           
  6468                           ;valorsteclat.c: 68:     maxChars=numMax;
  6469   00002C  C059  F03E         	movff	StartRead@numMax,_maxChars
  6470                           
  6471                           ;valorsteclat.c: 69:     start=1;
  6472   000030  0E01               	movlw	1
  6473   000032  6E43               	movwf	_start^0,c
  6474   000034  0C01               	retlw	1	;funcret
  6475   000036                     __end_of_StartRead:
  6476                           	callstack 0
  6477                           
  6478 ;; *************** function _SIO_RXAvail *****************
  6479 ;; Defined at:
  6480 ;;		line 29 in file "sio.c"
  6481 ;; Parameters:    Size  Location     Type
  6482 ;;		None
  6483 ;; Auto vars:     Size  Location     Type
  6484 ;;		None
  6485 ;; Return value:  Size  Location     Type
  6486 ;;                  1    wreg      unsigned char 
  6487 ;; Registers used:
  6488 ;;		wreg
  6489 ;; Tracked objects:
  6490 ;;		On entry : 0/0
  6491 ;;		On exit  : 0/0
  6492 ;;		Unchanged: 0/0
  6493 ;; Data sizes:     COMRAM   BANK0   BANK1
  6494 ;;      Params:         0       0       0
  6495 ;;      Locals:         0       0       0
  6496 ;;      Temps:          0       0       0
  6497 ;;      Totals:         0       0       0
  6498 ;;Total ram usage:        0 bytes
  6499 ;; Hardware stack levels used: 1
  6500 ;; Hardware stack levels required when called: 2
  6501 ;; This function calls:
  6502 ;;		Nothing
  6503 ;; This function is called by:
  6504 ;;		_ConfWIFI
  6505 ;;		_ListAccesPoints
  6506 ;;		_ShowConnStatus
  6507 ;;		_EnterChatMode
  6508 ;; This function uses a non-reentrant model
  6509 ;;
  6510                           
  6511                           	psect	text41
  6512   000184                     __ptext41:
  6513                           	callstack 0
  6514   000184                     _SIO_RXAvail:
  6515                           	callstack 26
  6516                           
  6517                           ;sio.c: 31:     return ((PIR1bits.RCIF==1)?1:0);
  6518                           
  6519                           ;incstack = 0
  6520   000184  BA9E               	btfsc	158,5,c	;volatile
  6521   000186  0C01               	retlw	1
  6522   000188  0C00               	retlw	0	;funcret
  6523   00018A                     __end_of_SIO_RXAvail:
  6524                           	callstack 0
  6525                           
  6526 ;; *************** function _SIO_GetChar *****************
  6527 ;; Defined at:
  6528 ;;		line 34 in file "sio.c"
  6529 ;; Parameters:    Size  Location     Type
  6530 ;;		None
  6531 ;; Auto vars:     Size  Location     Type
  6532 ;;		None
  6533 ;; Return value:  Size  Location     Type
  6534 ;;                  1    wreg      unsigned char 
  6535 ;; Registers used:
  6536 ;;		wreg, status,2
  6537 ;; Tracked objects:
  6538 ;;		On entry : 0/0
  6539 ;;		On exit  : 0/0
  6540 ;;		Unchanged: 0/0
  6541 ;; Data sizes:     COMRAM   BANK0   BANK1
  6542 ;;      Params:         0       0       0
  6543 ;;      Locals:         0       0       0
  6544 ;;      Temps:          0       0       0
  6545 ;;      Totals:         0       0       0
  6546 ;;Total ram usage:        0 bytes
  6547 ;; Hardware stack levels used: 1
  6548 ;; Hardware stack levels required when called: 2
  6549 ;; This function calls:
  6550 ;;		Nothing
  6551 ;; This function is called by:
  6552 ;;		_ConfWIFI
  6553 ;;		_ListAccesPoints
  6554 ;;		_ShowConnStatus
  6555 ;;		_EnterChatMode
  6556 ;; This function uses a non-reentrant model
  6557 ;;
  6558                           
  6559                           	psect	text42
  6560   0001B8                     __ptext42:
  6561                           	callstack 0
  6562   0001B8                     _SIO_GetChar:
  6563                           	callstack 26
  6564                           
  6565                           ;sio.c: 37:     return RCREG;
  6566                           
  6567                           ;incstack = 0
  6568   0001B8  50AE               	movf	174,w,c	;volatile
  6569   0001BA  0012               	return		;funcret
  6570   0001BC                     __end_of_SIO_GetChar:
  6571                           	callstack 0
  6572                           
  6573 ;; *************** function _MotorCOM *****************
  6574 ;; Defined at:
  6575 ;;		line 19 in file "comunicacio.c"
  6576 ;; Parameters:    Size  Location     Type
  6577 ;;  new_msgC        2    1[COMRAM] PTR unsigned char 
  6578 ;;		 -> STR_15(4), STR_14(4), STR_13(13), STR_10(15), 
  6579 ;;		 -> STR_8(11), STR_6(4), STR_5(38), STR_4(14), 
  6580 ;;		 -> port(10), NULL(0), 
  6581 ;; Auto vars:     Size  Location     Type
  6582 ;;		None
  6583 ;; Return value:  Size  Location     Type
  6584 ;;                  1    wreg      unsigned char 
  6585 ;; Registers used:
  6586 ;;		wreg, fsr1l, fsr1h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  6587 ;; Tracked objects:
  6588 ;;		On entry : 0/0
  6589 ;;		On exit  : 0/0
  6590 ;;		Unchanged: 0/0
  6591 ;; Data sizes:     COMRAM   BANK0   BANK1
  6592 ;;      Params:         2       0       0
  6593 ;;      Locals:         0       0       0
  6594 ;;      Temps:          0       0       0
  6595 ;;      Totals:         2       0       0
  6596 ;;Total ram usage:        2 bytes
  6597 ;; Hardware stack levels used: 1
  6598 ;; Hardware stack levels required when called: 3
  6599 ;; This function calls:
  6600 ;;		_GetEND
  6601 ;;		_SetMSG
  6602 ;; This function is called by:
  6603 ;;		_ConfWIFI
  6604 ;;		_ListAccesPoints
  6605 ;;		_ShowConnStatus
  6606 ;;		_EnterChatMode
  6607 ;; This function uses a non-reentrant model
  6608 ;;
  6609                           
  6610                           	psect	text43
  6611   0016F4                     __ptext43:
  6612                           	callstack 0
  6613   0016F4                     _MotorCOM:
  6614                           	callstack 25
  6615                           
  6616                           ;comunicacio.c: 20:     static char state = 0;;comunicacio.c: 21:     static char index 
      +                          = 0;;comunicacio.c: 22:  switch(state) {
  6617                           
  6618                           ;incstack = 0
  6619   0016F4  D03E               	goto	l4188
  6620   0016F6                     l4152:
  6621                           
  6622                           ;comunicacio.c: 24:             msgC = new_msgC;
  6623   0016F6  C05A  F00B         	movff	MotorCOM@new_msgC,_msgC
  6624   0016FA  C05B  F00C         	movff	MotorCOM@new_msgC+1,_msgC+1
  6625   0016FE                     l4154:
  6626                           
  6627                           ;comunicacio.c: 25:             state++;
  6628   0016FE  2A36               	incf	MotorCOM@state^0,f,c
  6629                           
  6630                           ;comunicacio.c: 27:             break;
  6631   001700  D046               	goto	l4190
  6632   001702                     l4156:
  6633                           
  6634                           ;comunicacio.c: 29:    if (GetEND()==1) {
  6635   001702  ECDE  F000         	call	_GetEND	;wreg free
  6636   001706  06E8               	decf	wreg,f,c
  6637   001708  E142               	bnz	l4190
  6638                           
  6639                           ;comunicacio.c: 30:                 SetMSG(*msgC);
  6640   00170A  D843               	call	PL46	;call to abstracted procedure
  6641   00170C  64F7               	cpfsgt	tblptrh,c
  6642   00170E  D003               	bra	u3207
  6643   001710  0008               	tblrd		*
  6644   001712  50F5               	movf	tablat,w,c
  6645   001714  D002               	bra	u3200
  6646   001716                     u3207:
  6647   001716  ECF4  F00D         	call	PL34	;call to abstracted procedure
  6648   00171A                     u3200:
  6649   00171A  ECA3  F000         	call	_SetMSG
  6650                           
  6651                           ;comunicacio.c: 31:                 *msgC++;
  6652   00171E  4A0B               	infsnz	_msgC^0,f,c
  6653   001720  2A0C               	incf	(_msgC+1)^0,f,c
  6654   001722  D7ED               	goto	l4154
  6655   001724                     l4164:
  6656                           
  6657                           ;comunicacio.c: 36:    if (*msgC) {
  6658   001724  D836               	call	PL46	;call to abstracted procedure
  6659   001726  64F7               	cpfsgt	tblptrh,c
  6660   001728  D003               	bra	u3217
  6661   00172A  0008               	tblrd		*
  6662   00172C  50F5               	movf	tablat,w,c
  6663   00172E  D002               	bra	u3210
  6664   001730                     u3217:
  6665   001730  ECF4  F00D         	call	PL34	;call to abstracted procedure
  6666   001734                     u3210:
  6667   001734  0900               	iorlw	0
  6668   001736  E002               	bz	l4168
  6669                           
  6670                           ;comunicacio.c: 37:                 state--;
  6671   001738  0636               	decf	MotorCOM@state^0,f,c
  6672                           
  6673                           ;comunicacio.c: 39:    }
  6674   00173A  D029               	goto	l4190
  6675   00173C                     l4168:
  6676                           
  6677                           ;comunicacio.c: 41:                 state=6;
  6678   00173C  0E06               	movlw	6
  6679   00173E  D017               	goto	L14
  6680   001740                     l486:
  6681                           
  6682                           ;comunicacio.c: 47:             index = 0;
  6683   001740  6A36               	clrf	MotorCOM@state^0,c
  6684                           
  6685                           ;comunicacio.c: 48:             break;
  6686   001742  D025               	goto	l4190
  6687   001744                     l4170:
  6688                           
  6689                           ;comunicacio.c: 50:    if (GetEND()==1) {
  6690   001744  ECDE  F000         	call	_GetEND	;wreg free
  6691   001748  06E8               	decf	wreg,f,c
  6692   00174A  E121               	bnz	l4190
  6693                           
  6694                           ;comunicacio.c: 51:                 SetMSG('\r');
  6695   00174C  0E0D               	movlw	13
  6696   00174E  ECA3  F000         	call	_SetMSG
  6697   001752  D7D5               	goto	l4154
  6698   001754                     l4176:
  6699                           
  6700                           ;comunicacio.c: 56:    if (GetEND()==1) {
  6701   001754  ECDE  F000         	call	_GetEND	;wreg free
  6702   001758  06E8               	decf	wreg,f,c
  6703   00175A  E119               	bnz	l4190
  6704                           
  6705                           ;comunicacio.c: 57:                 SetMSG('\n');
  6706   00175C  0E0A               	movlw	10
  6707   00175E  ECA3  F000         	call	_SetMSG
  6708   001762  D7CD               	goto	l4154
  6709   001764                     l4182:
  6710                           
  6711                           ;comunicacio.c: 62:    if (GetEND()==1) {
  6712   001764  ECDE  F000         	call	_GetEND	;wreg free
  6713   001768  06E8               	decf	wreg,f,c
  6714   00176A  E111               	bnz	l4190
  6715                           
  6716                           ;comunicacio.c: 63:     state=3;
  6717   00176C  0E03               	movlw	3
  6718   00176E                     L14:
  6719   00176E  6E36               	movwf	MotorCOM@state^0,c
  6720   001770  D00E               	goto	l4190
  6721   001772                     l4188:
  6722   001772  5036               	movf	MotorCOM@state^0,w,c
  6723                           
  6724                           ; Switch size 1, requested type "space"
  6725                           ; Number of cases is 7, Range of values is 0 to 6
  6726                           ; switch strategies available:
  6727                           ; Name         Instructions Cycles
  6728                           ; simple_byte           22    12 (average)
  6729                           ;	Chosen strategy is simple_byte
  6730   001774  E0C0               	bz	l4152
  6731   001776  0A01               	xorlw	1	; case 1
  6732   001778  E0C4               	bz	l4156
  6733   00177A  0A03               	xorlw	3	; case 2
  6734   00177C  E0D3               	bz	l4164
  6735   00177E  0A01               	xorlw	1	; case 3
  6736   001780  E0DF               	bz	l486
  6737   001782  0A07               	xorlw	7	; case 4
  6738   001784  E0DF               	bz	l4170
  6739   001786  0A01               	xorlw	1	; case 5
  6740   001788  E0E5               	bz	l4176
  6741   00178A  0A03               	xorlw	3	; case 6
  6742   00178C  E0EB               	bz	l4182
  6743   00178E                     l4190:
  6744                           
  6745                           ;comunicacio.c: 67:     return state;
  6746   00178E  5036               	movf	MotorCOM@state^0,w,c
  6747   001790  0012               	return		;funcret
  6748   001792                     __end_of_MotorCOM:
  6749                           	callstack 0
  6750   001792                     PL46:
  6751                           	callstack 25
  6752   001792  C00B  FFF6         	movff	_msgC,tblptrl
  6753   001796  C00C  FFF7         	movff	_msgC+1,tblptrh
  6754   00179A  6AF8               	clrf	tblptru,c
  6755   00179C  0E01               	movlw	(high __ramtop+-1)
  6756   00179E  0012               	return	
  6757   0017A0                     __end_ofPL46:
  6758                           	callstack 0
  6759                           
  6760 ;; *************** function _SetMSG *****************
  6761 ;; Defined at:
  6762 ;;		line 25 in file "txcom.c"
  6763 ;; Parameters:    Size  Location     Type
  6764 ;;  new_msg         1    wreg     unsigned char 
  6765 ;; Auto vars:     Size  Location     Type
  6766 ;;  new_msg         1    0[COMRAM] unsigned char 
  6767 ;; Return value:  Size  Location     Type
  6768 ;;                  1    wreg      void 
  6769 ;; Registers used:
  6770 ;;		wreg, status,2
  6771 ;; Tracked objects:
  6772 ;;		On entry : 0/0
  6773 ;;		On exit  : 0/0
  6774 ;;		Unchanged: 0/0
  6775 ;; Data sizes:     COMRAM   BANK0   BANK1
  6776 ;;      Params:         0       0       0
  6777 ;;      Locals:         1       0       0
  6778 ;;      Temps:          0       0       0
  6779 ;;      Totals:         1       0       0
  6780 ;;Total ram usage:        1 bytes
  6781 ;; Hardware stack levels used: 1
  6782 ;; Hardware stack levels required when called: 2
  6783 ;; This function calls:
  6784 ;;		Nothing
  6785 ;; This function is called by:
  6786 ;;		_MotorCOM
  6787 ;;		_EnterChatMode
  6788 ;; This function uses a non-reentrant model
  6789 ;;
  6790                           
  6791                           	psect	text44
  6792   000146                     __ptext44:
  6793                           	callstack 0
  6794   000146                     _SetMSG:
  6795                           	callstack 25
  6796                           
  6797                           ;incstack = 0
  6798                           ;SetMSG@new_msg stored from wreg
  6799   000146  6E59               	movwf	SetMSG@new_msg^0,c
  6800                           
  6801                           ;txcom.c: 26:     MSG =new_msg;
  6802   000148  C059  F055         	movff	SetMSG@new_msg,_MSG
  6803                           
  6804                           ;txcom.c: 27:     end_TX=0;
  6805   00014C  6A38               	clrf	_end_TX^0,c
  6806                           
  6807                           ;txcom.c: 28:     start=1;
  6808   00014E  0E01               	movlw	1
  6809   000150  6E3B               	movwf	_start@txcom$F1020^0,c
  6810   000152  0C01               	retlw	1	;funcret
  6811   000154                     __end_of_SetMSG:
  6812                           	callstack 0
  6813                           
  6814 ;; *************** function _GetEND *****************
  6815 ;; Defined at:
  6816 ;;		line 31 in file "txcom.c"
  6817 ;; Parameters:    Size  Location     Type
  6818 ;;		None
  6819 ;; Auto vars:     Size  Location     Type
  6820 ;;		None
  6821 ;; Return value:  Size  Location     Type
  6822 ;;                  1    wreg      unsigned char 
  6823 ;; Registers used:
  6824 ;;		wreg, status,2
  6825 ;; Tracked objects:
  6826 ;;		On entry : 0/0
  6827 ;;		On exit  : 0/0
  6828 ;;		Unchanged: 0/0
  6829 ;; Data sizes:     COMRAM   BANK0   BANK1
  6830 ;;      Params:         0       0       0
  6831 ;;      Locals:         0       0       0
  6832 ;;      Temps:          0       0       0
  6833 ;;      Totals:         0       0       0
  6834 ;;Total ram usage:        0 bytes
  6835 ;; Hardware stack levels used: 1
  6836 ;; Hardware stack levels required when called: 2
  6837 ;; This function calls:
  6838 ;;		Nothing
  6839 ;; This function is called by:
  6840 ;;		_MotorCOM
  6841 ;;		_EnterChatMode
  6842 ;; This function uses a non-reentrant model
  6843 ;;
  6844                           
  6845                           	psect	text45
  6846   0001BC                     __ptext45:
  6847                           	callstack 0
  6848   0001BC                     _GetEND:
  6849                           	callstack 25
  6850                           
  6851                           ;txcom.c: 32:     return end_TX;
  6852                           
  6853                           ;incstack = 0
  6854   0001BC  5038               	movf	_end_TX^0,w,c
  6855   0001BE  0012               	return		;funcret
  6856   0001C0                     __end_of_GetEND:
  6857                           	callstack 0
  6858                           
  6859 ;; *************** function _GetRxMSG *****************
  6860 ;; Defined at:
  6861 ;;		line 29 in file "rxcom.c"
  6862 ;; Parameters:    Size  Location     Type
  6863 ;;		None
  6864 ;; Auto vars:     Size  Location     Type
  6865 ;;		None
  6866 ;; Return value:  Size  Location     Type
  6867 ;;                  1    wreg      unsigned char 
  6868 ;; Registers used:
  6869 ;;		wreg, status,2
  6870 ;; Tracked objects:
  6871 ;;		On entry : 0/0
  6872 ;;		On exit  : 0/0
  6873 ;;		Unchanged: 0/0
  6874 ;; Data sizes:     COMRAM   BANK0   BANK1
  6875 ;;      Params:         0       0       0
  6876 ;;      Locals:         0       0       0
  6877 ;;      Temps:          0       0       0
  6878 ;;      Totals:         0       0       0
  6879 ;;Total ram usage:        0 bytes
  6880 ;; Hardware stack levels used: 1
  6881 ;; Hardware stack levels required when called: 2
  6882 ;; This function calls:
  6883 ;;		Nothing
  6884 ;; This function is called by:
  6885 ;;		_ConfWIFI
  6886 ;;		_EnterChatMode
  6887 ;;		_ReciveMSG
  6888 ;; This function uses a non-reentrant model
  6889 ;;
  6890                           
  6891                           	psect	text46
  6892   00018A                     __ptext46:
  6893                           	callstack 0
  6894   00018A                     _GetRxMSG:
  6895                           	callstack 26
  6896                           
  6897                           ;rxcom.c: 30:     flag_RX=0;
  6898                           
  6899                           ;incstack = 0
  6900   00018A  6A33               	clrf	_flag_RX^0,c
  6901                           
  6902                           ;rxcom.c: 31:     return MSG_AUX;
  6903   00018C  5034               	movf	_MSG_AUX@rxcom$F1160^0,w,c
  6904   00018E  0012               	return		;funcret
  6905   000190                     __end_of_GetRxMSG:
  6906                           	callstack 0
  6907                           
  6908 ;; *************** function _GetFlag *****************
  6909 ;; Defined at:
  6910 ;;		line 34 in file "rxcom.c"
  6911 ;; Parameters:    Size  Location     Type
  6912 ;;		None
  6913 ;; Auto vars:     Size  Location     Type
  6914 ;;		None
  6915 ;; Return value:  Size  Location     Type
  6916 ;;                  1    wreg      unsigned char 
  6917 ;; Registers used:
  6918 ;;		wreg, status,2
  6919 ;; Tracked objects:
  6920 ;;		On entry : 0/0
  6921 ;;		On exit  : 0/0
  6922 ;;		Unchanged: 0/0
  6923 ;; Data sizes:     COMRAM   BANK0   BANK1
  6924 ;;      Params:         0       0       0
  6925 ;;      Locals:         0       0       0
  6926 ;;      Temps:          0       0       0
  6927 ;;      Totals:         0       0       0
  6928 ;;Total ram usage:        0 bytes
  6929 ;; Hardware stack levels used: 1
  6930 ;; Hardware stack levels required when called: 2
  6931 ;; This function calls:
  6932 ;;		Nothing
  6933 ;; This function is called by:
  6934 ;;		_ConfWIFI
  6935 ;;		_EnterChatMode
  6936 ;;		_ReciveMSG
  6937 ;; This function uses a non-reentrant model
  6938 ;;
  6939                           
  6940                           	psect	text47
  6941   0001C0                     __ptext47:
  6942                           	callstack 0
  6943   0001C0                     _GetFlag:
  6944                           	callstack 26
  6945                           
  6946                           ;rxcom.c: 35:     return flag_RX;
  6947                           
  6948                           ;incstack = 0
  6949   0001C0  5033               	movf	_flag_RX^0,w,c
  6950   0001C2  0012               	return		;funcret
  6951   0001C4                     __end_of_GetFlag:
  6952                           	callstack 0
  6953                           
  6954 ;; *************** function _CloseConn *****************
  6955 ;; Defined at:
  6956 ;;		line 303 in file "EQM.c"
  6957 ;; Parameters:    Size  Location     Type
  6958 ;;		None
  6959 ;; Auto vars:     Size  Location     Type
  6960 ;;		None
  6961 ;; Return value:  Size  Location     Type
  6962 ;;                  1    wreg      unsigned char 
  6963 ;; Registers used:
  6964 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6965 ;; Tracked objects:
  6966 ;;		On entry : 0/0
  6967 ;;		On exit  : 0/0
  6968 ;;		Unchanged: 0/0
  6969 ;; Data sizes:     COMRAM   BANK0   BANK1
  6970 ;;      Params:         0       0       0
  6971 ;;      Locals:         0       0       0
  6972 ;;      Temps:          0       0       0
  6973 ;;      Totals:         0       0       0
  6974 ;;Total ram usage:        0 bytes
  6975 ;; Hardware stack levels used: 1
  6976 ;; Hardware stack levels required when called: 7
  6977 ;; This function calls:
  6978 ;;		_LcClear
  6979 ;;		_LcGotoXY
  6980 ;;		_LcPutChar
  6981 ;;		_LcPutString
  6982 ;;		_TI_GetTics
  6983 ;;		_TI_ResetTics
  6984 ;; This function is called by:
  6985 ;;		_MotorEQM
  6986 ;; This function uses a non-reentrant model
  6987 ;;
  6988                           
  6989                           	psect	text48
  6990   001A30                     __ptext48:
  6991                           	callstack 0
  6992   001A30                     _CloseConn:
  6993                           	callstack 22
  6994                           
  6995                           ;EQM.c: 305:     switch(state_option) {
  6996                           
  6997                           ;incstack = 0
  6998   001A30  D032               	goto	l4822
  6999   001A32                     l4774:
  7000                           
  7001                           ;EQM.c: 307:             LcClear();
  7002   001A32  EC74  F000         	call	_LcClear	;wreg free
  7003                           
  7004                           ;EQM.c: 308:             LcGotoXY(0,0);
  7005   001A36  0E00               	movlw	0
  7006   001A38  6A67               	clrf	LcGotoXY@Row^0,c
  7007   001A3A  ECD0  F00B         	call	_LcGotoXY
  7008   001A3E                     l4776:
  7009                           
  7010                           ;EQM.c: 309:             state_option++;
  7011   001A3E  2A2B               	incf	_state_option^0,f,c
  7012                           
  7013                           ;EQM.c: 310:             return 0;
  7014   001A40  0C00               	retlw	0
  7015   001A42                     l4782:
  7016                           
  7017                           ;EQM.c: 312:             if(LcPutString("bye bye ")==2){
  7018   001A42  0E96               	movlw	low STR_11
  7019   001A44  6E70               	movwf	LcPutString@s^0,c
  7020   001A46  EC90  F002         	call	PL26	;call to abstracted procedure
  7021   001A4A  ECC9  F00D         	call	_LcPutString	;wreg free
  7022   001A4E  0A02               	xorlw	2
  7023   001A50  E0F6               	bz	l4776
  7024   001A52  0C00               	retlw	0
  7025   001A54                     l4790:
  7026                           
  7027                           ;EQM.c: 317:             if(LcPutString(user)==2){
  7028   001A54  0E4D               	movlw	low _user
  7029   001A56  6E70               	movwf	LcPutString@s^0,c
  7030   001A58  6A71               	clrf	(LcPutString@s+1)^0,c
  7031   001A5A  ECC9  F00D         	call	_LcPutString	;wreg free
  7032   001A5E  D7F7               	goto	L15
  7033   001A60                     l4798:
  7034                           
  7035                           ;EQM.c: 322:             LcPutChar('!');
  7036   001A60  0E21               	movlw	33
  7037   001A62  EC97  F00E         	call	_LcPutChar
  7038                           
  7039                           ;EQM.c: 323:             state_option++;
  7040   001A66  2A2B               	incf	_state_option^0,f,c
  7041                           
  7042                           ;EQM.c: 324:             TI_ResetTics(timer);
  7043   001A68  5052               	movf	_timer@EQM$F1360^0,w,c
  7044   001A6A  EC1B  F000         	call	_TI_ResetTics
  7045   001A6E  0C00               	retlw	0
  7046   001A70                     l4808:
  7047                           
  7048                           ;EQM.c: 327:             if(TI_GetTics(timer)>20000){
  7049   001A70  5052               	movf	_timer@EQM$F1360^0,w,c
  7050   001A72  ECC1  F00E         	call	_TI_GetTics
  7051   001A76  505C               	movf	(?_TI_GetTics+3)^0,w,c
  7052   001A78  105B               	iorwf	(?_TI_GetTics+2)^0,w,c
  7053   001A7A  E106               	bnz	u4010
  7054   001A7C  0E21               	movlw	33
  7055   001A7E  5C59               	subwf	?_TI_GetTics^0,w,c
  7056   001A80  0E4E               	movlw	78
  7057   001A82  585A               	subwfb	(?_TI_GetTics+1)^0,w,c
  7058   001A84  A0D8               	btfss	status,0,c
  7059   001A86  0C00               	retlw	0
  7060   001A88                     u4010:
  7061                           
  7062                           ;EQM.c: 328:                 LcClear();
  7063   001A88  EC74  F000         	call	_LcClear	;wreg free
  7064                           
  7065                           ;EQM.c: 329:                 LcGotoXY(0,0);
  7066   001A8C  0E00               	movlw	0
  7067   001A8E  6A67               	clrf	LcGotoXY@Row^0,c
  7068   001A90  ECD0  F00B         	call	_LcGotoXY
  7069                           
  7070                           ;EQM.c: 330:                 return 1;
  7071   001A94  0C01               	retlw	1
  7072   001A96                     l4822:
  7073   001A96  502B               	movf	_state_option^0,w,c
  7074                           
  7075                           ; Switch size 1, requested type "space"
  7076                           ; Number of cases is 5, Range of values is 0 to 4
  7077                           ; switch strategies available:
  7078                           ; Name         Instructions Cycles
  7079                           ; simple_byte           16     9 (average)
  7080                           ;	Chosen strategy is simple_byte
  7081   001A98  E0CC               	bz	l4774
  7082   001A9A  0A01               	xorlw	1	; case 1
  7083   001A9C  E0D2               	bz	l4782
  7084   001A9E  0A03               	xorlw	3	; case 2
  7085   001AA0  E0D9               	bz	l4790
  7086   001AA2  0A01               	xorlw	1	; case 3
  7087   001AA4  E0DD               	bz	l4798
  7088   001AA6  0A07               	xorlw	7	; case 4
  7089   001AA8  E0E3               	bz	l4808
  7090   001AAA  0012               	return		;funcret
  7091   001AAC                     __end_of_CloseConn:
  7092                           	callstack 0
  7093                           
  7094 ;; *************** function _LcPutString *****************
  7095 ;; Defined at:
  7096 ;;		line 197 in file "lcd.c"
  7097 ;; Parameters:    Size  Location     Type
  7098 ;;  s               2   23[COMRAM] PTR unsigned char 
  7099 ;;		 -> STR_16(9), STR_12(10), STR_11(9), STR_9(13), 
  7100 ;;		 -> STR_7(13), user(3), STR_3(12), STR_2(11), 
  7101 ;;		 -> STR_1(12), NULL(0), 
  7102 ;; Auto vars:     Size  Location     Type
  7103 ;;		None
  7104 ;; Return value:  Size  Location     Type
  7105 ;;                  1    wreg      unsigned char 
  7106 ;; Registers used:
  7107 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7108 ;; Tracked objects:
  7109 ;;		On entry : 0/0
  7110 ;;		On exit  : 0/0
  7111 ;;		Unchanged: 0/0
  7112 ;; Data sizes:     COMRAM   BANK0   BANK1
  7113 ;;      Params:         2       0       0
  7114 ;;      Locals:         0       0       0
  7115 ;;      Temps:          0       0       0
  7116 ;;      Totals:         2       0       0
  7117 ;;Total ram usage:        2 bytes
  7118 ;; Hardware stack levels used: 1
  7119 ;; Hardware stack levels required when called: 6
  7120 ;; This function calls:
  7121 ;;		_LcPutChar
  7122 ;; This function is called by:
  7123 ;;		_ConfWIFI
  7124 ;;		_ListAccesPoints
  7125 ;;		_ShowConnStatus
  7126 ;;		_CloseConn
  7127 ;;		_EnterChatMode
  7128 ;;		_ListLastMessages
  7129 ;; This function uses a non-reentrant model
  7130 ;;
  7131                           
  7132                           	psect	text49
  7133   001B92                     __ptext49:
  7134                           	callstack 0
  7135   001B92                     _LcPutString:
  7136                           	callstack 22
  7137                           
  7138                           ;lcd.c: 201:  static char state = 0;;lcd.c: 202:     static char numChars = 0;;lcd.c: 20
      +                          3:     static char *string_ptr = 0;;lcd.c: 204:     switch (state) {
  7139                           
  7140                           ;incstack = 0
  7141   001B92  D022               	goto	l4126
  7142   001B94                     l4106:
  7143                           
  7144                           ;lcd.c: 206:             string_ptr = s;
  7145   001B94  C070  F00D         	movff	LcPutString@s,LcPutString@string_ptr
  7146   001B98  C071  F00E         	movff	LcPutString@s+1,LcPutString@string_ptr+1
  7147                           
  7148                           ;lcd.c: 207:             numChars=0;
  7149   001B9C  6A47               	clrf	LcPutString@numChars^0,c
  7150   001B9E                     l4110:
  7151                           
  7152                           ;lcd.c: 208:             state++;
  7153   001B9E  2A48               	incf	LcPutString@state^0,f,c
  7154                           
  7155                           ;lcd.c: 209:             break;
  7156   001BA0  D021               	goto	l4128
  7157   001BA2                     l4112:
  7158                           
  7159                           ;lcd.c: 212:             if (*string_ptr&&numChars < 16) {
  7160   001BA2  D828               	call	PL44	;call to abstracted procedure
  7161   001BA4  64F7               	cpfsgt	tblptrh,c
  7162   001BA6  D003               	bra	u3147
  7163   001BA8  0008               	tblrd		*
  7164   001BAA  50F5               	movf	tablat,w,c
  7165   001BAC  D001               	bra	u3140
  7166   001BAE                     u3147:
  7167   001BAE  D81C               	call	PL34	;call to abstracted procedure
  7168   001BB0                     u3140:
  7169   001BB0  0900               	iorlw	0
  7170   001BB2  E0F5               	bz	l4110
  7171   001BB4  0E10               	movlw	16
  7172   001BB6  6047               	cpfslt	LcPutString@numChars^0,c
  7173   001BB8  D7F2               	goto	l4110
  7174                           
  7175                           ;lcd.c: 213:                 LcPutChar(*string_ptr++);
  7176   001BBA  D81C               	call	PL44	;call to abstracted procedure
  7177   001BBC  64F7               	cpfsgt	tblptrh,c
  7178   001BBE  D003               	bra	u3177
  7179   001BC0  0008               	tblrd		*
  7180   001BC2  50F5               	movf	tablat,w,c
  7181   001BC4  D001               	bra	u3170
  7182   001BC6                     u3177:
  7183   001BC6  D810               	call	PL34	;call to abstracted procedure
  7184   001BC8                     u3170:
  7185   001BC8  EC97  F00E         	call	_LcPutChar
  7186   001BCC  4A0D               	infsnz	LcPutString@string_ptr^0,f,c
  7187   001BCE  2A0E               	incf	(LcPutString@string_ptr+1)^0,f,c
  7188                           
  7189                           ;lcd.c: 214:                 numChars++;
  7190   001BD0  2A47               	incf	LcPutString@numChars^0,f,c
  7191                           
  7192                           ;lcd.c: 215:             } else {
  7193   001BD2  D008               	goto	l4128
  7194   001BD4                     l163:
  7195                           
  7196                           ;lcd.c: 221:             state=0;
  7197   001BD4  6A48               	clrf	LcPutString@state^0,c
  7198                           
  7199                           ;lcd.c: 222:             break;
  7200   001BD6  D006               	goto	l4128
  7201   001BD8                     l4126:
  7202   001BD8  5048               	movf	LcPutString@state^0,w,c
  7203                           
  7204                           ; Switch size 1, requested type "space"
  7205                           ; Number of cases is 3, Range of values is 0 to 2
  7206                           ; switch strategies available:
  7207                           ; Name         Instructions Cycles
  7208                           ; simple_byte           10     6 (average)
  7209                           ;	Chosen strategy is simple_byte
  7210   001BDA  E0DC               	bz	l4106
  7211   001BDC  0A01               	xorlw	1	; case 1
  7212   001BDE  E0E1               	bz	l4112
  7213   001BE0  0A03               	xorlw	3	; case 2
  7214   001BE2  E0F8               	bz	l163
  7215   001BE4                     l4128:
  7216                           
  7217                           ;lcd.c: 224:     return state;
  7218   001BE4  5048               	movf	LcPutString@state^0,w,c
  7219   001BE6  0012               	return		;funcret
  7220   001BE8                     __end_of_LcPutString:
  7221                           	callstack 0
  7222   001BE8                     PL34:
  7223                           	callstack 25
  7224   001BE8  CFF6 FFE1          	movff	tblptrl,fsr1l
  7225   001BEC  CFF7 FFE2          	movff	tblptrh,fsr1h
  7226   001BF0  50E7               	movf	indf1,w,c
  7227   001BF2  0012               	return	
  7228   001BF4                     __end_ofPL34:
  7229                           	callstack 0
  7230   001BF4                     PL44:
  7231                           	callstack 22
  7232   001BF4  C00D  FFF6         	movff	LcPutString@string_ptr,tblptrl
  7233   001BF8  C00E  FFF7         	movff	LcPutString@string_ptr+1,tblptrh
  7234   001BFC  6AF8               	clrf	tblptru,c
  7235   001BFE  0E01               	movlw	(high __ramtop+-1)
  7236   001C00  0012               	return	
  7237   001C02                     __end_ofPL44:
  7238                           	callstack 0
  7239                           
  7240 ;; *************** function _LcPutChar *****************
  7241 ;; Defined at:
  7242 ;;		line 163 in file "lcd.c"
  7243 ;; Parameters:    Size  Location     Type
  7244 ;;  c               1    wreg     unsigned char 
  7245 ;; Auto vars:     Size  Location     Type
  7246 ;;  c               1   22[COMRAM] unsigned char 
  7247 ;; Return value:  Size  Location     Type
  7248 ;;                  1    wreg      void 
  7249 ;; Registers used:
  7250 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7251 ;; Tracked objects:
  7252 ;;		On entry : 0/0
  7253 ;;		On exit  : 0/0
  7254 ;;		Unchanged: 0/0
  7255 ;; Data sizes:     COMRAM   BANK0   BANK1
  7256 ;;      Params:         0       0       0
  7257 ;;      Locals:         1       0       0
  7258 ;;      Temps:          0       0       0
  7259 ;;      Totals:         1       0       0
  7260 ;;Total ram usage:        1 bytes
  7261 ;; Hardware stack levels used: 1
  7262 ;; Hardware stack levels required when called: 5
  7263 ;; This function calls:
  7264 ;;		_CantaData
  7265 ;;		_LcGotoXY
  7266 ;;		_WaitForBusy
  7267 ;; This function is called by:
  7268 ;;		_LcPutString
  7269 ;;		_ValorTecla
  7270 ;;		_CloseConn
  7271 ;;		_ListLastMessages
  7272 ;;		_ReciveMSG
  7273 ;;		_MotorMenu
  7274 ;; This function uses a non-reentrant model
  7275 ;;
  7276                           
  7277                           	psect	text50
  7278   001D2E                     __ptext50:
  7279                           	callstack 0
  7280   001D2E                     _LcPutChar:
  7281                           	callstack 23
  7282                           
  7283                           ;incstack = 0
  7284                           ;LcPutChar@c stored from wreg
  7285   001D2E  6E6F               	movwf	LcPutChar@c^0,c
  7286                           
  7287                           ;lcd.c: 173:  WaitForBusy(); CantaData(c);
  7288   001D30  EC90  F00D         	call	_WaitForBusy	;wreg free
  7289   001D34  506F               	movf	LcPutChar@c^0,w,c
  7290   001D36  EC35  F00E         	call	_CantaData
  7291                           
  7292                           ;lcd.c: 175:  ++ColumnAct;
  7293   001D3A  2A49               	incf	_ColumnAct^0,f,c
  7294                           
  7295                           ;lcd.c: 176:  if (Rows == 3) {
  7296   001D3C  0E03               	movlw	3
  7297   001D3E  184C               	xorwf	_Rows^0,w,c
  7298   001D40  E107               	bnz	l4068
  7299                           
  7300                           ;lcd.c: 177:   if (ColumnAct >= 20) {
  7301   001D42  0E13               	movlw	19
  7302   001D44  6449               	cpfsgt	_ColumnAct^0,c
  7303   001D46  0C13               	retlw	19
  7304                           
  7305                           ;lcd.c: 178:    ColumnAct = 0;
  7306   001D48  6A49               	clrf	_ColumnAct^0,c
  7307                           
  7308                           ;lcd.c: 179:    if (++RowAct >= 4) RowAct = 0;
  7309   001D4A  2A4A               	incf	_RowAct^0,f,c
  7310   001D4C  0E03               	movlw	3
  7311   001D4E  D009               	goto	L16
  7312   001D50                     l4068:
  7313                           
  7314                           ;lcd.c: 183:  if (Rows == 2) {
  7315   001D50  0E02               	movlw	2
  7316   001D52  184C               	xorwf	_Rows^0,w,c
  7317   001D54  E10A               	bnz	l4080
  7318                           
  7319                           ;lcd.c: 184:   if (ColumnAct >= 40) {
  7320   001D56  0E27               	movlw	39
  7321   001D58  6449               	cpfsgt	_ColumnAct^0,c
  7322   001D5A  0C27               	retlw	39
  7323                           
  7324                           ;lcd.c: 185:    ColumnAct = 0;
  7325   001D5C  6A49               	clrf	_ColumnAct^0,c
  7326                           
  7327                           ;lcd.c: 186:    if (++RowAct >= 2) RowAct = 0;
  7328   001D5E  2A4A               	incf	_RowAct^0,f,c
  7329   001D60  0E01               	movlw	1
  7330   001D62                     L16:
  7331   001D62  644A               	cpfsgt	_RowAct^0,c
  7332   001D64  D009               	goto	l4086
  7333   001D66  6A4A               	clrf	_RowAct^0,c
  7334   001D68  D007               	goto	l4086
  7335   001D6A                     l4080:
  7336                           
  7337                           ;lcd.c: 190:  if (RowAct == 1) {
  7338   001D6A  044A               	decf	_RowAct^0,w,c
  7339   001D6C  A4D8               	btfss	status,2,c
  7340   001D6E  0012               	return	
  7341                           
  7342                           ;lcd.c: 191:   if (ColumnAct >= 40) ColumnAct = 0;
  7343   001D70  0E27               	movlw	39
  7344   001D72  6449               	cpfsgt	_ColumnAct^0,c
  7345   001D74  D001               	goto	l4086
  7346   001D76  6A49               	clrf	_ColumnAct^0,c
  7347   001D78                     l4086:
  7348                           
  7349                           ;lcd.c: 192:   LcGotoXY(ColumnAct, RowAct);
  7350   001D78  C04A  F067         	movff	_RowAct,LcGotoXY@Row
  7351   001D7C  5049               	movf	_ColumnAct^0,w,c
  7352   001D7E  EFD0  F00B         	goto	_LcGotoXY
  7353   001D82                     __end_of_LcPutChar:
  7354                           	callstack 0
  7355                           
  7356 ;; *************** function _LcGotoXY *****************
  7357 ;; Defined at:
  7358 ;;		line 136 in file "lcd.c"
  7359 ;; Parameters:    Size  Location     Type
  7360 ;;  Column          1    wreg     unsigned char 
  7361 ;;  Row             1   14[COMRAM] unsigned char 
  7362 ;; Auto vars:     Size  Location     Type
  7363 ;;  Column          1   21[COMRAM] unsigned char 
  7364 ;;  Fisics          2   19[COMRAM] int 
  7365 ;; Return value:  Size  Location     Type
  7366 ;;                  1    wreg      void 
  7367 ;; Registers used:
  7368 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7369 ;; Tracked objects:
  7370 ;;		On entry : 0/0
  7371 ;;		On exit  : 0/0
  7372 ;;		Unchanged: 0/0
  7373 ;; Data sizes:     COMRAM   BANK0   BANK1
  7374 ;;      Params:         1       0       0
  7375 ;;      Locals:         5       0       0
  7376 ;;      Temps:          2       0       0
  7377 ;;      Totals:         8       0       0
  7378 ;;Total ram usage:        8 bytes
  7379 ;; Hardware stack levels used: 1
  7380 ;; Hardware stack levels required when called: 4
  7381 ;; This function calls:
  7382 ;;		_CantaIR
  7383 ;;		_WaitForBusy
  7384 ;; This function is called by:
  7385 ;;		_main
  7386 ;;		_LcPutChar
  7387 ;;		_ValorTecla
  7388 ;;		_ConfWIFI
  7389 ;;		_CloseConn
  7390 ;;		_EnterChatMode
  7391 ;;		_ListLastMessages
  7392 ;;		_ReciveMSG
  7393 ;;		_MotorMenu
  7394 ;; This function uses a non-reentrant model
  7395 ;;
  7396                           
  7397                           	psect	text51
  7398   0017A0                     __ptext51:
  7399                           	callstack 0
  7400   0017A0                     _LcGotoXY:
  7401                           	callstack 23
  7402                           
  7403                           ;incstack = 0
  7404                           ;LcGotoXY@Column stored from wreg
  7405   0017A0  6E6E               	movwf	LcGotoXY@Column^0,c
  7406                           
  7407                           ;lcd.c: 140:  int Fisics;;lcd.c: 142:  switch (Rows) {
  7408   0017A2  D030               	goto	l4012
  7409   0017A4                     l3992:
  7410                           
  7411                           ;lcd.c: 144:    Fisics = Column + (!Row ? 0 : 0x40); break;
  7412   0017A4  5067               	movf	LcGotoXY@Row^0,w,c
  7413   0017A6  E004               	bz	l123
  7414   0017A8  6A6B               	clrf	(_LcGotoXY$513+1)^0,c
  7415   0017AA  0E40               	movlw	64
  7416   0017AC  6E6A               	movwf	_LcGotoXY$513^0,c
  7417   0017AE  D002               	goto	l3996
  7418   0017B0                     l123:
  7419   0017B0  6A6A               	clrf	_LcGotoXY$513^0,c
  7420   0017B2  6A6B               	clrf	(_LcGotoXY$513+1)^0,c
  7421   0017B4                     l3996:
  7422   0017B4  506E               	movf	LcGotoXY@Column^0,w,c
  7423   0017B6  246A               	addwf	_LcGotoXY$513^0,w,c
  7424   0017B8  6E6C               	movwf	LcGotoXY@Fisics^0,c
  7425   0017BA  0E00               	movlw	0
  7426   0017BC  206B               	addwfc	(_LcGotoXY$513+1)^0,w,c
  7427   0017BE  6E6D               	movwf	(LcGotoXY@Fisics+1)^0,c
  7428   0017C0  D029               	goto	l4014
  7429   0017C2                     l127:
  7430                           
  7431                           ;lcd.c: 146:    Fisics = Column;
  7432   0017C2  C06E  F06C         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  7433   0017C6  6A6D               	clrf	(LcGotoXY@Fisics+1)^0,c
  7434                           
  7435                           ;lcd.c: 147:    if (Row == 1) Fisics += 0x40; else
  7436   0017C8  0467               	decf	LcGotoXY@Row^0,w,c
  7437   0017CA  E102               	bnz	l4002
  7438   0017CC  0E40               	movlw	64
  7439   0017CE  D004               	goto	L17
  7440   0017D0                     l4002:
  7441                           
  7442                           ;lcd.c: 148:    if (Row == 2) Fisics += Columns; else
  7443   0017D0  0E02               	movlw	2
  7444   0017D2  1867               	xorwf	LcGotoXY@Row^0,w,c
  7445   0017D4  E104               	bnz	l4006
  7446   0017D6  504B               	movf	_Columns^0,w,c
  7447   0017D8                     L17:
  7448   0017D8  266C               	addwf	LcGotoXY@Fisics^0,f,c
  7449   0017DA  0E00               	movlw	0
  7450   0017DC  D00D               	goto	L18
  7451   0017DE                     l4006:
  7452                           
  7453                           ;lcd.c: 149:    if (Row == 3) Fisics += 0x40+Columns;
  7454   0017DE  0E03               	movlw	3
  7455   0017E0  1867               	xorwf	LcGotoXY@Row^0,w,c
  7456   0017E2  E118               	bnz	l4014
  7457   0017E4  504B               	movf	_Columns^0,w,c
  7458   0017E6  6E68               	movwf	??_LcGotoXY^0,c
  7459   0017E8  6A69               	clrf	(??_LcGotoXY+1)^0,c
  7460   0017EA  0E40               	movlw	64
  7461   0017EC  2668               	addwf	??_LcGotoXY^0,f,c
  7462   0017EE  0E00               	movlw	0
  7463   0017F0  2269               	addwfc	(??_LcGotoXY+1)^0,f,c
  7464   0017F2  5068               	movf	??_LcGotoXY^0,w,c
  7465   0017F4  266C               	addwf	LcGotoXY@Fisics^0,f,c
  7466   0017F6  5069               	movf	(??_LcGotoXY+1)^0,w,c
  7467   0017F8                     L18:
  7468   0017F8  226D               	addwfc	(LcGotoXY@Fisics+1)^0,f,c
  7469                           
  7470                           ;lcd.c: 150:    break;
  7471   0017FA  D00C               	goto	l4014
  7472   0017FC                     l134:
  7473                           
  7474                           ;lcd.c: 153:    Fisics = Column; break;
  7475   0017FC  C06E  F06C         	movff	LcGotoXY@Column,LcGotoXY@Fisics
  7476   001800  6A6D               	clrf	(LcGotoXY@Fisics+1)^0,c
  7477   001802  D008               	goto	l4014
  7478   001804                     l4012:
  7479   001804  504C               	movf	_Rows^0,w,c
  7480                           
  7481                           ; Switch size 1, requested type "space"
  7482                           ; Number of cases is 3, Range of values is 1 to 4
  7483                           ; switch strategies available:
  7484                           ; Name         Instructions Cycles
  7485                           ; simple_byte           10     6 (average)
  7486                           ;	Chosen strategy is simple_byte
  7487   001806  0A01               	xorlw	1	; case 1
  7488   001808  E0F9               	bz	l134
  7489   00180A  0A03               	xorlw	3	; case 2
  7490   00180C  E0CB               	bz	l3992
  7491   00180E  0A06               	xorlw	6	; case 4
  7492   001810  E0D8               	bz	l127
  7493   001812  D7F4               	goto	l134
  7494   001814                     l4014:
  7495                           
  7496                           ;lcd.c: 156:  WaitForBusy();
  7497   001814  EC90  F00D         	call	_WaitForBusy	;wreg free
  7498                           
  7499                           ;lcd.c: 157:  CantaIR(0x80 | Fisics);
  7500   001818  506C               	movf	LcGotoXY@Fisics^0,w,c
  7501   00181A  0980               	iorlw	128
  7502   00181C  EC0F  F00F         	call	_CantaIR
  7503                           
  7504                           ;lcd.c: 159:  RowAct = Row;
  7505   001820  C067  F04A         	movff	LcGotoXY@Row,_RowAct
  7506                           
  7507                           ;lcd.c: 160:  ColumnAct = Column;
  7508   001824  C06E  F049         	movff	LcGotoXY@Column,_ColumnAct
  7509   001828  0012               	return		;funcret
  7510   00182A                     __end_of_LcGotoXY:
  7511                           	callstack 0
  7512                           
  7513 ;; *************** function _CantaData *****************
  7514 ;; Defined at:
  7515 ;;		line 270 in file "lcd.c"
  7516 ;; Parameters:    Size  Location     Type
  7517 ;;  Data            1    wreg     unsigned char 
  7518 ;; Auto vars:     Size  Location     Type
  7519 ;;  Data            1    6[COMRAM] unsigned char 
  7520 ;; Return value:  Size  Location     Type
  7521 ;;                  1    wreg      void 
  7522 ;; Registers used:
  7523 ;;		wreg, status,2, status,0, cstack
  7524 ;; Tracked objects:
  7525 ;;		On entry : 0/0
  7526 ;;		On exit  : 0/0
  7527 ;;		Unchanged: 0/0
  7528 ;; Data sizes:     COMRAM   BANK0   BANK1
  7529 ;;      Params:         0       0       0
  7530 ;;      Locals:         1       0       0
  7531 ;;      Temps:          0       0       0
  7532 ;;      Totals:         1       0       0
  7533 ;;Total ram usage:        1 bytes
  7534 ;; Hardware stack levels used: 1
  7535 ;; Hardware stack levels required when called: 3
  7536 ;; This function calls:
  7537 ;;		_CantaPartAlta
  7538 ;;		_CantaPartBaixa
  7539 ;; This function is called by:
  7540 ;;		_LcPutChar
  7541 ;; This function uses a non-reentrant model
  7542 ;;
  7543                           
  7544                           	psect	text52
  7545   001C6A                     __ptext52:
  7546                           	callstack 0
  7547   001C6A                     _CantaData:
  7548                           	callstack 24
  7549                           
  7550                           ;incstack = 0
  7551                           ;CantaData@Data stored from wreg
  7552   001C6A  6E5F               	movwf	CantaData@Data^0,c
  7553                           
  7554                           ;lcd.c: 271:  (TRISDbits.TRISD3 = TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6
      +                           =TRISDbits.TRISD6 = 0);
  7555   001C6C  9C95               	bcf	149,6,c	;volatile
  7556   001C6E  9C95               	bcf	149,6,c	;volatile
  7557   001C70  9A95               	bcf	149,5,c	;volatile
  7558   001C72  9895               	bcf	149,4,c	;volatile
  7559   001C74  9695               	bcf	149,3,c	;volatile
  7560                           
  7561                           ;lcd.c: 272:  (LATDbits.LATD1 = LATDbits.LATD1 = LATDbits.LATD1 = LATDbits.LATD1 =LATDbi
      +                          ts.LATD1 = 1);
  7562   001C76  828C               	bsf	140,1,c	;volatile
  7563   001C78  828C               	bsf	140,1,c	;volatile
  7564   001C7A  828C               	bsf	140,1,c	;volatile
  7565   001C7C  828C               	bsf	140,1,c	;volatile
  7566   001C7E  828C               	bsf	140,1,c	;volatile
  7567                           
  7568                           ;lcd.c: 273:  (LATDbits.LATD0 = LATDbits.LATD0 = LATDbits.LATD0 = LATDbits.LATD0 =LATDbi
      +                          ts.LATD0 =0);
  7569   001C80  908C               	bcf	140,0,c	;volatile
  7570   001C82  908C               	bcf	140,0,c	;volatile
  7571   001C84  908C               	bcf	140,0,c	;volatile
  7572   001C86  908C               	bcf	140,0,c	;volatile
  7573   001C88  908C               	bcf	140,0,c	;volatile
  7574                           
  7575                           ;lcd.c: 274:  (LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 =LATDbi
      +                          ts.LATD2 =1);
  7576   001C8A  ECBF  F00D         	call	PL2	;call to abstracted procedure
  7577   001C8E  848C               	bsf	140,2,c	;volatile
  7578                           
  7579                           ;lcd.c: 275:  CantaPartAlta(Data);
  7580   001C90  505F               	movf	CantaData@Data^0,w,c
  7581   001C92  EC50  F008         	call	_CantaPartAlta
  7582                           
  7583                           ;lcd.c: 276:  (LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 =LATDbi
      +                          ts.LATD2 =1);
  7584   001C96  ECBF  F00D         	call	PL2	;call to abstracted procedure
  7585   001C9A  848C               	bsf	140,2,c	;volatile
  7586                           
  7587                           ;lcd.c: 277:  (LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 =LATDbi
      +                          ts.LATD2 =0);
  7588   001C9C  ECC4  F00D         	call	PL4	;call to abstracted procedure
  7589                           
  7590                           ;lcd.c: 278:  (LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 =LATDbi
      +                          ts.LATD2 =0);
  7591   001CA0  ECC4  F00D         	call	PL4	;call to abstracted procedure
  7592   001CA4  948C               	bcf	140,2,c	;volatile
  7593   001CA6  948C               	bcf	140,2,c	;volatile
  7594                           
  7595                           ;lcd.c: 279:  (LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 =LATDbi
      +                          ts.LATD2 =1);
  7596   001CA8  ECBF  F00D         	call	PL2	;call to abstracted procedure
  7597   001CAC  848C               	bsf	140,2,c	;volatile
  7598                           
  7599                           ;lcd.c: 280:  CantaPartBaixa(Data);
  7600   001CAE  505F               	movf	CantaData@Data^0,w,c
  7601   001CB0  EC81  F007         	call	_CantaPartBaixa
  7602                           
  7603                           ;lcd.c: 281:  (LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 =LATDbi
      +                          ts.LATD2 =1);
  7604   001CB4  ECBF  F00D         	call	PL2	;call to abstracted procedure
  7605   001CB8  848C               	bsf	140,2,c	;volatile
  7606                           
  7607                           ;lcd.c: 282:  (LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 =LATDbi
      +                          ts.LATD2 =0);
  7608   001CBA  ECC4  F00D         	call	PL4	;call to abstracted procedure
  7609   001CBE  948C               	bcf	140,2,c	;volatile
  7610                           
  7611                           ;lcd.c: 283:  (TRISDbits.TRISD3 = TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6
      +                           =TRISDbits.TRISD6 = 1);
  7612   001CC0  D000               	goto	PL38	;call to abstracted procedure
  7613   001CC2                     __end_of_CantaData:
  7614                           	callstack 0
  7615   001CC2                     PL38:
  7616                           	callstack 23
  7617   001CC2  8C95               	bsf	149,6,c	;volatile
  7618   001CC4  8C95               	bsf	149,6,c	;volatile
  7619   001CC6  8A95               	bsf	149,5,c	;volatile
  7620   001CC8  8895               	bsf	149,4,c	;volatile
  7621   001CCA  8695               	bsf	149,3,c	;volatile
  7622   001CCC  0012               	return	
  7623   001CCE                     __end_ofPL38:
  7624                           	callstack 0
  7625                           
  7626 ;; *************** function _LcClear *****************
  7627 ;; Defined at:
  7628 ;;		line 115 in file "lcd.c"
  7629 ;; Parameters:    Size  Location     Type
  7630 ;;		None
  7631 ;; Auto vars:     Size  Location     Type
  7632 ;;		None
  7633 ;; Return value:  Size  Location     Type
  7634 ;;                  1    wreg      void 
  7635 ;; Registers used:
  7636 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7637 ;; Tracked objects:
  7638 ;;		On entry : 0/0
  7639 ;;		On exit  : 0/0
  7640 ;;		Unchanged: 0/0
  7641 ;; Data sizes:     COMRAM   BANK0   BANK1
  7642 ;;      Params:         0       0       0
  7643 ;;      Locals:         0       0       0
  7644 ;;      Temps:          0       0       0
  7645 ;;      Totals:         0       0       0
  7646 ;;Total ram usage:        0 bytes
  7647 ;; Hardware stack levels used: 1
  7648 ;; Hardware stack levels required when called: 4
  7649 ;; This function calls:
  7650 ;;		_CantaIR
  7651 ;;		_Espera
  7652 ;;		_WaitForBusy
  7653 ;; This function is called by:
  7654 ;;		_main
  7655 ;;		_ConfWIFI
  7656 ;;		_CloseConn
  7657 ;;		_EnterChatMode
  7658 ;;		_ListLastMessages
  7659 ;;		_ReciveMSG
  7660 ;;		_MotorMenu
  7661 ;; This function uses a non-reentrant model
  7662 ;;
  7663                           
  7664                           	psect	text53
  7665   0000E8                     __ptext53:
  7666                           	callstack 0
  7667   0000E8                     _LcClear:
  7668                           	callstack 25
  7669                           
  7670                           ;lcd.c: 118:  WaitForBusy(); CantaIR(0x01);
  7671                           
  7672                           ;incstack = 0
  7673   0000E8  EC90  F00D         	call	_WaitForBusy	;wreg free
  7674   0000EC  0E01               	movlw	1
  7675   0000EE  EC0F  F00F         	call	_CantaIR
  7676                           
  7677                           ;lcd.c: 119:  Espera(Timer, 3);
  7678   0000F2  ECC0  F00A         	call	PL30	;call to abstracted procedure
  7679   0000F6  0E03               	movlw	3
  7680   0000F8  6E68               	movwf	Espera@ms^0,c
  7681   0000FA  EF56  F00F         	goto	_Espera	;wreg free
  7682   0000FE                     __end_of_LcClear:
  7683                           	callstack 0
  7684                           
  7685 ;; *************** function _MotorAltaveu *****************
  7686 ;; Defined at:
  7687 ;;		line 42 in file "altaveu.c"
  7688 ;; Parameters:    Size  Location     Type
  7689 ;;		None
  7690 ;; Auto vars:     Size  Location     Type
  7691 ;;		None
  7692 ;; Return value:  Size  Location     Type
  7693 ;;                  1    wreg      void 
  7694 ;; Registers used:
  7695 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7696 ;; Tracked objects:
  7697 ;;		On entry : 0/0
  7698 ;;		On exit  : 0/0
  7699 ;;		Unchanged: 0/0
  7700 ;; Data sizes:     COMRAM   BANK0   BANK1
  7701 ;;      Params:         0       0       0
  7702 ;;      Locals:         0       0       0
  7703 ;;      Temps:          8       0       0
  7704 ;;      Totals:         8       0       0
  7705 ;;Total ram usage:        8 bytes
  7706 ;; Hardware stack levels used: 1
  7707 ;; Hardware stack levels required when called: 3
  7708 ;; This function calls:
  7709 ;;		_TI_GetTics
  7710 ;;		_TI_ResetTics
  7711 ;; This function is called by:
  7712 ;;		_main
  7713 ;; This function uses a non-reentrant model
  7714 ;;
  7715                           
  7716                           	psect	text54
  7717   001AAC                     __ptext54:
  7718                           	callstack 0
  7719   001AAC                     _MotorAltaveu:
  7720                           	callstack 27
  7721                           
  7722                           ;altaveu.c: 43:  static char state = 0;;altaveu.c: 45:  switch(state) {
  7723                           
  7724                           ;incstack = 0
  7725   001AAC  D01B               	goto	l5944
  7726   001AAE                     l5924:
  7727                           
  7728                           ;altaveu.c: 47:             if (TI_GetTics(timer)*2>=dutycycle) {
  7729   001AAE  D831               	call	PL48	;call to abstracted procedure
  7730   001AB0  ECC1  F00E         	call	_TI_GetTics
  7731   001AB4  D81C               	call	PL22	;call to abstracted procedure
  7732   001AB6  A0D8               	btfss	status,0,c
  7733   001AB8  0012               	return	
  7734                           
  7735                           ;altaveu.c: 48:     TI_ResetTics(timer);
  7736   001ABA  5050               	movf	_timer@altaveu$F1595^0,w,c
  7737   001ABC  EC1B  F000         	call	_TI_ResetTics
  7738                           
  7739                           ;altaveu.c: 50:     LATAbits.LATA4=1;
  7740   001AC0  8889               	bsf	137,4,c	;volatile
  7741                           
  7742                           ;altaveu.c: 51:     state++;
  7743   001AC2  2A0F               	incf	MotorAltaveu@state^0,f,c
  7744   001AC4  0012               	return	
  7745   001AC6                     l5932:
  7746                           
  7747                           ;altaveu.c: 55:             if (TI_GetTics(timer)*2>=dutycycle && sound==1) {
  7748   001AC6  D825               	call	PL48	;call to abstracted procedure
  7749   001AC8  ECC1  F00E         	call	_TI_GetTics
  7750   001ACC  D810               	call	PL22	;call to abstracted procedure
  7751   001ACE  A0D8               	btfss	status,0,c
  7752   001AD0  0012               	return	
  7753   001AD2  0412               	decf	_sound^0,w,c
  7754   001AD4  A4D8               	btfss	status,2,c
  7755   001AD6  0012               	return	
  7756                           
  7757                           ;altaveu.c: 56:                 TI_ResetTics(timer);
  7758   001AD8  5050               	movf	_timer@altaveu$F1595^0,w,c
  7759   001ADA  EC1B  F000         	call	_TI_ResetTics
  7760                           
  7761                           ;altaveu.c: 57:     LATAbits.LATA4=0;
  7762   001ADE  9889               	bcf	137,4,c	;volatile
  7763                           
  7764                           ;altaveu.c: 58:     state--;
  7765   001AE0  060F               	decf	MotorAltaveu@state^0,f,c
  7766   001AE2  0012               	return	
  7767   001AE4                     l5944:
  7768   001AE4  500F               	movf	MotorAltaveu@state^0,w,c
  7769                           
  7770                           ; Switch size 1, requested type "space"
  7771                           ; Number of cases is 2, Range of values is 0 to 1
  7772                           ; switch strategies available:
  7773                           ; Name         Instructions Cycles
  7774                           ; simple_byte            7     4 (average)
  7775                           ;	Chosen strategy is simple_byte
  7776   001AE6  E0E3               	bz	l5924
  7777   001AE8  0A01               	xorlw	1	; case 1
  7778   001AEA  E0ED               	bz	l5932
  7779   001AEC  0012               	return		;funcret
  7780   001AEE                     __end_of_MotorAltaveu:
  7781                           	callstack 0
  7782   001AEE                     PL22:
  7783                           	callstack 27
  7784   001AEE  90D8               	bcf	status,0,c
  7785   001AF0  3459               	rlcf	?_TI_GetTics^0,w,c
  7786   001AF2  6E6A               	movwf	(??_MotorAltaveu+4)^0,c
  7787   001AF4  345A               	rlcf	(?_TI_GetTics+1)^0,w,c
  7788   001AF6  6E6B               	movwf	(??_MotorAltaveu+5)^0,c
  7789   001AF8  345B               	rlcf	(?_TI_GetTics+2)^0,w,c
  7790   001AFA  6E6C               	movwf	(??_MotorAltaveu+6)^0,c
  7791   001AFC  345C               	rlcf	(?_TI_GetTics+3)^0,w,c
  7792   001AFE  6E6D               	movwf	(??_MotorAltaveu+7)^0,c
  7793   001B00  5066               	movf	??_MotorAltaveu^0,w,c
  7794   001B02  5C6A               	subwf	(??_MotorAltaveu+4)^0,w,c
  7795   001B04  5067               	movf	(??_MotorAltaveu+1)^0,w,c
  7796   001B06  586B               	subwfb	(??_MotorAltaveu+5)^0,w,c
  7797   001B08  5068               	movf	(??_MotorAltaveu+2)^0,w,c
  7798   001B0A  586C               	subwfb	(??_MotorAltaveu+6)^0,w,c
  7799   001B0C  5069               	movf	(??_MotorAltaveu+3)^0,w,c
  7800   001B0E  586D               	subwfb	(??_MotorAltaveu+7)^0,w,c
  7801   001B10  0012               	return	
  7802   001B12                     __end_ofPL22:
  7803                           	callstack 0
  7804   001B12                     PL48:
  7805                           	callstack 27
  7806   001B12  C011  F066         	movff	_dutycycle,??_MotorAltaveu
  7807   001B16  6A67               	clrf	(??_MotorAltaveu+1)^0,c
  7808   001B18  6A68               	clrf	(??_MotorAltaveu+2)^0,c
  7809   001B1A  6A69               	clrf	(??_MotorAltaveu+3)^0,c
  7810   001B1C  5050               	movf	_timer@altaveu$F1595^0,w,c
  7811   001B1E  0012               	return	
  7812   001B20                     __end_ofPL48:
  7813                           	callstack 0
  7814                           
  7815 ;; *************** function _MenuInit *****************
  7816 ;; Defined at:
  7817 ;;		line 28 in file "menu.c"
  7818 ;; Parameters:    Size  Location     Type
  7819 ;;		None
  7820 ;; Auto vars:     Size  Location     Type
  7821 ;;  busy            1   13[COMRAM] unsigned char 
  7822 ;; Return value:  Size  Location     Type
  7823 ;;                  1    wreg      void 
  7824 ;; Registers used:
  7825 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7826 ;; Tracked objects:
  7827 ;;		On entry : 0/0
  7828 ;;		On exit  : 0/0
  7829 ;;		Unchanged: 0/0
  7830 ;; Data sizes:     COMRAM   BANK0   BANK1
  7831 ;;      Params:         0       0       0
  7832 ;;      Locals:         1       0       0
  7833 ;;      Temps:          0       0       0
  7834 ;;      Totals:         1       0       0
  7835 ;;Total ram usage:        1 bytes
  7836 ;; Hardware stack levels used: 1
  7837 ;; Hardware stack levels required when called: 3
  7838 ;; This function calls:
  7839 ;;		_TI_GetTics
  7840 ;; This function is called by:
  7841 ;;		_main
  7842 ;; This function uses a non-reentrant model
  7843 ;;
  7844                           
  7845                           	psect	text55
  7846   00006E                     __ptext55:
  7847                           	callstack 0
  7848   00006E                     _MenuInit:
  7849                           	callstack 27
  7850                           
  7851                           ;menu.c: 30:     char busy = TI_GetTics(&timer);
  7852                           
  7853                           ;incstack = 0
  7854   00006E  0E51               	movlw	_timer@menu$F1455& (0+255)
  7855   000070  ECC1  F00E         	call	_TI_GetTics
  7856   000074  5059               	movf	?_TI_GetTics^0,w,c
  7857   000076  6E66               	movwf	MenuInit@busy^0,c
  7858   000078                     l5500:
  7859   000078  5066               	movf	MenuInit@busy^0,w,c
  7860   00007A  E0FE               	bz	l5500
  7861                           
  7862                           ;menu.c: 32:     state=0;
  7863   00007C  6A18               	clrf	_state@menu$F1450^0,c
  7864                           
  7865                           ;menu.c: 33:     start=0;
  7866   00007E  6A17               	clrf	_start@menu$F1451^0,c
  7867                           
  7868                           ;menu.c: 34:     m0=0;
  7869   000080  6A1B               	clrf	_m0^0,c
  7870                           
  7871                           ;menu.c: 35:     m1=0;
  7872   000082  6A1A               	clrf	_m1^0,c
  7873                           
  7874                           ;menu.c: 36:     Opt=0;
  7875   000084  6A19               	clrf	_Opt^0,c
  7876   000086  0012               	return		;funcret
  7877   000088                     __end_of_MenuInit:
  7878                           	callstack 0
  7879                           
  7880 ;; *************** function _LcInit *****************
  7881 ;; Defined at:
  7882 ;;		line 70 in file "lcd.c"
  7883 ;; Parameters:    Size  Location     Type
  7884 ;;  rows            1    wreg     unsigned char 
  7885 ;;  columns         1   21[COMRAM] unsigned char 
  7886 ;; Auto vars:     Size  Location     Type
  7887 ;;  rows            1   22[COMRAM] unsigned char 
  7888 ;;  i               2   23[COMRAM] int 
  7889 ;; Return value:  Size  Location     Type
  7890 ;;                  1    wreg      void 
  7891 ;; Registers used:
  7892 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  7893 ;; Tracked objects:
  7894 ;;		On entry : 0/0
  7895 ;;		On exit  : 0/0
  7896 ;;		Unchanged: 0/0
  7897 ;; Data sizes:     COMRAM   BANK0   BANK1
  7898 ;;      Params:         1       0       0
  7899 ;;      Locals:         3       0       0
  7900 ;;      Temps:          0       0       0
  7901 ;;      Totals:         4       0       0
  7902 ;;Total ram usage:        4 bytes
  7903 ;; Hardware stack levels used: 1
  7904 ;; Hardware stack levels required when called: 4
  7905 ;; This function calls:
  7906 ;;		_CantaIR
  7907 ;;		_EscriuPrimeraOrdre
  7908 ;;		_Espera
  7909 ;;		_TI_NewTimer
  7910 ;;		_WaitForBusy
  7911 ;; This function is called by:
  7912 ;;		_main
  7913 ;; This function uses a non-reentrant model
  7914 ;;
  7915                           
  7916                           	psect	text56
  7917   0014C4                     __ptext56:
  7918                           	callstack 0
  7919   0014C4                     _LcInit:
  7920                           	callstack 26
  7921                           
  7922                           ;incstack = 0
  7923                           ;LcInit@rows stored from wreg
  7924   0014C4  6E6F               	movwf	LcInit@rows^0,c
  7925                           
  7926                           ;lcd.c: 76:  int i;;lcd.c: 77:  Timer = TI_NewTimer(&Timer);
  7927   0014C6  0E58               	movlw	low _Timer
  7928   0014C8  6E59               	movwf	TI_NewTimer@TimerHandle^0,c
  7929   0014CA  EC78  F00F         	call	_TI_NewTimer	;wreg free
  7930   0014CE  6E58               	movwf	_Timer^0,c
  7931                           
  7932                           ;lcd.c: 78:  Rows = rows; Columns = columns;
  7933   0014D0  C06F  F04C         	movff	LcInit@rows,_Rows
  7934   0014D4  C06E  F04B         	movff	LcInit@columns,_Columns
  7935                           
  7936                           ;lcd.c: 79:  RowAct = ColumnAct = 0;
  7937   0014D8  6A49               	clrf	_ColumnAct^0,c
  7938   0014DA  6A4A               	clrf	_RowAct^0,c
  7939                           
  7940                           ;lcd.c: 80:  (TRISDbits.TRISD0 = TRISDbits.TRISD1 = TRISDbits.TRISD2 = 0);
  7941   0014DC  9495               	bcf	149,2,c	;volatile
  7942   0014DE  9295               	bcf	149,1,c	;volatile
  7943   0014E0  9095               	bcf	149,0,c	;volatile
  7944                           
  7945                           ;lcd.c: 81:  for (i = 0; i < 2; i++) {
  7946   0014E2  6A70               	clrf	LcInit@i^0,c
  7947   0014E4  6A71               	clrf	(LcInit@i+1)^0,c
  7948   0014E6                     l5440:
  7949                           
  7950                           ;lcd.c: 82:   Espera(Timer, 100);
  7951   0014E6  D84C               	call	PL30	;call to abstracted procedure
  7952   0014E8  0E64               	movlw	100
  7953   0014EA  6E68               	movwf	Espera@ms^0,c
  7954   0014EC  EC56  F00F         	call	_Espera	;wreg free
  7955                           
  7956                           ;lcd.c: 85:   EscriuPrimeraOrdre(0x02 | 0x01);
  7957   0014F0  0E03               	movlw	3
  7958   0014F2  EC9D  F006         	call	_EscriuPrimeraOrdre
  7959                           
  7960                           ;lcd.c: 86:   Espera(Timer, 5);
  7961   0014F6  D844               	call	PL30	;call to abstracted procedure
  7962   0014F8  0E05               	movlw	5
  7963   0014FA  6E68               	movwf	Espera@ms^0,c
  7964   0014FC  EC56  F00F         	call	_Espera	;wreg free
  7965                           
  7966                           ;lcd.c: 87:   EscriuPrimeraOrdre(0x02 | 0x01);
  7967   001500  0E03               	movlw	3
  7968   001502  EC9D  F006         	call	_EscriuPrimeraOrdre
  7969                           
  7970                           ;lcd.c: 88:   Espera(Timer, 1);
  7971   001506  D83C               	call	PL30	;call to abstracted procedure
  7972   001508  0E01               	movlw	1
  7973   00150A  6E68               	movwf	Espera@ms^0,c
  7974   00150C  EC56  F00F         	call	_Espera	;wreg free
  7975                           
  7976                           ;lcd.c: 89:   EscriuPrimeraOrdre(0x02 | 0x01);
  7977   001510  0E03               	movlw	3
  7978   001512  EC9D  F006         	call	_EscriuPrimeraOrdre
  7979                           
  7980                           ;lcd.c: 90:   Espera(Timer, 1);
  7981   001516  D834               	call	PL30	;call to abstracted procedure
  7982   001518  0E01               	movlw	1
  7983   00151A  6E68               	movwf	Espera@ms^0,c
  7984   00151C  EC56  F00F         	call	_Espera	;wreg free
  7985                           
  7986                           ;lcd.c: 93:   EscriuPrimeraOrdre(0x02);
  7987   001520  0E02               	movlw	2
  7988   001522  EC9D  F006         	call	_EscriuPrimeraOrdre
  7989                           
  7990                           ;lcd.c: 94:   Espera(Timer, 1);
  7991   001526  D82C               	call	PL30	;call to abstracted procedure
  7992   001528  0E01               	movlw	1
  7993   00152A  6E68               	movwf	Espera@ms^0,c
  7994   00152C  EC56  F00F         	call	_Espera	;wreg free
  7995                           
  7996                           ;lcd.c: 95:   CantaIR(0x20 | 0x08);
  7997   001530  0E28               	movlw	40
  7998   001532  EC0F  F00F         	call	_CantaIR
  7999                           
  8000                           ;lcd.c: 98:   WaitForBusy(); CantaIR(0x08);
  8001   001536  EC90  F00D         	call	_WaitForBusy	;wreg free
  8002   00153A  0E08               	movlw	8
  8003   00153C  EC0F  F00F         	call	_CantaIR
  8004                           
  8005                           ;lcd.c: 99:   WaitForBusy(); CantaIR(0x01);
  8006   001540  EC90  F00D         	call	_WaitForBusy	;wreg free
  8007   001544  0E01               	movlw	1
  8008   001546  EC0F  F00F         	call	_CantaIR
  8009                           
  8010                           ;lcd.c: 100:   Espera(Timer,3);
  8011   00154A  D81A               	call	PL30	;call to abstracted procedure
  8012   00154C  0E03               	movlw	3
  8013   00154E  6E68               	movwf	Espera@ms^0,c
  8014   001550  EC56  F00F         	call	_Espera	;wreg free
  8015                           
  8016                           ;lcd.c: 101:   WaitForBusy(); CantaIR(0x04 | 0x02);
  8017   001554  EC90  F00D         	call	_WaitForBusy	;wreg free
  8018   001558  0E06               	movlw	6
  8019   00155A  EC0F  F00F         	call	_CantaIR
  8020                           
  8021                           ;lcd.c: 102:   WaitForBusy(); CantaIR(0x08 | 0x04 | 0x02 | 0x01);
  8022   00155E  EC90  F00D         	call	_WaitForBusy	;wreg free
  8023   001562  0E0F               	movlw	15
  8024   001564  EC0F  F00F         	call	_CantaIR
  8025                           
  8026                           ;lcd.c: 103:  }
  8027   001568  4A70               	infsnz	LcInit@i^0,f,c
  8028   00156A  2A71               	incf	(LcInit@i+1)^0,f,c
  8029   00156C  BE71               	btfsc	(LcInit@i+1)^0,7,c
  8030   00156E  D7BB               	goto	l5440
  8031   001570  5071               	movf	(LcInit@i+1)^0,w,c
  8032   001572  E105               	bnz	u4780
  8033   001574  0E02               	movlw	2
  8034   001576  5C70               	subwf	LcInit@i^0,w,c
  8035   001578  B0D8               	btfsc	status,0,c
  8036   00157A  0012               	return	
  8037   00157C  D7B4               	goto	l5440
  8038   00157E                     u4780:
  8039   00157E  0012               	return		;funcret
  8040   001580                     __end_of_LcInit:
  8041                           	callstack 0
  8042   001580                     PL30:
  8043                           	callstack 26
  8044   001580  C058  F066         	movff	_Timer,Espera@Timer
  8045   001584  6A67               	clrf	(Espera@Timer+1)^0,c
  8046   001586  6A69               	clrf	(Espera@ms+1)^0,c
  8047   001588  0012               	return	
  8048   00158A                     __end_ofPL30:
  8049                           	callstack 0
  8050                           
  8051 ;; *************** function _Espera *****************
  8052 ;; Defined at:
  8053 ;;		line 235 in file "lcd.c"
  8054 ;; Parameters:    Size  Location     Type
  8055 ;;  Timer           2   13[COMRAM] int 
  8056 ;;  ms              2   15[COMRAM] int 
  8057 ;; Auto vars:     Size  Location     Type
  8058 ;;		None
  8059 ;; Return value:  Size  Location     Type
  8060 ;;                  1    wreg      void 
  8061 ;; Registers used:
  8062 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8063 ;; Tracked objects:
  8064 ;;		On entry : 0/0
  8065 ;;		On exit  : 0/0
  8066 ;;		Unchanged: 0/0
  8067 ;; Data sizes:     COMRAM   BANK0   BANK1
  8068 ;;      Params:         4       0       0
  8069 ;;      Locals:         0       0       0
  8070 ;;      Temps:          4       0       0
  8071 ;;      Totals:         8       0       0
  8072 ;;Total ram usage:        8 bytes
  8073 ;; Hardware stack levels used: 1
  8074 ;; Hardware stack levels required when called: 3
  8075 ;; This function calls:
  8076 ;;		_TI_GetTics
  8077 ;;		_TI_ResetTics
  8078 ;;		___wmul
  8079 ;; This function is called by:
  8080 ;;		_LcInit
  8081 ;;		_LcClear
  8082 ;; This function uses a non-reentrant model
  8083 ;;
  8084                           
  8085                           	psect	text57
  8086   001EAC                     __ptext57:
  8087                           	callstack 0
  8088   001EAC                     _Espera:
  8089                           	callstack 25
  8090                           
  8091                           ;lcd.c: 236:  TI_ResetTics(Timer);
  8092                           
  8093                           ;incstack = 0
  8094   001EAC  5066               	movf	Espera@Timer^0,w,c
  8095   001EAE  EC1B  F000         	call	_TI_ResetTics
  8096   001EB2                     l4048:
  8097   001EB2  C068  F059         	movff	Espera@ms,___wmul@multiplier
  8098   001EB6  C069  F05A         	movff	Espera@ms+1,___wmul@multiplier+1
  8099   001EBA  6A5C               	clrf	(___wmul@multiplicand+1)^0,c
  8100   001EBC  0E0A               	movlw	10
  8101   001EBE  6E5B               	movwf	___wmul@multiplicand^0,c
  8102   001EC0  ECD3  F00F         	call	___wmul	;wreg free
  8103   001EC4  C059  F06A         	movff	?___wmul,??_Espera
  8104   001EC8  C05A  F06B         	movff	?___wmul+1,??_Espera+1
  8105   001ECC  0E00               	movlw	0
  8106   001ECE  BE6B               	btfsc	(??_Espera+1)^0,7,c
  8107   001ED0  0EFF               	movlw	255
  8108   001ED2  6E6C               	movwf	(??_Espera+2)^0,c
  8109   001ED4  6E6D               	movwf	(??_Espera+3)^0,c
  8110   001ED6  5066               	movf	Espera@Timer^0,w,c
  8111   001ED8  ECC1  F00E         	call	_TI_GetTics
  8112   001EDC  506A               	movf	??_Espera^0,w,c
  8113   001EDE  5C59               	subwf	?_TI_GetTics^0,w,c
  8114   001EE0  506B               	movf	(??_Espera+1)^0,w,c
  8115   001EE2  585A               	subwfb	(?_TI_GetTics+1)^0,w,c
  8116   001EE4  506C               	movf	(??_Espera+2)^0,w,c
  8117   001EE6  585B               	subwfb	(?_TI_GetTics+2)^0,w,c
  8118   001EE8  506D               	movf	(??_Espera+3)^0,w,c
  8119   001EEA  585C               	subwfb	(?_TI_GetTics+3)^0,w,c
  8120   001EEC  E3E2               	bnc	l4048
  8121   001EEE  0012               	return		;funcret
  8122   001EF0                     __end_of_Espera:
  8123                           	callstack 0
  8124                           
  8125 ;; *************** function ___wmul *****************
  8126 ;; Defined at:
  8127 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.46\pic\sources\c99\common\Umul16.c"
  8128 ;; Parameters:    Size  Location     Type
  8129 ;;  multiplier      2    0[COMRAM] unsigned int 
  8130 ;;  multiplicand    2    2[COMRAM] unsigned int 
  8131 ;; Auto vars:     Size  Location     Type
  8132 ;;  product         2    4[COMRAM] unsigned int 
  8133 ;; Return value:  Size  Location     Type
  8134 ;;                  2    0[COMRAM] unsigned int 
  8135 ;; Registers used:
  8136 ;;		wreg, status,2, status,0, prodl, prodh
  8137 ;; Tracked objects:
  8138 ;;		On entry : 0/0
  8139 ;;		On exit  : 0/0
  8140 ;;		Unchanged: 0/0
  8141 ;; Data sizes:     COMRAM   BANK0   BANK1
  8142 ;;      Params:         4       0       0
  8143 ;;      Locals:         2       0       0
  8144 ;;      Temps:          0       0       0
  8145 ;;      Totals:         6       0       0
  8146 ;;Total ram usage:        6 bytes
  8147 ;; Hardware stack levels used: 1
  8148 ;; Hardware stack levels required when called: 2
  8149 ;; This function calls:
  8150 ;;		Nothing
  8151 ;; This function is called by:
  8152 ;;		_Espera
  8153 ;; This function uses a non-reentrant model
  8154 ;;
  8155                           
  8156                           	psect	text58
  8157   001FA6                     __ptext58:
  8158                           	callstack 0
  8159   001FA6                     ___wmul:
  8160                           	callstack 25
  8161                           
  8162                           ;incstack = 0
  8163   001FA6  5059               	movf	___wmul@multiplier^0,w,c
  8164   001FA8  025B               	mulwf	___wmul@multiplicand^0,c
  8165   001FAA  CFF3 F05D          	movff	prodl,___wmul@product
  8166   001FAE  CFF4 F05E          	movff	prodh,___wmul@product+1
  8167   001FB2  5059               	movf	___wmul@multiplier^0,w,c
  8168   001FB4  025C               	mulwf	(___wmul@multiplicand+1)^0,c
  8169   001FB6  50F3               	movf	243,w,c
  8170   001FB8  265E               	addwf	(___wmul@product+1)^0,f,c
  8171   001FBA  505A               	movf	(___wmul@multiplier+1)^0,w,c
  8172   001FBC  025B               	mulwf	___wmul@multiplicand^0,c
  8173   001FBE  50F3               	movf	243,w,c
  8174   001FC0  265E               	addwf	(___wmul@product+1)^0,f,c
  8175   001FC2  C05D  F059         	movff	___wmul@product,?___wmul
  8176   001FC6  C05E  F05A         	movff	___wmul@product+1,?___wmul+1
  8177   001FCA  0012               	return		;funcret
  8178   001FCC                     __end_of___wmul:
  8179                           	callstack 0
  8180                           
  8181 ;; *************** function _EscriuPrimeraOrdre *****************
  8182 ;; Defined at:
  8183 ;;		line 304 in file "lcd.c"
  8184 ;; Parameters:    Size  Location     Type
  8185 ;;  ordre           1    wreg     unsigned char 
  8186 ;; Auto vars:     Size  Location     Type
  8187 ;;  ordre           1    5[COMRAM] unsigned char 
  8188 ;; Return value:  Size  Location     Type
  8189 ;;                  1    wreg      void 
  8190 ;; Registers used:
  8191 ;;		wreg, status,2, status,0
  8192 ;; Tracked objects:
  8193 ;;		On entry : 0/0
  8194 ;;		On exit  : 0/0
  8195 ;;		Unchanged: 0/0
  8196 ;; Data sizes:     COMRAM   BANK0   BANK1
  8197 ;;      Params:         0       0       0
  8198 ;;      Locals:         1       0       0
  8199 ;;      Temps:          5       0       0
  8200 ;;      Totals:         6       0       0
  8201 ;;Total ram usage:        6 bytes
  8202 ;; Hardware stack levels used: 1
  8203 ;; Hardware stack levels required when called: 2
  8204 ;; This function calls:
  8205 ;;		Nothing
  8206 ;; This function is called by:
  8207 ;;		_LcInit
  8208 ;; This function uses a non-reentrant model
  8209 ;;
  8210                           
  8211                           	psect	text59
  8212   000D3A                     __ptext59:
  8213                           	callstack 0
  8214   000D3A                     _EscriuPrimeraOrdre:
  8215                           	callstack 27
  8216                           
  8217                           ;incstack = 0
  8218                           ;EscriuPrimeraOrdre@ordre stored from wreg
  8219   000D3A  6E5E               	movwf	EscriuPrimeraOrdre@ordre^0,c
  8220                           
  8221                           ;lcd.c: 306:  (TRISDbits.TRISD3 = TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6
      +                           =TRISDbits.TRISD6 = 0); (LATDbits.LATD1 = LATDbits.LATD1 = LATDbits.LATD1 = LATDbits.LA
      +                          TD1 =LATDbits.LATD1 = 0); (LATDbits.LATD0 = LATDbits.LATD0 = LATDbits.LATD0 = LATDbits.L
      +                          ATD0 =LATDbits.LATD0 =0);
  8222   000D3C  9C95               	bcf	149,6,c	;volatile
  8223   000D3E  9C95               	bcf	149,6,c	;volatile
  8224   000D40  D8B9               	call	PL20	;call to abstracted procedure
  8225                           
  8226                           ;lcd.c: 307:  (LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 =LATDbi
      +                          ts.LATD2 =1); (LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 =LATDbi
      +                          ts.LATD2 =1);
  8227   000D42  ECBF  F00D         	call	PL2	;call to abstracted procedure
  8228   000D46  ECBF  F00D         	call	PL2	;call to abstracted procedure
  8229   000D4A  848C               	bsf	140,2,c	;volatile
  8230   000D4C  848C               	bsf	140,2,c	;volatile
  8231                           
  8232                           ;lcd.c: 308:   (LATDbits.LATD6 = LATDbits.LATD6 = LATDbits.LATD6 =LATDbits.LATD6 =LATDbi
      +                          ts.LATD6 =(ordre & 0x08 ? 1 : 0));
  8233   000D4E  A65E               	btfss	EscriuPrimeraOrdre@ordre^0,3,c
  8234   000D50  D003               	goto	u1100
  8235   000D52  6A59               	clrf	??_EscriuPrimeraOrdre^0,c
  8236   000D54  2A59               	incf	??_EscriuPrimeraOrdre^0,f,c
  8237   000D56  D001               	goto	u1118
  8238   000D58                     u1100:
  8239   000D58  6A59               	clrf	??_EscriuPrimeraOrdre^0,c
  8240   000D5A                     u1118:
  8241   000D5A  3A59               	swapf	??_EscriuPrimeraOrdre^0,f,c
  8242   000D5C  D8C8               	call	PL90	;call to abstracted procedure
  8243   000D5E  0BBF               	andlw	-65
  8244   000D60  1859               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8245   000D62  EC2C  F008         	call	PL10	;call to abstracted procedure
  8246   000D66  6E5A               	movwf	(??_EscriuPrimeraOrdre+1)^0,c
  8247   000D68  3A5A               	swapf	(??_EscriuPrimeraOrdre+1)^0,f,c
  8248   000D6A  D8BC               	call	PL68	;call to abstracted procedure
  8249   000D6C  0BBF               	andlw	-65
  8250   000D6E  185A               	xorwf	(??_EscriuPrimeraOrdre+1)^0,w,c
  8251   000D70  EC2C  F008         	call	PL10	;call to abstracted procedure
  8252   000D74  6E5B               	movwf	(??_EscriuPrimeraOrdre+2)^0,c
  8253   000D76  3A5B               	swapf	(??_EscriuPrimeraOrdre+2)^0,f,c
  8254   000D78  D8BF               	call	PL92	;call to abstracted procedure
  8255   000D7A  0BBF               	andlw	-65
  8256   000D7C  185B               	xorwf	(??_EscriuPrimeraOrdre+2)^0,w,c
  8257   000D7E  EC2C  F008         	call	PL10	;call to abstracted procedure
  8258   000D82  6E5C               	movwf	(??_EscriuPrimeraOrdre+3)^0,c
  8259   000D84  3A5C               	swapf	(??_EscriuPrimeraOrdre+3)^0,f,c
  8260   000D86  D8A9               	call	PL66	;call to abstracted procedure
  8261   000D88  0BBF               	andlw	-65
  8262   000D8A  185C               	xorwf	(??_EscriuPrimeraOrdre+3)^0,w,c
  8263   000D8C  EC2C  F008         	call	PL10	;call to abstracted procedure
  8264   000D90  6E5D               	movwf	(??_EscriuPrimeraOrdre+4)^0,c
  8265   000D92  3A5D               	swapf	(??_EscriuPrimeraOrdre+4)^0,f,c
  8266   000D94  D89D               	call	PL58	;call to abstracted procedure
  8267   000D96  0BBF               	andlw	-65
  8268   000D98  185D               	xorwf	(??_EscriuPrimeraOrdre+4)^0,w,c
  8269   000D9A  6E8C               	movwf	140,c	;volatile
  8270                           
  8271                           ;lcd.c: 309:   (LATDbits.LATD5 = LATDbits.LATD5 =LATDbits.LATD5 =LATDbits.LATD5 =LATDbit
      +                          s.LATD5 =(ordre & 0x04 ? 1 : 0));
  8272   000D9C  A45E               	btfss	EscriuPrimeraOrdre@ordre^0,2,c
  8273   000D9E  D003               	goto	u1120
  8274   000DA0  6A59               	clrf	??_EscriuPrimeraOrdre^0,c
  8275   000DA2  2A59               	incf	??_EscriuPrimeraOrdre^0,f,c
  8276   000DA4  D001               	goto	u1138
  8277   000DA6                     u1120:
  8278   000DA6  6A59               	clrf	??_EscriuPrimeraOrdre^0,c
  8279   000DA8                     u1138:
  8280   000DA8  3A59               	swapf	??_EscriuPrimeraOrdre^0,f,c
  8281   000DAA  4659               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  8282   000DAC  508C               	movf	140,w,c	;volatile
  8283   000DAE  1859               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8284   000DB0  0BDF               	andlw	-33
  8285   000DB2  1859               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8286   000DB4  EC32  F008         	call	PL18	;call to abstracted procedure
  8287   000DB8  6E5A               	movwf	(??_EscriuPrimeraOrdre+1)^0,c
  8288   000DBA  3A5A               	swapf	(??_EscriuPrimeraOrdre+1)^0,f,c
  8289   000DBC  465A               	rlncf	(??_EscriuPrimeraOrdre+1)^0,f,c
  8290   000DBE  508C               	movf	140,w,c	;volatile
  8291   000DC0  185A               	xorwf	(??_EscriuPrimeraOrdre+1)^0,w,c
  8292   000DC2  0BDF               	andlw	-33
  8293   000DC4  185A               	xorwf	(??_EscriuPrimeraOrdre+1)^0,w,c
  8294   000DC6  EC32  F008         	call	PL18	;call to abstracted procedure
  8295   000DCA  6E5B               	movwf	(??_EscriuPrimeraOrdre+2)^0,c
  8296   000DCC  3A5B               	swapf	(??_EscriuPrimeraOrdre+2)^0,f,c
  8297   000DCE  465B               	rlncf	(??_EscriuPrimeraOrdre+2)^0,f,c
  8298   000DD0  508C               	movf	140,w,c	;volatile
  8299   000DD2  185B               	xorwf	(??_EscriuPrimeraOrdre+2)^0,w,c
  8300   000DD4  0BDF               	andlw	-33
  8301   000DD6  185B               	xorwf	(??_EscriuPrimeraOrdre+2)^0,w,c
  8302   000DD8  EC32  F008         	call	PL18	;call to abstracted procedure
  8303   000DDC  6E5C               	movwf	(??_EscriuPrimeraOrdre+3)^0,c
  8304   000DDE  3A5C               	swapf	(??_EscriuPrimeraOrdre+3)^0,f,c
  8305   000DE0  465C               	rlncf	(??_EscriuPrimeraOrdre+3)^0,f,c
  8306   000DE2  508C               	movf	140,w,c	;volatile
  8307   000DE4  185C               	xorwf	(??_EscriuPrimeraOrdre+3)^0,w,c
  8308   000DE6  0BDF               	andlw	-33
  8309   000DE8  185C               	xorwf	(??_EscriuPrimeraOrdre+3)^0,w,c
  8310   000DEA  EC32  F008         	call	PL18	;call to abstracted procedure
  8311   000DEE  6E5D               	movwf	(??_EscriuPrimeraOrdre+4)^0,c
  8312   000DF0  3A5D               	swapf	(??_EscriuPrimeraOrdre+4)^0,f,c
  8313   000DF2  465D               	rlncf	(??_EscriuPrimeraOrdre+4)^0,f,c
  8314   000DF4  508C               	movf	140,w,c	;volatile
  8315   000DF6  185D               	xorwf	(??_EscriuPrimeraOrdre+4)^0,w,c
  8316   000DF8  0BDF               	andlw	-33
  8317   000DFA  185D               	xorwf	(??_EscriuPrimeraOrdre+4)^0,w,c
  8318   000DFC  6E8C               	movwf	140,c	;volatile
  8319                           
  8320                           ;lcd.c: 310:   (LATDbits.LATD4 = LATDbits.LATD4 =LATDbits.LATD4 =LATDbits.LATD4 =LATDbit
      +                          s.LATD4 =(ordre & 0x02 ? 1 : 0));
  8321   000DFE  A25E               	btfss	EscriuPrimeraOrdre@ordre^0,1,c
  8322   000E00  D003               	goto	u1140
  8323   000E02  6A59               	clrf	??_EscriuPrimeraOrdre^0,c
  8324   000E04  2A59               	incf	??_EscriuPrimeraOrdre^0,f,c
  8325   000E06  D001               	goto	u1158
  8326   000E08                     u1140:
  8327   000E08  6A59               	clrf	??_EscriuPrimeraOrdre^0,c
  8328   000E0A                     u1158:
  8329   000E0A  3A59               	swapf	??_EscriuPrimeraOrdre^0,f,c
  8330   000E0C  508C               	movf	140,w,c	;volatile
  8331   000E0E  1859               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8332   000E10  0BEF               	andlw	-17
  8333   000E12  1859               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8334   000E14  6E8C               	movwf	140,c	;volatile
  8335   000E16  388C               	swapf	140,w,c	;volatile
  8336   000E18  0B01               	andlw	1
  8337   000E1A  6E5A               	movwf	(??_EscriuPrimeraOrdre+1)^0,c
  8338   000E1C  3A5A               	swapf	(??_EscriuPrimeraOrdre+1)^0,f,c
  8339   000E1E  508C               	movf	140,w,c	;volatile
  8340   000E20  185A               	xorwf	(??_EscriuPrimeraOrdre+1)^0,w,c
  8341   000E22  0BEF               	andlw	-17
  8342   000E24  185A               	xorwf	(??_EscriuPrimeraOrdre+1)^0,w,c
  8343   000E26  6E8C               	movwf	140,c	;volatile
  8344   000E28  388C               	swapf	140,w,c	;volatile
  8345   000E2A  0B01               	andlw	1
  8346   000E2C  6E5B               	movwf	(??_EscriuPrimeraOrdre+2)^0,c
  8347   000E2E  3A5B               	swapf	(??_EscriuPrimeraOrdre+2)^0,f,c
  8348   000E30  508C               	movf	140,w,c	;volatile
  8349   000E32  185B               	xorwf	(??_EscriuPrimeraOrdre+2)^0,w,c
  8350   000E34  0BEF               	andlw	-17
  8351   000E36  185B               	xorwf	(??_EscriuPrimeraOrdre+2)^0,w,c
  8352   000E38  6E8C               	movwf	140,c	;volatile
  8353   000E3A  388C               	swapf	140,w,c	;volatile
  8354   000E3C  0B01               	andlw	1
  8355   000E3E  6E5C               	movwf	(??_EscriuPrimeraOrdre+3)^0,c
  8356   000E40  3A5C               	swapf	(??_EscriuPrimeraOrdre+3)^0,f,c
  8357   000E42  508C               	movf	140,w,c	;volatile
  8358   000E44  185C               	xorwf	(??_EscriuPrimeraOrdre+3)^0,w,c
  8359   000E46  0BEF               	andlw	-17
  8360   000E48  185C               	xorwf	(??_EscriuPrimeraOrdre+3)^0,w,c
  8361   000E4A  6E8C               	movwf	140,c	;volatile
  8362   000E4C  388C               	swapf	140,w,c	;volatile
  8363   000E4E  0B01               	andlw	1
  8364   000E50  6E5D               	movwf	(??_EscriuPrimeraOrdre+4)^0,c
  8365   000E52  3A5D               	swapf	(??_EscriuPrimeraOrdre+4)^0,f,c
  8366   000E54  508C               	movf	140,w,c	;volatile
  8367   000E56  185D               	xorwf	(??_EscriuPrimeraOrdre+4)^0,w,c
  8368   000E58  0BEF               	andlw	-17
  8369   000E5A  185D               	xorwf	(??_EscriuPrimeraOrdre+4)^0,w,c
  8370   000E5C  6E8C               	movwf	140,c	;volatile
  8371                           
  8372                           ;lcd.c: 311:   (LATDbits.LATD3 = LATDbits.LATD3 =LATDbits.LATD3 =LATDbits.LATD3 =LATDbit
      +                          s.LATD3 =(ordre & 0x01 ? 1 : 0));
  8373   000E5E  A05E               	btfss	EscriuPrimeraOrdre@ordre^0,0,c
  8374   000E60  D003               	goto	u1160
  8375   000E62  6A59               	clrf	??_EscriuPrimeraOrdre^0,c
  8376   000E64  2A59               	incf	??_EscriuPrimeraOrdre^0,f,c
  8377   000E66  D001               	goto	u1178
  8378   000E68                     u1160:
  8379   000E68  6A59               	clrf	??_EscriuPrimeraOrdre^0,c
  8380   000E6A                     u1178:
  8381   000E6A  4659               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  8382   000E6C  D840               	call	PL90	;call to abstracted procedure
  8383   000E6E  0BF7               	andlw	-9
  8384   000E70  1859               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8385   000E72  EC26  F008         	call	PL8	;call to abstracted procedure
  8386   000E76  6E5A               	movwf	(??_EscriuPrimeraOrdre+1)^0,c
  8387   000E78  465A               	rlncf	(??_EscriuPrimeraOrdre+1)^0,f,c
  8388   000E7A  D834               	call	PL68	;call to abstracted procedure
  8389   000E7C  0BF7               	andlw	-9
  8390   000E7E  185A               	xorwf	(??_EscriuPrimeraOrdre+1)^0,w,c
  8391   000E80  EC26  F008         	call	PL8	;call to abstracted procedure
  8392   000E84  6E5B               	movwf	(??_EscriuPrimeraOrdre+2)^0,c
  8393   000E86  465B               	rlncf	(??_EscriuPrimeraOrdre+2)^0,f,c
  8394   000E88  D837               	call	PL92	;call to abstracted procedure
  8395   000E8A  0BF7               	andlw	-9
  8396   000E8C  185B               	xorwf	(??_EscriuPrimeraOrdre+2)^0,w,c
  8397   000E8E  EC26  F008         	call	PL8	;call to abstracted procedure
  8398   000E92  6E5C               	movwf	(??_EscriuPrimeraOrdre+3)^0,c
  8399   000E94  465C               	rlncf	(??_EscriuPrimeraOrdre+3)^0,f,c
  8400   000E96  D821               	call	PL66	;call to abstracted procedure
  8401   000E98  0BF7               	andlw	-9
  8402   000E9A  185C               	xorwf	(??_EscriuPrimeraOrdre+3)^0,w,c
  8403   000E9C  EC26  F008         	call	PL8	;call to abstracted procedure
  8404   000EA0  6E5D               	movwf	(??_EscriuPrimeraOrdre+4)^0,c
  8405   000EA2  465D               	rlncf	(??_EscriuPrimeraOrdre+4)^0,f,c
  8406   000EA4  D815               	call	PL58	;call to abstracted procedure
  8407   000EA6  0BF7               	andlw	-9
  8408   000EA8  185D               	xorwf	(??_EscriuPrimeraOrdre+4)^0,w,c
  8409   000EAA  6E8C               	movwf	140,c	;volatile
  8410                           
  8411                           ;lcd.c: 312:  (LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 =LATDbi
      +                          ts.LATD2 =0);
  8412   000EAC  ECC4  F00D         	call	PL4	;call to abstracted procedure
  8413   000EB0  948C               	bcf	140,2,c	;volatile
  8414   000EB2  0012               	return		;funcret
  8415   000EB4                     __end_of_EscriuPrimeraOrdre:
  8416                           	callstack 0
  8417   000EB4                     PL20:
  8418                           	callstack 23
  8419   000EB4  9A95               	bcf	149,5,c	;volatile
  8420   000EB6  9895               	bcf	149,4,c	;volatile
  8421   000EB8  9695               	bcf	149,3,c	;volatile
  8422   000EBA  928C               	bcf	140,1,c	;volatile
  8423   000EBC  928C               	bcf	140,1,c	;volatile
  8424   000EBE  928C               	bcf	140,1,c	;volatile
  8425   000EC0  928C               	bcf	140,1,c	;volatile
  8426   000EC2  928C               	bcf	140,1,c	;volatile
  8427   000EC4  908C               	bcf	140,0,c	;volatile
  8428   000EC6  908C               	bcf	140,0,c	;volatile
  8429   000EC8  908C               	bcf	140,0,c	;volatile
  8430   000ECA  908C               	bcf	140,0,c	;volatile
  8431   000ECC  908C               	bcf	140,0,c	;volatile
  8432   000ECE  0012               	return	
  8433   000ED0                     __end_ofPL20:
  8434                           	callstack 0
  8435   000ED0                     PL58:
  8436                           	callstack 27
  8437   000ED0  465D               	rlncf	(??_EscriuPrimeraOrdre+4)^0,f,c
  8438   000ED2  465D               	rlncf	(??_EscriuPrimeraOrdre+4)^0,f,c
  8439   000ED4  508C               	movf	140,w,c	;volatile
  8440   000ED6  185D               	xorwf	(??_EscriuPrimeraOrdre+4)^0,w,c
  8441   000ED8  0012               	return	
  8442   000EDA                     __end_ofPL58:
  8443                           	callstack 0
  8444   000EDA                     PL66:
  8445                           	callstack 27
  8446   000EDA  465C               	rlncf	(??_EscriuPrimeraOrdre+3)^0,f,c
  8447   000EDC  465C               	rlncf	(??_EscriuPrimeraOrdre+3)^0,f,c
  8448   000EDE  508C               	movf	140,w,c	;volatile
  8449   000EE0  185C               	xorwf	(??_EscriuPrimeraOrdre+3)^0,w,c
  8450   000EE2  0012               	return	
  8451   000EE4                     __end_ofPL66:
  8452                           	callstack 0
  8453   000EE4                     PL68:
  8454                           	callstack 27
  8455   000EE4  465A               	rlncf	(??_EscriuPrimeraOrdre+1)^0,f,c
  8456   000EE6  465A               	rlncf	(??_EscriuPrimeraOrdre+1)^0,f,c
  8457   000EE8  508C               	movf	140,w,c	;volatile
  8458   000EEA  185A               	xorwf	(??_EscriuPrimeraOrdre+1)^0,w,c
  8459   000EEC  0012               	return	
  8460   000EEE                     __end_ofPL68:
  8461                           	callstack 0
  8462   000EEE                     PL90:
  8463                           	callstack 27
  8464   000EEE  4659               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  8465   000EF0  4659               	rlncf	??_EscriuPrimeraOrdre^0,f,c
  8466   000EF2  508C               	movf	140,w,c	;volatile
  8467   000EF4  1859               	xorwf	??_EscriuPrimeraOrdre^0,w,c
  8468   000EF6  0012               	return	
  8469   000EF8                     __end_ofPL90:
  8470                           	callstack 0
  8471   000EF8                     PL92:
  8472                           	callstack 27
  8473   000EF8  465B               	rlncf	(??_EscriuPrimeraOrdre+2)^0,f,c
  8474   000EFA  465B               	rlncf	(??_EscriuPrimeraOrdre+2)^0,f,c
  8475   000EFC  508C               	movf	140,w,c	;volatile
  8476   000EFE  185B               	xorwf	(??_EscriuPrimeraOrdre+2)^0,w,c
  8477   000F00  0012               	return	
  8478   000F02                     __end_ofPL92:
  8479                           	callstack 0
  8480                           
  8481 ;; *************** function _LcCursorOff *****************
  8482 ;; Defined at:
  8483 ;;		line 129 in file "lcd.c"
  8484 ;; Parameters:    Size  Location     Type
  8485 ;;		None
  8486 ;; Auto vars:     Size  Location     Type
  8487 ;;		None
  8488 ;; Return value:  Size  Location     Type
  8489 ;;                  1    wreg      void 
  8490 ;; Registers used:
  8491 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8492 ;; Tracked objects:
  8493 ;;		On entry : 0/0
  8494 ;;		On exit  : 0/0
  8495 ;;		Unchanged: 0/0
  8496 ;; Data sizes:     COMRAM   BANK0   BANK1
  8497 ;;      Params:         0       0       0
  8498 ;;      Locals:         0       0       0
  8499 ;;      Temps:          0       0       0
  8500 ;;      Totals:         0       0       0
  8501 ;;Total ram usage:        0 bytes
  8502 ;; Hardware stack levels used: 1
  8503 ;; Hardware stack levels required when called: 4
  8504 ;; This function calls:
  8505 ;;		_CantaIR
  8506 ;;		_WaitForBusy
  8507 ;; This function is called by:
  8508 ;;		_main
  8509 ;; This function uses a non-reentrant model
  8510 ;;
  8511                           
  8512                           	psect	text60
  8513   000160                     __ptext60:
  8514                           	callstack 0
  8515   000160                     _LcCursorOff:
  8516                           	callstack 26
  8517                           
  8518                           ;lcd.c: 132:  WaitForBusy();
  8519                           
  8520                           ;incstack = 0
  8521   000160  EC90  F00D         	call	_WaitForBusy	;wreg free
  8522                           
  8523                           ;lcd.c: 133:  CantaIR(0x08 | 0x04);
  8524   000164  0E0C               	movlw	12
  8525   000166  EF0F  F00F         	goto	_CantaIR
  8526   00016A                     __end_of_LcCursorOff:
  8527                           	callstack 0
  8528                           
  8529 ;; *************** function _WaitForBusy *****************
  8530 ;; Defined at:
  8531 ;;		line 286 in file "lcd.c"
  8532 ;; Parameters:    Size  Location     Type
  8533 ;;		None
  8534 ;; Auto vars:     Size  Location     Type
  8535 ;;  Busy            1   13[COMRAM] unsigned char 
  8536 ;; Return value:  Size  Location     Type
  8537 ;;                  1    wreg      void 
  8538 ;; Registers used:
  8539 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  8540 ;; Tracked objects:
  8541 ;;		On entry : 0/0
  8542 ;;		On exit  : 0/0
  8543 ;;		Unchanged: 0/0
  8544 ;; Data sizes:     COMRAM   BANK0   BANK1
  8545 ;;      Params:         0       0       0
  8546 ;;      Locals:         1       0       0
  8547 ;;      Temps:          0       0       0
  8548 ;;      Totals:         1       0       0
  8549 ;;Total ram usage:        1 bytes
  8550 ;; Hardware stack levels used: 1
  8551 ;; Hardware stack levels required when called: 3
  8552 ;; This function calls:
  8553 ;;		_TI_GetTics
  8554 ;;		_TI_ResetTics
  8555 ;; This function is called by:
  8556 ;;		_LcInit
  8557 ;;		_LcClear
  8558 ;;		_LcCursorOff
  8559 ;;		_LcGotoXY
  8560 ;;		_LcPutChar
  8561 ;; This function uses a non-reentrant model
  8562 ;;
  8563                           
  8564                           	psect	text61
  8565   001B20                     __ptext61:
  8566                           	callstack 0
  8567   001B20                     _WaitForBusy:
  8568                           	callstack 0
  8569                           
  8570                           ;lcd.c: 287:  (TRISDbits.TRISD3 = TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6
      +                           =TRISDbits.TRISD6 = 1);
  8571                           
  8572                           ;incstack = 0
  8573   001B20  EC61  F00E         	call	PL38	;call to abstracted procedure
  8574                           
  8575                           ;lcd.c: 288:  (LATDbits.LATD1 = LATDbits.LATD1 = LATDbits.LATD1 = LATDbits.LATD1 =LATDbi
      +                          ts.LATD1 = 0);
  8576   001B24  928C               	bcf	140,1,c	;volatile
  8577   001B26  928C               	bcf	140,1,c	;volatile
  8578   001B28  928C               	bcf	140,1,c	;volatile
  8579   001B2A  928C               	bcf	140,1,c	;volatile
  8580   001B2C  928C               	bcf	140,1,c	;volatile
  8581                           
  8582                           ;lcd.c: 289:  (LATDbits.LATD0 = LATDbits.LATD0 = LATDbits.LATD0 = LATDbits.LATD0 =LATDbi
      +                          ts.LATD0 = 1);
  8583   001B2E  808C               	bsf	140,0,c	;volatile
  8584   001B30  808C               	bsf	140,0,c	;volatile
  8585   001B32  808C               	bsf	140,0,c	;volatile
  8586   001B34  808C               	bsf	140,0,c	;volatile
  8587   001B36  808C               	bsf	140,0,c	;volatile
  8588                           
  8589                           ;lcd.c: 290:  TI_ResetTics(Timer);
  8590   001B38  5058               	movf	_Timer^0,w,c
  8591   001B3A  EC1B  F000         	call	_TI_ResetTics
  8592   001B3E                     l3966:
  8593                           
  8594                           ;lcd.c: 292:   (LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 =LATDb
      +                          its.LATD2 =1);(LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 =LATDbi
      +                          ts.LATD2 =1);
  8595   001B3E  D81F               	call	PL2	;call to abstracted procedure
  8596   001B40  D81E               	call	PL2	;call to abstracted procedure
  8597   001B42  848C               	bsf	140,2,c	;volatile
  8598   001B44  848C               	bsf	140,2,c	;volatile
  8599                           
  8600                           ;lcd.c: 293:   Busy = (PORTDbits.RD6);
  8601   001B46  0E00               	movlw	0
  8602   001B48  BC83               	btfsc	131,6,c	;volatile
  8603   001B4A  0E01               	movlw	1
  8604   001B4C  6E66               	movwf	WaitForBusy@Busy^0,c
  8605                           
  8606                           ;lcd.c: 294:   (LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 =LATDb
      +                          its.LATD2 =0);
  8607   001B4E  D81C               	call	PL4	;call to abstracted procedure
  8608                           
  8609                           ;lcd.c: 295:   (LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 =LATDb
      +                          its.LATD2 =0);
  8610   001B50  D81B               	call	PL4	;call to abstracted procedure
  8611   001B52  948C               	bcf	140,2,c	;volatile
  8612   001B54  948C               	bcf	140,2,c	;volatile
  8613                           
  8614                           ;lcd.c: 296:   (LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 =LATDb
      +                          its.LATD2 =1);(LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 =LATDbi
      +                          ts.LATD2 =1);
  8615   001B56  D813               	call	PL2	;call to abstracted procedure
  8616   001B58  D812               	call	PL2	;call to abstracted procedure
  8617   001B5A  848C               	bsf	140,2,c	;volatile
  8618   001B5C  848C               	bsf	140,2,c	;volatile
  8619                           
  8620                           ;lcd.c: 298:   (LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 =LATDb
      +                          its.LATD2 =0);
  8621   001B5E  D814               	call	PL4	;call to abstracted procedure
  8622                           
  8623                           ;lcd.c: 299:   (LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 =LATDb
      +                          its.LATD2 =0);
  8624   001B60  D813               	call	PL4	;call to abstracted procedure
  8625   001B62  948C               	bcf	140,2,c	;volatile
  8626   001B64  948C               	bcf	140,2,c	;volatile
  8627                           
  8628                           ;lcd.c: 300:   if (TI_GetTics(Timer)) break;
  8629   001B66  5058               	movf	_Timer^0,w,c
  8630   001B68  ECC1  F00E         	call	_TI_GetTics
  8631   001B6C  5059               	movf	?_TI_GetTics^0,w,c
  8632   001B6E  105A               	iorwf	(?_TI_GetTics+1)^0,w,c
  8633   001B70  105B               	iorwf	(?_TI_GetTics+2)^0,w,c
  8634   001B72  105C               	iorwf	(?_TI_GetTics+3)^0,w,c
  8635   001B74  E001               	bz	l3988
  8636   001B76  0012               	return	
  8637   001B78                     l3988:
  8638                           
  8639                           ;lcd.c: 301:  } while(Busy);
  8640   001B78  5066               	movf	WaitForBusy@Busy^0,w,c
  8641   001B7A  E1E1               	bnz	l3966
  8642   001B7C  0012               	return		;funcret
  8643   001B7E                     __end_of_WaitForBusy:
  8644                           	callstack 0
  8645   001B7E                     PL2:
  8646                           	callstack 23
  8647   001B7E  848C               	bsf	140,2,c	;volatile
  8648   001B80  848C               	bsf	140,2,c	;volatile
  8649   001B82  848C               	bsf	140,2,c	;volatile
  8650   001B84  848C               	bsf	140,2,c	;volatile
  8651   001B86  0012               	return	
  8652   001B88                     __end_ofPL2:
  8653                           	callstack 0
  8654   001B88                     PL4:
  8655                           	callstack 23
  8656   001B88  948C               	bcf	140,2,c	;volatile
  8657   001B8A  948C               	bcf	140,2,c	;volatile
  8658   001B8C  948C               	bcf	140,2,c	;volatile
  8659   001B8E  948C               	bcf	140,2,c	;volatile
  8660   001B90  0012               	return	
  8661   001B92                     __end_ofPL4:
  8662                           	callstack 0
  8663                           
  8664 ;; *************** function _TI_ResetTics *****************
  8665 ;; Defined at:
  8666 ;;		line 54 in file "timer.c"
  8667 ;; Parameters:    Size  Location     Type
  8668 ;;  TimerHandle     1    wreg     unsigned char 
  8669 ;; Auto vars:     Size  Location     Type
  8670 ;;  TimerHandle     1    0[COMRAM] unsigned char 
  8671 ;; Return value:  Size  Location     Type
  8672 ;;                  1    wreg      void 
  8673 ;; Registers used:
  8674 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  8675 ;; Tracked objects:
  8676 ;;		On entry : 0/0
  8677 ;;		On exit  : 0/0
  8678 ;;		Unchanged: 0/0
  8679 ;; Data sizes:     COMRAM   BANK0   BANK1
  8680 ;;      Params:         0       0       0
  8681 ;;      Locals:         1       0       0
  8682 ;;      Temps:          0       0       0
  8683 ;;      Totals:         1       0       0
  8684 ;;Total ram usage:        1 bytes
  8685 ;; Hardware stack levels used: 1
  8686 ;; Hardware stack levels required when called: 2
  8687 ;; This function calls:
  8688 ;;		Nothing
  8689 ;; This function is called by:
  8690 ;;		_Espera
  8691 ;;		_WaitForBusy
  8692 ;;		_MotorKeyboard
  8693 ;;		_ValorTecla
  8694 ;;		_MotorTX
  8695 ;;		_MotorRX
  8696 ;;		_ConfWIFI
  8697 ;;		_CloseConn
  8698 ;;		_EnterChatMode
  8699 ;;		_ReciveMSG
  8700 ;;		_MotorMenu
  8701 ;;		_MotorAltaveu
  8702 ;; This function uses a non-reentrant model
  8703 ;;
  8704                           
  8705                           	psect	text62
  8706   000036                     __ptext62:
  8707                           	callstack 0
  8708   000036                     _TI_ResetTics:
  8709                           	callstack 26
  8710                           
  8711                           ;incstack = 0
  8712                           ;TI_ResetTics@TimerHandle stored from wreg
  8713   000036  6E59               	movwf	TI_ResetTics@TimerHandle^0,c
  8714                           
  8715                           ;timer.c: 55:  (INTCONbits.GIE = 0); Timers[TimerHandle].TicsInicials=Tics; (INTCONbits.
      +                          GIE = 1);
  8716   000038  9EF2               	bcf	242,7,c	;volatile
  8717   00003A  5059               	movf	TI_ResetTics@TimerHandle^0,w,c
  8718   00003C  ECE3  F00E         	call	PL56	;call to abstracted procedure
  8719   000040  C005  FFDE         	movff	_Tics,postinc2	;volatile
  8720   000044  C006  FFDE         	movff	_Tics+1,postinc2	;volatile
  8721   000048  C007  FFDE         	movff	_Tics+2,postinc2	;volatile
  8722   00004C  C008  FFDE         	movff	_Tics+3,postinc2	;volatile
  8723   000050  8EF2               	bsf	242,7,c	;volatile
  8724   000052  0012               	return		;funcret
  8725   000054                     __end_of_TI_ResetTics:
  8726                           	callstack 0
  8727                           
  8728 ;; *************** function _CantaIR *****************
  8729 ;; Defined at:
  8730 ;;		line 254 in file "lcd.c"
  8731 ;; Parameters:    Size  Location     Type
  8732 ;;  IR              1    wreg     unsigned char 
  8733 ;; Auto vars:     Size  Location     Type
  8734 ;;  IR              1    6[COMRAM] unsigned char 
  8735 ;; Return value:  Size  Location     Type
  8736 ;;                  1    wreg      void 
  8737 ;; Registers used:
  8738 ;;		wreg, status,2, status,0, cstack
  8739 ;; Tracked objects:
  8740 ;;		On entry : 0/0
  8741 ;;		On exit  : 0/0
  8742 ;;		Unchanged: 0/0
  8743 ;; Data sizes:     COMRAM   BANK0   BANK1
  8744 ;;      Params:         0       0       0
  8745 ;;      Locals:         1       0       0
  8746 ;;      Temps:          0       0       0
  8747 ;;      Totals:         1       0       0
  8748 ;;Total ram usage:        1 bytes
  8749 ;; Hardware stack levels used: 1
  8750 ;; Hardware stack levels required when called: 3
  8751 ;; This function calls:
  8752 ;;		_CantaPartAlta
  8753 ;;		_CantaPartBaixa
  8754 ;; This function is called by:
  8755 ;;		_LcInit
  8756 ;;		_LcClear
  8757 ;;		_LcCursorOff
  8758 ;;		_LcGotoXY
  8759 ;; This function uses a non-reentrant model
  8760 ;;
  8761                           
  8762                           	psect	text63
  8763   001E1E                     __ptext63:
  8764                           	callstack 0
  8765   001E1E                     _CantaIR:
  8766                           	callstack 23
  8767                           
  8768                           ;incstack = 0
  8769                           ;CantaIR@IR stored from wreg
  8770   001E1E  6E5F               	movwf	CantaIR@IR^0,c
  8771                           
  8772                           ;lcd.c: 255:  (TRISDbits.TRISD3 = TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6
      +                           =TRISDbits.TRISD6 = 0);
  8773   001E20  9C95               	bcf	149,6,c	;volatile
  8774   001E22  9C95               	bcf	149,6,c	;volatile
  8775                           
  8776                           ;lcd.c: 256:  (LATDbits.LATD1 = LATDbits.LATD1 = LATDbits.LATD1 = LATDbits.LATD1 =LATDbi
      +                          ts.LATD1 = 0);
  8777                           
  8778                           ;lcd.c: 257:  (LATDbits.LATD0 = LATDbits.LATD0 = LATDbits.LATD0 = LATDbits.LATD0 =LATDbi
      +                          ts.LATD0 =0);
  8779   001E24  EC5A  F007         	call	PL20	;call to abstracted procedure
  8780                           
  8781                           ;lcd.c: 258:  (LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 =LATDbi
      +                          ts.LATD2 =1);
  8782   001E28  848C               	bsf	140,2,c	;volatile
  8783   001E2A  ECBF  F00D         	call	PL2	;call to abstracted procedure
  8784                           
  8785                           ;lcd.c: 259:  CantaPartAlta(IR);
  8786   001E2E  505F               	movf	CantaIR@IR^0,w,c
  8787   001E30  EC50  F008         	call	_CantaPartAlta
  8788                           
  8789                           ;lcd.c: 260:  (LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 =LATDbi
      +                          ts.LATD2 =1);
  8790   001E34  ECBF  F00D         	call	PL2	;call to abstracted procedure
  8791   001E38  848C               	bsf	140,2,c	;volatile
  8792                           
  8793                           ;lcd.c: 261:  (LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 =LATDbi
      +                          ts.LATD2 =0);
  8794   001E3A  948C               	bcf	140,2,c	;volatile
  8795   001E3C  948C               	bcf	140,2,c	;volatile
  8796   001E3E  948C               	bcf	140,2,c	;volatile
  8797   001E40  948C               	bcf	140,2,c	;volatile
  8798   001E42  948C               	bcf	140,2,c	;volatile
  8799                           
  8800                           ;lcd.c: 262:  (LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 =LATDbi
      +                          ts.LATD2 =0);
  8801   001E44  948C               	bcf	140,2,c	;volatile
  8802   001E46  ECC4  F00D         	call	PL4	;call to abstracted procedure
  8803                           
  8804                           ;lcd.c: 263:  (LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 =LATDbi
      +                          ts.LATD2 =1);
  8805   001E4A  ECBF  F00D         	call	PL2	;call to abstracted procedure
  8806   001E4E  848C               	bsf	140,2,c	;volatile
  8807                           
  8808                           ;lcd.c: 264:  CantaPartBaixa(IR);
  8809   001E50  505F               	movf	CantaIR@IR^0,w,c
  8810   001E52  EC81  F007         	call	_CantaPartBaixa
  8811                           
  8812                           ;lcd.c: 265:  (LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 =LATDbi
      +                          ts.LATD2 =1);
  8813   001E56  ECBF  F00D         	call	PL2	;call to abstracted procedure
  8814   001E5A  848C               	bsf	140,2,c	;volatile
  8815                           
  8816                           ;lcd.c: 266:  (LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 = LATDbits.LATD2 =LATDbi
      +                          ts.LATD2 =0);
  8817   001E5C  ECC4  F00D         	call	PL4	;call to abstracted procedure
  8818   001E60  948C               	bcf	140,2,c	;volatile
  8819                           
  8820                           ;lcd.c: 267:  (TRISDbits.TRISD3 = TRISDbits.TRISD4 = TRISDbits.TRISD5 = TRISDbits.TRISD6
      +                           =TRISDbits.TRISD6 = 1);
  8821   001E62  EF61  F00E         	goto	PL38	;call to abstracted procedure
  8822   001E66                     __end_of_CantaIR:
  8823                           	callstack 0
  8824                           
  8825 ;; *************** function _CantaPartBaixa *****************
  8826 ;; Defined at:
  8827 ;;		line 247 in file "lcd.c"
  8828 ;; Parameters:    Size  Location     Type
  8829 ;;  c               1    wreg     unsigned char 
  8830 ;; Auto vars:     Size  Location     Type
  8831 ;;  c               1    5[COMRAM] unsigned char 
  8832 ;; Return value:  Size  Location     Type
  8833 ;;                  1    wreg      void 
  8834 ;; Registers used:
  8835 ;;		wreg, status,2, status,0
  8836 ;; Tracked objects:
  8837 ;;		On entry : 0/0
  8838 ;;		On exit  : 0/0
  8839 ;;		Unchanged: 0/0
  8840 ;; Data sizes:     COMRAM   BANK0   BANK1
  8841 ;;      Params:         0       0       0
  8842 ;;      Locals:         1       0       0
  8843 ;;      Temps:          5       0       0
  8844 ;;      Totals:         6       0       0
  8845 ;;Total ram usage:        6 bytes
  8846 ;; Hardware stack levels used: 1
  8847 ;; Hardware stack levels required when called: 2
  8848 ;; This function calls:
  8849 ;;		Nothing
  8850 ;; This function is called by:
  8851 ;;		_CantaIR
  8852 ;;		_CantaData
  8853 ;; This function uses a non-reentrant model
  8854 ;;
  8855                           
  8856                           	psect	text64
  8857   000F02                     __ptext64:
  8858                           	callstack 0
  8859   000F02                     _CantaPartBaixa:
  8860                           	callstack 23
  8861                           
  8862                           ;incstack = 0
  8863                           ;CantaPartBaixa@c stored from wreg
  8864   000F02  6E5E               	movwf	CantaPartBaixa@c^0,c
  8865                           
  8866                           ;lcd.c: 248:   (LATDbits.LATD6 = LATDbits.LATD6 = LATDbits.LATD6 =LATDbits.LATD6 =LATDbi
      +                          ts.LATD6 =(c & 0x08 ? 1 : 0));
  8867   000F04  A65E               	btfss	CantaPartBaixa@c^0,3,c
  8868   000F06  D003               	goto	u2910
  8869   000F08  6A59               	clrf	??_CantaPartBaixa^0,c
  8870   000F0A  2A59               	incf	??_CantaPartBaixa^0,f,c
  8871   000F0C  D001               	goto	u2928
  8872   000F0E                     u2910:
  8873   000F0E  6A59               	clrf	??_CantaPartBaixa^0,c
  8874   000F10                     u2928:
  8875   000F10  3A59               	swapf	??_CantaPartBaixa^0,f,c
  8876   000F12  D8B7               	call	PL82	;call to abstracted procedure
  8877   000F14  0BBF               	andlw	-65
  8878   000F16  1859               	xorwf	??_CantaPartBaixa^0,w,c
  8879   000F18  D89F               	call	PL10	;call to abstracted procedure
  8880   000F1A  6E5A               	movwf	(??_CantaPartBaixa+1)^0,c
  8881   000F1C  3A5A               	swapf	(??_CantaPartBaixa+1)^0,f,c
  8882   000F1E  D8A7               	call	PL64	;call to abstracted procedure
  8883   000F20  0BBF               	andlw	-65
  8884   000F22  185A               	xorwf	(??_CantaPartBaixa+1)^0,w,c
  8885   000F24  D899               	call	PL10	;call to abstracted procedure
  8886   000F26  6E5B               	movwf	(??_CantaPartBaixa+2)^0,c
  8887   000F28  3A5B               	swapf	(??_CantaPartBaixa+2)^0,f,c
  8888   000F2A  D8B0               	call	PL84	;call to abstracted procedure
  8889   000F2C  0BBF               	andlw	-65
  8890   000F2E  185B               	xorwf	(??_CantaPartBaixa+2)^0,w,c
  8891   000F30  D893               	call	PL10	;call to abstracted procedure
  8892   000F32  6E5C               	movwf	(??_CantaPartBaixa+3)^0,c
  8893   000F34  3A5C               	swapf	(??_CantaPartBaixa+3)^0,f,c
  8894   000F36  D8AF               	call	PL86	;call to abstracted procedure
  8895   000F38  0BBF               	andlw	-65
  8896   000F3A  185C               	xorwf	(??_CantaPartBaixa+3)^0,w,c
  8897   000F3C  D88D               	call	PL10	;call to abstracted procedure
  8898   000F3E  6E5D               	movwf	(??_CantaPartBaixa+4)^0,c
  8899   000F40  3A5D               	swapf	(??_CantaPartBaixa+4)^0,f,c
  8900   000F42  D89A               	call	PL72	;call to abstracted procedure
  8901   000F44  0BBF               	andlw	-65
  8902   000F46  185D               	xorwf	(??_CantaPartBaixa+4)^0,w,c
  8903   000F48  6E8C               	movwf	140,c	;volatile
  8904                           
  8905                           ;lcd.c: 249:   (LATDbits.LATD5 = LATDbits.LATD5 =LATDbits.LATD5 =LATDbits.LATD5 =LATDbit
      +                          s.LATD5 =(c & 0x04 ? 1 : 0));
  8906   000F4A  A45E               	btfss	CantaPartBaixa@c^0,2,c
  8907   000F4C  D003               	goto	u2930
  8908   000F4E  6A59               	clrf	??_CantaPartBaixa^0,c
  8909   000F50  2A59               	incf	??_CantaPartBaixa^0,f,c
  8910   000F52  D001               	goto	u2948
  8911   000F54                     u2930:
  8912   000F54  6A59               	clrf	??_CantaPartBaixa^0,c
  8913   000F56                     u2948:
  8914   000F56  3A59               	swapf	??_CantaPartBaixa^0,f,c
  8915   000F58  4659               	rlncf	??_CantaPartBaixa^0,f,c
  8916   000F5A  508C               	movf	140,w,c	;volatile
  8917   000F5C  1859               	xorwf	??_CantaPartBaixa^0,w,c
  8918   000F5E  0BDF               	andlw	-33
  8919   000F60  1859               	xorwf	??_CantaPartBaixa^0,w,c
  8920   000F62  D880               	call	PL18	;call to abstracted procedure
  8921   000F64  6E5A               	movwf	(??_CantaPartBaixa+1)^0,c
  8922   000F66  3A5A               	swapf	(??_CantaPartBaixa+1)^0,f,c
  8923   000F68  465A               	rlncf	(??_CantaPartBaixa+1)^0,f,c
  8924   000F6A  508C               	movf	140,w,c	;volatile
  8925   000F6C  185A               	xorwf	(??_CantaPartBaixa+1)^0,w,c
  8926   000F6E  0BDF               	andlw	-33
  8927   000F70  185A               	xorwf	(??_CantaPartBaixa+1)^0,w,c
  8928   000F72  D878               	call	PL18	;call to abstracted procedure
  8929   000F74  6E5B               	movwf	(??_CantaPartBaixa+2)^0,c
  8930   000F76  3A5B               	swapf	(??_CantaPartBaixa+2)^0,f,c
  8931   000F78  465B               	rlncf	(??_CantaPartBaixa+2)^0,f,c
  8932   000F7A  508C               	movf	140,w,c	;volatile
  8933   000F7C  185B               	xorwf	(??_CantaPartBaixa+2)^0,w,c
  8934   000F7E  0BDF               	andlw	-33
  8935   000F80  185B               	xorwf	(??_CantaPartBaixa+2)^0,w,c
  8936   000F82  D870               	call	PL18	;call to abstracted procedure
  8937   000F84  6E5C               	movwf	(??_CantaPartBaixa+3)^0,c
  8938   000F86  3A5C               	swapf	(??_CantaPartBaixa+3)^0,f,c
  8939   000F88  465C               	rlncf	(??_CantaPartBaixa+3)^0,f,c
  8940   000F8A  508C               	movf	140,w,c	;volatile
  8941   000F8C  185C               	xorwf	(??_CantaPartBaixa+3)^0,w,c
  8942   000F8E  0BDF               	andlw	-33
  8943   000F90  185C               	xorwf	(??_CantaPartBaixa+3)^0,w,c
  8944   000F92  D868               	call	PL18	;call to abstracted procedure
  8945   000F94  6E5D               	movwf	(??_CantaPartBaixa+4)^0,c
  8946   000F96  3A5D               	swapf	(??_CantaPartBaixa+4)^0,f,c
  8947   000F98  465D               	rlncf	(??_CantaPartBaixa+4)^0,f,c
  8948   000F9A  508C               	movf	140,w,c	;volatile
  8949   000F9C  185D               	xorwf	(??_CantaPartBaixa+4)^0,w,c
  8950   000F9E  0BDF               	andlw	-33
  8951   000FA0  185D               	xorwf	(??_CantaPartBaixa+4)^0,w,c
  8952   000FA2  6E8C               	movwf	140,c	;volatile
  8953                           
  8954                           ;lcd.c: 250:   (LATDbits.LATD4 = LATDbits.LATD4 =LATDbits.LATD4 =LATDbits.LATD4 =LATDbit
      +                          s.LATD4 =(c & 0x02 ? 1 : 0));
  8955   000FA4  A25E               	btfss	CantaPartBaixa@c^0,1,c
  8956   000FA6  D003               	goto	u2950
  8957   000FA8  6A59               	clrf	??_CantaPartBaixa^0,c
  8958   000FAA  2A59               	incf	??_CantaPartBaixa^0,f,c
  8959   000FAC  D001               	goto	u2968
  8960   000FAE                     u2950:
  8961   000FAE  6A59               	clrf	??_CantaPartBaixa^0,c
  8962   000FB0                     u2968:
  8963   000FB0  3A59               	swapf	??_CantaPartBaixa^0,f,c
  8964   000FB2  508C               	movf	140,w,c	;volatile
  8965   000FB4  1859               	xorwf	??_CantaPartBaixa^0,w,c
  8966   000FB6  0BEF               	andlw	-17
  8967   000FB8  1859               	xorwf	??_CantaPartBaixa^0,w,c
  8968   000FBA  6E8C               	movwf	140,c	;volatile
  8969   000FBC  388C               	swapf	140,w,c	;volatile
  8970   000FBE  0B01               	andlw	1
  8971   000FC0  6E5A               	movwf	(??_CantaPartBaixa+1)^0,c
  8972   000FC2  3A5A               	swapf	(??_CantaPartBaixa+1)^0,f,c
  8973   000FC4  508C               	movf	140,w,c	;volatile
  8974   000FC6  185A               	xorwf	(??_CantaPartBaixa+1)^0,w,c
  8975   000FC8  0BEF               	andlw	-17
  8976   000FCA  185A               	xorwf	(??_CantaPartBaixa+1)^0,w,c
  8977   000FCC  6E8C               	movwf	140,c	;volatile
  8978   000FCE  388C               	swapf	140,w,c	;volatile
  8979   000FD0  0B01               	andlw	1
  8980   000FD2  6E5B               	movwf	(??_CantaPartBaixa+2)^0,c
  8981   000FD4  3A5B               	swapf	(??_CantaPartBaixa+2)^0,f,c
  8982   000FD6  508C               	movf	140,w,c	;volatile
  8983   000FD8  185B               	xorwf	(??_CantaPartBaixa+2)^0,w,c
  8984   000FDA  0BEF               	andlw	-17
  8985   000FDC  185B               	xorwf	(??_CantaPartBaixa+2)^0,w,c
  8986   000FDE  6E8C               	movwf	140,c	;volatile
  8987   000FE0  388C               	swapf	140,w,c	;volatile
  8988   000FE2  0B01               	andlw	1
  8989   000FE4  6E5C               	movwf	(??_CantaPartBaixa+3)^0,c
  8990   000FE6  3A5C               	swapf	(??_CantaPartBaixa+3)^0,f,c
  8991   000FE8  508C               	movf	140,w,c	;volatile
  8992   000FEA  185C               	xorwf	(??_CantaPartBaixa+3)^0,w,c
  8993   000FEC  0BEF               	andlw	-17
  8994   000FEE  185C               	xorwf	(??_CantaPartBaixa+3)^0,w,c
  8995   000FF0  6E8C               	movwf	140,c	;volatile
  8996   000FF2  388C               	swapf	140,w,c	;volatile
  8997   000FF4  0B01               	andlw	1
  8998   000FF6  6E5D               	movwf	(??_CantaPartBaixa+4)^0,c
  8999   000FF8  3A5D               	swapf	(??_CantaPartBaixa+4)^0,f,c
  9000   000FFA  508C               	movf	140,w,c	;volatile
  9001   000FFC  185D               	xorwf	(??_CantaPartBaixa+4)^0,w,c
  9002   000FFE  0BEF               	andlw	-17
  9003   001000  185D               	xorwf	(??_CantaPartBaixa+4)^0,w,c
  9004   001002  6E8C               	movwf	140,c	;volatile
  9005                           
  9006                           ;lcd.c: 251:   (LATDbits.LATD3 = LATDbits.LATD3 =LATDbits.LATD3 =LATDbits.LATD3 =LATDbit
      +                          s.LATD3 =(c & 0x01 ? 1 : 0));
  9007   001004  A05E               	btfss	CantaPartBaixa@c^0,0,c
  9008   001006  D003               	goto	u2970
  9009   001008  6A59               	clrf	??_CantaPartBaixa^0,c
  9010   00100A  2A59               	incf	??_CantaPartBaixa^0,f,c
  9011   00100C  D001               	goto	u2988
  9012   00100E                     u2970:
  9013   00100E  6A59               	clrf	??_CantaPartBaixa^0,c
  9014   001010                     u2988:
  9015   001010  4659               	rlncf	??_CantaPartBaixa^0,f,c
  9016   001012  D837               	call	PL82	;call to abstracted procedure
  9017   001014  0BF7               	andlw	-9
  9018   001016  1859               	xorwf	??_CantaPartBaixa^0,w,c
  9019   001018  D819               	call	PL8	;call to abstracted procedure
  9020   00101A  6E5A               	movwf	(??_CantaPartBaixa+1)^0,c
  9021   00101C  465A               	rlncf	(??_CantaPartBaixa+1)^0,f,c
  9022   00101E  D827               	call	PL64	;call to abstracted procedure
  9023   001020  0BF7               	andlw	-9
  9024   001022  185A               	xorwf	(??_CantaPartBaixa+1)^0,w,c
  9025   001024  D813               	call	PL8	;call to abstracted procedure
  9026   001026  6E5B               	movwf	(??_CantaPartBaixa+2)^0,c
  9027   001028  465B               	rlncf	(??_CantaPartBaixa+2)^0,f,c
  9028   00102A  D830               	call	PL84	;call to abstracted procedure
  9029   00102C  0BF7               	andlw	-9
  9030   00102E  185B               	xorwf	(??_CantaPartBaixa+2)^0,w,c
  9031   001030  D80D               	call	PL8	;call to abstracted procedure
  9032   001032  6E5C               	movwf	(??_CantaPartBaixa+3)^0,c
  9033   001034  465C               	rlncf	(??_CantaPartBaixa+3)^0,f,c
  9034   001036  D82F               	call	PL86	;call to abstracted procedure
  9035   001038  0BF7               	andlw	-9
  9036   00103A  185C               	xorwf	(??_CantaPartBaixa+3)^0,w,c
  9037   00103C  D807               	call	PL8	;call to abstracted procedure
  9038   00103E  6E5D               	movwf	(??_CantaPartBaixa+4)^0,c
  9039   001040  465D               	rlncf	(??_CantaPartBaixa+4)^0,f,c
  9040   001042  D81A               	call	PL72	;call to abstracted procedure
  9041   001044  0BF7               	andlw	-9
  9042   001046  185D               	xorwf	(??_CantaPartBaixa+4)^0,w,c
  9043   001048  6E8C               	movwf	140,c	;volatile
  9044   00104A  0012               	return		;funcret
  9045   00104C                     __end_of_CantaPartBaixa:
  9046                           	callstack 0
  9047   00104C                     PL8:
  9048                           	callstack 23
  9049   00104C  6E8C               	movwf	140,c	;volatile
  9050   00104E  308C               	rrcf	140,w,c	;volatile
  9051   001050  32E8               	rrcf	wreg,f,c
  9052   001052  32E8               	rrcf	wreg,f,c
  9053   001054  0B01               	andlw	1
  9054   001056  0012               	return	
  9055   001058                     __end_ofPL8:
  9056                           	callstack 0
  9057   001058                     PL10:
  9058                           	callstack 23
  9059   001058  6E8C               	movwf	140,c	;volatile
  9060   00105A  388C               	swapf	140,w,c	;volatile
  9061   00105C  32E8               	rrcf	wreg,f,c
  9062   00105E  32E8               	rrcf	wreg,f,c
  9063   001060  0B01               	andlw	1
  9064   001062  0012               	return	
  9065   001064                     __end_ofPL10:
  9066                           	callstack 0
  9067   001064                     PL18:
  9068                           	callstack 23
  9069   001064  6E8C               	movwf	140,c	;volatile
  9070   001066  388C               	swapf	140,w,c	;volatile
  9071   001068  32E8               	rrcf	wreg,f,c
  9072   00106A  0B01               	andlw	1
  9073   00106C  0012               	return	
  9074   00106E                     __end_ofPL18:
  9075                           	callstack 0
  9076   00106E                     PL64:
  9077                           	callstack 23
  9078   00106E  465A               	rlncf	(??_CantaPartBaixa+1)^0,f,c
  9079   001070  465A               	rlncf	(??_CantaPartBaixa+1)^0,f,c
  9080   001072  508C               	movf	140,w,c	;volatile
  9081   001074  185A               	xorwf	(??_CantaPartBaixa+1)^0,w,c
  9082   001076  0012               	return	
  9083   001078                     __end_ofPL64:
  9084                           	callstack 0
  9085   001078                     PL72:
  9086                           	callstack 23
  9087   001078  465D               	rlncf	(??_CantaPartBaixa+4)^0,f,c
  9088   00107A  465D               	rlncf	(??_CantaPartBaixa+4)^0,f,c
  9089   00107C  508C               	movf	140,w,c	;volatile
  9090   00107E  185D               	xorwf	(??_CantaPartBaixa+4)^0,w,c
  9091   001080  0012               	return	
  9092   001082                     __end_ofPL72:
  9093                           	callstack 0
  9094   001082                     PL82:
  9095                           	callstack 23
  9096   001082  4659               	rlncf	??_CantaPartBaixa^0,f,c
  9097   001084  4659               	rlncf	??_CantaPartBaixa^0,f,c
  9098   001086  508C               	movf	140,w,c	;volatile
  9099   001088  1859               	xorwf	??_CantaPartBaixa^0,w,c
  9100   00108A  0012               	return	
  9101   00108C                     __end_ofPL82:
  9102                           	callstack 0
  9103   00108C                     PL84:
  9104                           	callstack 23
  9105   00108C  465B               	rlncf	(??_CantaPartBaixa+2)^0,f,c
  9106   00108E  465B               	rlncf	(??_CantaPartBaixa+2)^0,f,c
  9107   001090  508C               	movf	140,w,c	;volatile
  9108   001092  185B               	xorwf	(??_CantaPartBaixa+2)^0,w,c
  9109   001094  0012               	return	
  9110   001096                     __end_ofPL84:
  9111                           	callstack 0
  9112   001096                     PL86:
  9113                           	callstack 23
  9114   001096  465C               	rlncf	(??_CantaPartBaixa+3)^0,f,c
  9115   001098  465C               	rlncf	(??_CantaPartBaixa+3)^0,f,c
  9116   00109A  508C               	movf	140,w,c	;volatile
  9117   00109C  185C               	xorwf	(??_CantaPartBaixa+3)^0,w,c
  9118   00109E  0012               	return	
  9119   0010A0                     __end_ofPL86:
  9120                           	callstack 0
  9121                           
  9122 ;; *************** function _CantaPartAlta *****************
  9123 ;; Defined at:
  9124 ;;		line 240 in file "lcd.c"
  9125 ;; Parameters:    Size  Location     Type
  9126 ;;  c               1    wreg     unsigned char 
  9127 ;; Auto vars:     Size  Location     Type
  9128 ;;  c               1    5[COMRAM] unsigned char 
  9129 ;; Return value:  Size  Location     Type
  9130 ;;                  1    wreg      void 
  9131 ;; Registers used:
  9132 ;;		wreg, status,2, status,0
  9133 ;; Tracked objects:
  9134 ;;		On entry : 0/0
  9135 ;;		On exit  : 0/0
  9136 ;;		Unchanged: 0/0
  9137 ;; Data sizes:     COMRAM   BANK0   BANK1
  9138 ;;      Params:         0       0       0
  9139 ;;      Locals:         1       0       0
  9140 ;;      Temps:          5       0       0
  9141 ;;      Totals:         6       0       0
  9142 ;;Total ram usage:        6 bytes
  9143 ;; Hardware stack levels used: 1
  9144 ;; Hardware stack levels required when called: 2
  9145 ;; This function calls:
  9146 ;;		Nothing
  9147 ;; This function is called by:
  9148 ;;		_CantaIR
  9149 ;;		_CantaData
  9150 ;; This function uses a non-reentrant model
  9151 ;;
  9152                           
  9153                           	psect	text65
  9154   0010A0                     __ptext65:
  9155                           	callstack 0
  9156   0010A0                     _CantaPartAlta:
  9157                           	callstack 23
  9158                           
  9159                           ;incstack = 0
  9160                           ;CantaPartAlta@c stored from wreg
  9161   0010A0  6E5E               	movwf	CantaPartAlta@c^0,c
  9162                           
  9163                           ;lcd.c: 241:   (LATDbits.LATD6 = LATDbits.LATD6 = LATDbits.LATD6 =LATDbits.LATD6 =LATDbi
      +                          ts.LATD6 =(c & 0x80 ? 1 : 0));
  9164   0010A2  AE5E               	btfss	CantaPartAlta@c^0,7,c
  9165   0010A4  D003               	goto	u2830
  9166   0010A6  6A59               	clrf	??_CantaPartAlta^0,c
  9167   0010A8  2A59               	incf	??_CantaPartAlta^0,f,c
  9168   0010AA  D001               	goto	u2848
  9169   0010AC                     u2830:
  9170   0010AC  6A59               	clrf	??_CantaPartAlta^0,c
  9171   0010AE                     u2848:
  9172   0010AE  3A59               	swapf	??_CantaPartAlta^0,f,c
  9173   0010B0  D8AD               	call	PL70	;call to abstracted procedure
  9174   0010B2  0BBF               	andlw	-65
  9175   0010B4  1859               	xorwf	??_CantaPartAlta^0,w,c
  9176   0010B6  EC2C  F008         	call	PL10	;call to abstracted procedure
  9177   0010BA  6E5A               	movwf	(??_CantaPartAlta+1)^0,c
  9178   0010BC  3A5A               	swapf	(??_CantaPartAlta+1)^0,f,c
  9179   0010BE  D8AB               	call	PL76	;call to abstracted procedure
  9180   0010C0  0BBF               	andlw	-65
  9181   0010C2  185A               	xorwf	(??_CantaPartAlta+1)^0,w,c
  9182   0010C4  EC2C  F008         	call	PL10	;call to abstracted procedure
  9183   0010C8  6E5B               	movwf	(??_CantaPartAlta+2)^0,c
  9184   0010CA  3A5B               	swapf	(??_CantaPartAlta+2)^0,f,c
  9185   0010CC  D8AE               	call	PL88	;call to abstracted procedure
  9186   0010CE  0BBF               	andlw	-65
  9187   0010D0  185B               	xorwf	(??_CantaPartAlta+2)^0,w,c
  9188   0010D2  EC2C  F008         	call	PL10	;call to abstracted procedure
  9189   0010D6  6E5C               	movwf	(??_CantaPartAlta+3)^0,c
  9190   0010D8  3A5C               	swapf	(??_CantaPartAlta+3)^0,f,c
  9191   0010DA  D8A2               	call	PL80	;call to abstracted procedure
  9192   0010DC  0BBF               	andlw	-65
  9193   0010DE  185C               	xorwf	(??_CantaPartAlta+3)^0,w,c
  9194   0010E0  EC2C  F008         	call	PL10	;call to abstracted procedure
  9195   0010E4  6E5D               	movwf	(??_CantaPartAlta+4)^0,c
  9196   0010E6  3A5D               	swapf	(??_CantaPartAlta+4)^0,f,c
  9197   0010E8  D88C               	call	PL62	;call to abstracted procedure
  9198   0010EA  0BBF               	andlw	-65
  9199   0010EC  185D               	xorwf	(??_CantaPartAlta+4)^0,w,c
  9200   0010EE  6E8C               	movwf	140,c	;volatile
  9201                           
  9202                           ;lcd.c: 242:   (LATDbits.LATD5 = LATDbits.LATD5 =LATDbits.LATD5 =LATDbits.LATD5 =LATDbit
      +                          s.LATD5 =(c & 0x40 ? 1 : 0));
  9203   0010F0  AC5E               	btfss	CantaPartAlta@c^0,6,c
  9204   0010F2  D003               	goto	u2850
  9205   0010F4  6A59               	clrf	??_CantaPartAlta^0,c
  9206   0010F6  2A59               	incf	??_CantaPartAlta^0,f,c
  9207   0010F8  D001               	goto	u2868
  9208   0010FA                     u2850:
  9209   0010FA  6A59               	clrf	??_CantaPartAlta^0,c
  9210   0010FC                     u2868:
  9211   0010FC  3A59               	swapf	??_CantaPartAlta^0,f,c
  9212   0010FE  4659               	rlncf	??_CantaPartAlta^0,f,c
  9213   001100  508C               	movf	140,w,c	;volatile
  9214   001102  1859               	xorwf	??_CantaPartAlta^0,w,c
  9215   001104  0BDF               	andlw	-33
  9216   001106  1859               	xorwf	??_CantaPartAlta^0,w,c
  9217   001108  EC32  F008         	call	PL18	;call to abstracted procedure
  9218   00110C  6E5A               	movwf	(??_CantaPartAlta+1)^0,c
  9219   00110E  3A5A               	swapf	(??_CantaPartAlta+1)^0,f,c
  9220   001110  465A               	rlncf	(??_CantaPartAlta+1)^0,f,c
  9221   001112  508C               	movf	140,w,c	;volatile
  9222   001114  185A               	xorwf	(??_CantaPartAlta+1)^0,w,c
  9223   001116  0BDF               	andlw	-33
  9224   001118  185A               	xorwf	(??_CantaPartAlta+1)^0,w,c
  9225   00111A  EC32  F008         	call	PL18	;call to abstracted procedure
  9226   00111E  6E5B               	movwf	(??_CantaPartAlta+2)^0,c
  9227   001120  3A5B               	swapf	(??_CantaPartAlta+2)^0,f,c
  9228   001122  465B               	rlncf	(??_CantaPartAlta+2)^0,f,c
  9229   001124  508C               	movf	140,w,c	;volatile
  9230   001126  185B               	xorwf	(??_CantaPartAlta+2)^0,w,c
  9231   001128  0BDF               	andlw	-33
  9232   00112A  185B               	xorwf	(??_CantaPartAlta+2)^0,w,c
  9233   00112C  EC32  F008         	call	PL18	;call to abstracted procedure
  9234   001130  6E5C               	movwf	(??_CantaPartAlta+3)^0,c
  9235   001132  3A5C               	swapf	(??_CantaPartAlta+3)^0,f,c
  9236   001134  465C               	rlncf	(??_CantaPartAlta+3)^0,f,c
  9237   001136  508C               	movf	140,w,c	;volatile
  9238   001138  185C               	xorwf	(??_CantaPartAlta+3)^0,w,c
  9239   00113A  0BDF               	andlw	-33
  9240   00113C  185C               	xorwf	(??_CantaPartAlta+3)^0,w,c
  9241   00113E  EC32  F008         	call	PL18	;call to abstracted procedure
  9242   001142  6E5D               	movwf	(??_CantaPartAlta+4)^0,c
  9243   001144  3A5D               	swapf	(??_CantaPartAlta+4)^0,f,c
  9244   001146  465D               	rlncf	(??_CantaPartAlta+4)^0,f,c
  9245   001148  508C               	movf	140,w,c	;volatile
  9246   00114A  185D               	xorwf	(??_CantaPartAlta+4)^0,w,c
  9247   00114C  0BDF               	andlw	-33
  9248   00114E  185D               	xorwf	(??_CantaPartAlta+4)^0,w,c
  9249   001150  6E8C               	movwf	140,c	;volatile
  9250                           
  9251                           ;lcd.c: 243:   (LATDbits.LATD4 = LATDbits.LATD4 =LATDbits.LATD4 =LATDbits.LATD4 =LATDbit
      +                          s.LATD4 =(c & 0x20 ? 1 : 0));
  9252   001152  AA5E               	btfss	CantaPartAlta@c^0,5,c
  9253   001154  D003               	goto	u2870
  9254   001156  6A59               	clrf	??_CantaPartAlta^0,c
  9255   001158  2A59               	incf	??_CantaPartAlta^0,f,c
  9256   00115A  D001               	goto	u2888
  9257   00115C                     u2870:
  9258   00115C  6A59               	clrf	??_CantaPartAlta^0,c
  9259   00115E                     u2888:
  9260   00115E  3A59               	swapf	??_CantaPartAlta^0,f,c
  9261   001160  508C               	movf	140,w,c	;volatile
  9262   001162  1859               	xorwf	??_CantaPartAlta^0,w,c
  9263   001164  0BEF               	andlw	-17
  9264   001166  1859               	xorwf	??_CantaPartAlta^0,w,c
  9265   001168  6E8C               	movwf	140,c	;volatile
  9266   00116A  388C               	swapf	140,w,c	;volatile
  9267   00116C  0B01               	andlw	1
  9268   00116E  6E5A               	movwf	(??_CantaPartAlta+1)^0,c
  9269   001170  3A5A               	swapf	(??_CantaPartAlta+1)^0,f,c
  9270   001172  508C               	movf	140,w,c	;volatile
  9271   001174  185A               	xorwf	(??_CantaPartAlta+1)^0,w,c
  9272   001176  0BEF               	andlw	-17
  9273   001178  185A               	xorwf	(??_CantaPartAlta+1)^0,w,c
  9274   00117A  6E8C               	movwf	140,c	;volatile
  9275   00117C  388C               	swapf	140,w,c	;volatile
  9276   00117E  0B01               	andlw	1
  9277   001180  6E5B               	movwf	(??_CantaPartAlta+2)^0,c
  9278   001182  3A5B               	swapf	(??_CantaPartAlta+2)^0,f,c
  9279   001184  508C               	movf	140,w,c	;volatile
  9280   001186  185B               	xorwf	(??_CantaPartAlta+2)^0,w,c
  9281   001188  0BEF               	andlw	-17
  9282   00118A  185B               	xorwf	(??_CantaPartAlta+2)^0,w,c
  9283   00118C  6E8C               	movwf	140,c	;volatile
  9284   00118E  388C               	swapf	140,w,c	;volatile
  9285   001190  0B01               	andlw	1
  9286   001192  6E5C               	movwf	(??_CantaPartAlta+3)^0,c
  9287   001194  3A5C               	swapf	(??_CantaPartAlta+3)^0,f,c
  9288   001196  508C               	movf	140,w,c	;volatile
  9289   001198  185C               	xorwf	(??_CantaPartAlta+3)^0,w,c
  9290   00119A  0BEF               	andlw	-17
  9291   00119C  185C               	xorwf	(??_CantaPartAlta+3)^0,w,c
  9292   00119E  6E8C               	movwf	140,c	;volatile
  9293   0011A0  388C               	swapf	140,w,c	;volatile
  9294   0011A2  0B01               	andlw	1
  9295   0011A4  6E5D               	movwf	(??_CantaPartAlta+4)^0,c
  9296   0011A6  3A5D               	swapf	(??_CantaPartAlta+4)^0,f,c
  9297   0011A8  508C               	movf	140,w,c	;volatile
  9298   0011AA  185D               	xorwf	(??_CantaPartAlta+4)^0,w,c
  9299   0011AC  0BEF               	andlw	-17
  9300   0011AE  185D               	xorwf	(??_CantaPartAlta+4)^0,w,c
  9301   0011B0  6E8C               	movwf	140,c	;volatile
  9302                           
  9303                           ;lcd.c: 244:   (LATDbits.LATD3 = LATDbits.LATD3 =LATDbits.LATD3 =LATDbits.LATD3 =LATDbit
      +                          s.LATD3 =(c & 0x10 ? 1 : 0));
  9304   0011B2  A85E               	btfss	CantaPartAlta@c^0,4,c
  9305   0011B4  D003               	goto	u2890
  9306   0011B6  6A59               	clrf	??_CantaPartAlta^0,c
  9307   0011B8  2A59               	incf	??_CantaPartAlta^0,f,c
  9308   0011BA  D001               	goto	u2908
  9309   0011BC                     u2890:
  9310   0011BC  6A59               	clrf	??_CantaPartAlta^0,c
  9311   0011BE                     u2908:
  9312   0011BE  4659               	rlncf	??_CantaPartAlta^0,f,c
  9313   0011C0  D825               	call	PL70	;call to abstracted procedure
  9314   0011C2  0BF7               	andlw	-9
  9315   0011C4  1859               	xorwf	??_CantaPartAlta^0,w,c
  9316   0011C6  EC26  F008         	call	PL8	;call to abstracted procedure
  9317   0011CA  6E5A               	movwf	(??_CantaPartAlta+1)^0,c
  9318   0011CC  465A               	rlncf	(??_CantaPartAlta+1)^0,f,c
  9319   0011CE  D823               	call	PL76	;call to abstracted procedure
  9320   0011D0  0BF7               	andlw	-9
  9321   0011D2  185A               	xorwf	(??_CantaPartAlta+1)^0,w,c
  9322   0011D4  EC26  F008         	call	PL8	;call to abstracted procedure
  9323   0011D8  6E5B               	movwf	(??_CantaPartAlta+2)^0,c
  9324   0011DA  465B               	rlncf	(??_CantaPartAlta+2)^0,f,c
  9325   0011DC  D826               	call	PL88	;call to abstracted procedure
  9326   0011DE  0BF7               	andlw	-9
  9327   0011E0  185B               	xorwf	(??_CantaPartAlta+2)^0,w,c
  9328   0011E2  EC26  F008         	call	PL8	;call to abstracted procedure
  9329   0011E6  6E5C               	movwf	(??_CantaPartAlta+3)^0,c
  9330   0011E8  465C               	rlncf	(??_CantaPartAlta+3)^0,f,c
  9331   0011EA  D81A               	call	PL80	;call to abstracted procedure
  9332   0011EC  0BF7               	andlw	-9
  9333   0011EE  185C               	xorwf	(??_CantaPartAlta+3)^0,w,c
  9334   0011F0  EC26  F008         	call	PL8	;call to abstracted procedure
  9335   0011F4  6E5D               	movwf	(??_CantaPartAlta+4)^0,c
  9336   0011F6  465D               	rlncf	(??_CantaPartAlta+4)^0,f,c
  9337   0011F8  D804               	call	PL62	;call to abstracted procedure
  9338   0011FA  0BF7               	andlw	-9
  9339   0011FC  185D               	xorwf	(??_CantaPartAlta+4)^0,w,c
  9340   0011FE  6E8C               	movwf	140,c	;volatile
  9341   001200  0012               	return		;funcret
  9342   001202                     __end_of_CantaPartAlta:
  9343                           	callstack 0
  9344   001202                     PL62:
  9345                           	callstack 23
  9346   001202  465D               	rlncf	(??_CantaPartAlta+4)^0,f,c
  9347   001204  465D               	rlncf	(??_CantaPartAlta+4)^0,f,c
  9348   001206  508C               	movf	140,w,c	;volatile
  9349   001208  185D               	xorwf	(??_CantaPartAlta+4)^0,w,c
  9350   00120A  0012               	return	
  9351   00120C                     __end_ofPL62:
  9352                           	callstack 0
  9353   00120C                     PL70:
  9354                           	callstack 23
  9355   00120C  4659               	rlncf	??_CantaPartAlta^0,f,c
  9356   00120E  4659               	rlncf	??_CantaPartAlta^0,f,c
  9357   001210  508C               	movf	140,w,c	;volatile
  9358   001212  1859               	xorwf	??_CantaPartAlta^0,w,c
  9359   001214  0012               	return	
  9360   001216                     __end_ofPL70:
  9361                           	callstack 0
  9362   001216                     PL76:
  9363                           	callstack 23
  9364   001216  465A               	rlncf	(??_CantaPartAlta+1)^0,f,c
  9365   001218  465A               	rlncf	(??_CantaPartAlta+1)^0,f,c
  9366   00121A  508C               	movf	140,w,c	;volatile
  9367   00121C  185A               	xorwf	(??_CantaPartAlta+1)^0,w,c
  9368   00121E  0012               	return	
  9369   001220                     __end_ofPL76:
  9370                           	callstack 0
  9371   001220                     PL80:
  9372                           	callstack 23
  9373   001220  465C               	rlncf	(??_CantaPartAlta+3)^0,f,c
  9374   001222  465C               	rlncf	(??_CantaPartAlta+3)^0,f,c
  9375   001224  508C               	movf	140,w,c	;volatile
  9376   001226  185C               	xorwf	(??_CantaPartAlta+3)^0,w,c
  9377   001228  0012               	return	
  9378   00122A                     __end_ofPL80:
  9379                           	callstack 0
  9380   00122A                     PL88:
  9381                           	callstack 23
  9382   00122A  465B               	rlncf	(??_CantaPartAlta+2)^0,f,c
  9383   00122C  465B               	rlncf	(??_CantaPartAlta+2)^0,f,c
  9384   00122E  508C               	movf	140,w,c	;volatile
  9385   001230  185B               	xorwf	(??_CantaPartAlta+2)^0,w,c
  9386   001232  0012               	return	
  9387   001234                     __end_ofPL88:
  9388                           	callstack 0
  9389                           
  9390 ;; *************** function _KeyBoardInit *****************
  9391 ;; Defined at:
  9392 ;;		line 17 in file "teclat.c"
  9393 ;; Parameters:    Size  Location     Type
  9394 ;;		None
  9395 ;; Auto vars:     Size  Location     Type
  9396 ;;  isBusy          1    3[COMRAM] unsigned char 
  9397 ;; Return value:  Size  Location     Type
  9398 ;;                  1    wreg      void 
  9399 ;; Registers used:
  9400 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9401 ;; Tracked objects:
  9402 ;;		On entry : 0/0
  9403 ;;		On exit  : 0/0
  9404 ;;		Unchanged: 0/0
  9405 ;; Data sizes:     COMRAM   BANK0   BANK1
  9406 ;;      Params:         0       0       0
  9407 ;;      Locals:         1       0       0
  9408 ;;      Temps:          0       0       0
  9409 ;;      Totals:         1       0       0
  9410 ;;Total ram usage:        1 bytes
  9411 ;; Hardware stack levels used: 1
  9412 ;; Hardware stack levels required when called: 3
  9413 ;; This function calls:
  9414 ;;		_TI_NewTimer
  9415 ;; This function is called by:
  9416 ;;		_main
  9417 ;; This function uses a non-reentrant model
  9418 ;;
  9419                           
  9420                           	psect	text66
  9421   001F54                     __ptext66:
  9422                           	callstack 0
  9423   001F54                     _KeyBoardInit:
  9424                           	callstack 27
  9425                           
  9426                           ;teclat.c: 18:     char isBusy = TI_NewTimer(&timer);
  9427                           
  9428                           ;incstack = 0
  9429   001F54  0E57               	movlw	low _timer
  9430   001F56  6E59               	movwf	TI_NewTimer@TimerHandle^0,c
  9431   001F58  EC78  F00F         	call	_TI_NewTimer	;wreg free
  9432   001F5C  6E5C               	movwf	KeyBoardInit@isBusy^0,c
  9433   001F5E                     l5396:
  9434   001F5E  505C               	movf	KeyBoardInit@isBusy^0,w,c
  9435   001F60  E0FE               	bz	l5396
  9436                           
  9437                           ;teclat.c: 21:     TRISBbits.RB2=0;
  9438   001F62  9493               	bcf	147,2,c	;volatile
  9439                           
  9440                           ;teclat.c: 22:     TRISBbits.RB4=0;
  9441   001F64  9893               	bcf	147,4,c	;volatile
  9442                           
  9443                           ;teclat.c: 23:     TRISBbits.RB6=0;
  9444   001F66  9C93               	bcf	147,6,c	;volatile
  9445                           
  9446                           ;teclat.c: 25:     TRISBbits.RB0=1;
  9447   001F68  8093               	bsf	147,0,c	;volatile
  9448                           
  9449                           ;teclat.c: 26:     TRISBbits.RB1=1;
  9450   001F6A  8293               	bsf	147,1,c	;volatile
  9451                           
  9452                           ;teclat.c: 27:     TRISBbits.RB3=1;
  9453   001F6C  8693               	bsf	147,3,c	;volatile
  9454                           
  9455                           ;teclat.c: 28:     TRISBbits.RB5=1;
  9456   001F6E  8A93               	bsf	147,5,c	;volatile
  9457                           
  9458                           ;teclat.c: 30:     TRISAbits.RA3=0;
  9459   001F70  9692               	bcf	146,3,c	;volatile
  9460                           
  9461                           ;teclat.c: 34:     columna=0;
  9462   001F72  6A45               	clrf	_columna^0,c
  9463                           
  9464                           ;teclat.c: 35:     state=0;
  9465   001F74  6A46               	clrf	_state^0,c
  9466                           
  9467                           ;teclat.c: 38:     LATBbits.LATB2=0;
  9468   001F76  948A               	bcf	138,2,c	;volatile
  9469                           
  9470                           ;teclat.c: 39:     LATBbits.LATB4=1;
  9471   001F78  888A               	bsf	138,4,c	;volatile
  9472                           
  9473                           ;teclat.c: 40:     LATBbits.LATB6=0;
  9474   001F7A  9C8A               	bcf	138,6,c	;volatile
  9475   001F7C  0012               	return		;funcret
  9476   001F7E                     __end_of_KeyBoardInit:
  9477                           	callstack 0
  9478                           
  9479 ;; *************** function _JoyInit *****************
  9480 ;; Defined at:
  9481 ;;		line 16 in file "joystick.c"
  9482 ;; Parameters:    Size  Location     Type
  9483 ;;		None
  9484 ;; Auto vars:     Size  Location     Type
  9485 ;;		None
  9486 ;; Return value:  Size  Location     Type
  9487 ;;                  1    wreg      void 
  9488 ;; Registers used:
  9489 ;;		wreg, status,2
  9490 ;; Tracked objects:
  9491 ;;		On entry : 0/0
  9492 ;;		On exit  : 0/0
  9493 ;;		Unchanged: 0/0
  9494 ;; Data sizes:     COMRAM   BANK0   BANK1
  9495 ;;      Params:         0       0       0
  9496 ;;      Locals:         0       0       0
  9497 ;;      Temps:          0       0       0
  9498 ;;      Totals:         0       0       0
  9499 ;;Total ram usage:        0 bytes
  9500 ;; Hardware stack levels used: 1
  9501 ;; Hardware stack levels required when called: 2
  9502 ;; This function calls:
  9503 ;;		Nothing
  9504 ;; This function is called by:
  9505 ;;		_main
  9506 ;; This function uses a non-reentrant model
  9507 ;;
  9508                           
  9509                           	psect	text67
  9510   001FF0                     __ptext67:
  9511                           	callstack 0
  9512   001FF0                     _JoyInit:
  9513                           	callstack 28
  9514                           
  9515                           ;joystick.c: 19:     ADCON1=0x0D;
  9516                           
  9517                           ;incstack = 0
  9518   001FF0  0E0D               	movlw	13
  9519   001FF2  6EC1               	movwf	193,c	;volatile
  9520                           
  9521                           ;joystick.c: 20:     ADCON2=0x24;
  9522   001FF4  0E24               	movlw	36
  9523   001FF6  6EC0               	movwf	192,c	;volatile
  9524                           
  9525                           ;joystick.c: 21:     ADCON0=0x01;
  9526   001FF8  0E01               	movlw	1
  9527   001FFA  6EC2               	movwf	194,c	;volatile
  9528                           
  9529                           ;joystick.c: 25:     accio=0;
  9530   001FFC  6A13               	clrf	_estatAnterior^0,c
  9531   001FFE  0012               	return		;funcret
  9532   002000                     __end_of_JoyInit:
  9533                           	callstack 0
  9534                           
  9535 ;; *************** function _InitAltaveu *****************
  9536 ;; Defined at:
  9537 ;;		line 14 in file "altaveu.c"
  9538 ;; Parameters:    Size  Location     Type
  9539 ;;		None
  9540 ;; Auto vars:     Size  Location     Type
  9541 ;;		None
  9542 ;; Return value:  Size  Location     Type
  9543 ;;                  1    wreg      void 
  9544 ;; Registers used:
  9545 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9546 ;; Tracked objects:
  9547 ;;		On entry : 3F/0
  9548 ;;		On exit  : 0/0
  9549 ;;		Unchanged: 0/0
  9550 ;; Data sizes:     COMRAM   BANK0   BANK1
  9551 ;;      Params:         0       0       0
  9552 ;;      Locals:         0       0       0
  9553 ;;      Temps:          0       0       0
  9554 ;;      Totals:         0       0       0
  9555 ;;Total ram usage:        0 bytes
  9556 ;; Hardware stack levels used: 1
  9557 ;; Hardware stack levels required when called: 3
  9558 ;; This function calls:
  9559 ;;		_TI_GetTics
  9560 ;; This function is called by:
  9561 ;;		_main
  9562 ;; This function uses a non-reentrant model
  9563 ;;
  9564                           
  9565                           	psect	text68
  9566   0000BA                     __ptext68:
  9567                           	callstack 0
  9568   0000BA                     _InitAltaveu:
  9569                           	callstack 27
  9570                           
  9571                           ; BSR set to: 0
  9572                           ;altaveu.c: 15:     sound=0;
  9573                           
  9574                           ;incstack = 0
  9575   0000BA  6A12               	clrf	_sound^0,c
  9576                           
  9577                           ;altaveu.c: 16:     dutycycle=0;
  9578   0000BC  6A11               	clrf	_dutycycle^0,c
  9579                           
  9580                           ; BSR set to: 0
  9581                           ;altaveu.c: 17:     isBusy=TI_GetTics(&timer);
  9582   0000BE  0E50               	movlw	_timer@altaveu$F1595& (0+255)
  9583   0000C0  ECC1  F00E         	call	_TI_GetTics
  9584   0000C4  5059               	movf	?_TI_GetTics^0,w,c
  9585   0000C6  6E10               	movwf	_isBusy^0,c
  9586   0000C8                     l5496:
  9587   0000C8  5010               	movf	_isBusy^0,w,c
  9588   0000CA  E0FE               	bz	l5496
  9589                           
  9590                           ;altaveu.c: 19:     TRISAbits.RA4=0;
  9591   0000CC  9892               	bcf	146,4,c	;volatile
  9592                           
  9593                           ;altaveu.c: 20:     LATAbits.LATA4=0;
  9594   0000CE  9889               	bcf	137,4,c	;volatile
  9595   0000D0  0012               	return		;funcret
  9596   0000D2                     __end_of_InitAltaveu:
  9597                           	callstack 0
  9598                           
  9599 ;; *************** function _TI_GetTics *****************
  9600 ;; Defined at:
  9601 ;;		line 59 in file "timer.c"
  9602 ;; Parameters:    Size  Location     Type
  9603 ;;  TimerHandle     1    wreg     unsigned char 
  9604 ;; Auto vars:     Size  Location     Type
  9605 ;;  TimerHandle     1   12[COMRAM] unsigned char 
  9606 ;;  CopiaTicsAct    4    8[COMRAM] unsigned long 
  9607 ;; Return value:  Size  Location     Type
  9608 ;;                  4    0[COMRAM] unsigned long 
  9609 ;; Registers used:
  9610 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9611 ;; Tracked objects:
  9612 ;;		On entry : 0/0
  9613 ;;		On exit  : 0/0
  9614 ;;		Unchanged: 0/0
  9615 ;; Data sizes:     COMRAM   BANK0   BANK1
  9616 ;;      Params:         4       0       0
  9617 ;;      Locals:         5       0       0
  9618 ;;      Temps:          4       0       0
  9619 ;;      Totals:        13       0       0
  9620 ;;Total ram usage:       13 bytes
  9621 ;; Hardware stack levels used: 1
  9622 ;; Hardware stack levels required when called: 2
  9623 ;; This function calls:
  9624 ;;		Nothing
  9625 ;; This function is called by:
  9626 ;;		_Espera
  9627 ;;		_WaitForBusy
  9628 ;;		_MotorKeyboard
  9629 ;;		_ValorTecla
  9630 ;;		_MotorValorsTeclat
  9631 ;;		_MotorTX
  9632 ;;		_MotorRX
  9633 ;;		_ConfWIFI
  9634 ;;		_CloseConn
  9635 ;;		_EnterChatMode
  9636 ;;		_ReciveMSG
  9637 ;;		_MenuInit
  9638 ;;		_MotorMenu
  9639 ;;		_InitAltaveu
  9640 ;;		_MotorAltaveu
  9641 ;; This function uses a non-reentrant model
  9642 ;;
  9643                           
  9644                           	psect	text69
  9645   001D82                     __ptext69:
  9646                           	callstack 0
  9647   001D82                     _TI_GetTics:
  9648                           	callstack 26
  9649                           
  9650                           ;incstack = 0
  9651                           ;TI_GetTics@TimerHandle stored from wreg
  9652   001D82  6E65               	movwf	TI_GetTics@TimerHandle^0,c
  9653                           
  9654                           ;timer.c: 60:     (INTCONbits.GIE = 0); unsigned long CopiaTicsActual=Tics; (INTCONbits.
      +                          GIE = 1);
  9655   001D84  9EF2               	bcf	242,7,c	;volatile
  9656   001D86  C005  F061         	movff	_Tics,TI_GetTics@CopiaTicsActual	;volatile
  9657   001D8A  C006  F062         	movff	_Tics+1,TI_GetTics@CopiaTicsActual+1	;volatile
  9658   001D8E  C007  F063         	movff	_Tics+2,TI_GetTics@CopiaTicsActual+2	;volatile
  9659   001D92  C008  F064         	movff	_Tics+3,TI_GetTics@CopiaTicsActual+3	;volatile
  9660   001D96  8EF2               	bsf	242,7,c	;volatile
  9661                           
  9662                           ;timer.c: 61:  return (CopiaTicsActual-(Timers[TimerHandle].TicsInicials));
  9663   001D98  5065               	movf	TI_GetTics@TimerHandle^0,w,c
  9664   001D9A  D815               	call	PL56	;call to abstracted procedure
  9665   001D9C  CFDE F05D          	movff	postinc2,??_TI_GetTics
  9666   001DA0  CFDE F05E          	movff	postinc2,??_TI_GetTics+1
  9667   001DA4  CFDE F05F          	movff	postinc2,??_TI_GetTics+2
  9668   001DA8  CFDE F060          	movff	postinc2,??_TI_GetTics+3
  9669   001DAC  505D               	movf	??_TI_GetTics^0,w,c
  9670   001DAE  5C61               	subwf	TI_GetTics@CopiaTicsActual^0,w,c
  9671   001DB0  6E59               	movwf	?_TI_GetTics^0,c
  9672   001DB2  505E               	movf	(??_TI_GetTics+1)^0,w,c
  9673   001DB4  5862               	subwfb	(TI_GetTics@CopiaTicsActual+1)^0,w,c
  9674   001DB6  6E5A               	movwf	(?_TI_GetTics+1)^0,c
  9675   001DB8  505F               	movf	(??_TI_GetTics+2)^0,w,c
  9676   001DBA  5863               	subwfb	(TI_GetTics@CopiaTicsActual+2)^0,w,c
  9677   001DBC  6E5B               	movwf	(?_TI_GetTics+2)^0,c
  9678   001DBE  5060               	movf	(??_TI_GetTics+3)^0,w,c
  9679   001DC0  5864               	subwfb	(TI_GetTics@CopiaTicsActual+3)^0,w,c
  9680   001DC2  6E5C               	movwf	(?_TI_GetTics+3)^0,c
  9681   001DC4  0012               	return		;funcret
  9682   001DC6                     __end_of_TI_GetTics:
  9683                           	callstack 0
  9684   001DC6                     PL56:
  9685                           	callstack 26
  9686   001DC6  0D05               	mullw	5
  9687   001DC8  50F3               	movf	243,w,c
  9688   001DCA  0F80               	addlw	low _Timers
  9689   001DCC  6ED9               	movwf	fsr2l,c
  9690   001DCE  6ADA               	clrf	fsr2h,c
  9691   001DD0  0012               	return	
  9692   001DD2                     __end_ofPL56:
  9693                           	callstack 0
  9694                           
  9695 ;; *************** function _EQMInit *****************
  9696 ;; Defined at:
  9697 ;;		line 57 in file "EQM.c"
  9698 ;; Parameters:    Size  Location     Type
  9699 ;;		None
  9700 ;; Auto vars:     Size  Location     Type
  9701 ;;  isBusy          1    3[COMRAM] unsigned char 
  9702 ;; Return value:  Size  Location     Type
  9703 ;;                  1    wreg      void 
  9704 ;; Registers used:
  9705 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh, cstack
  9706 ;; Tracked objects:
  9707 ;;		On entry : 0/0
  9708 ;;		On exit  : 3F/0
  9709 ;;		Unchanged: 0/0
  9710 ;; Data sizes:     COMRAM   BANK0   BANK1
  9711 ;;      Params:         0       0       0
  9712 ;;      Locals:         1       0       0
  9713 ;;      Temps:          0       0       0
  9714 ;;      Totals:         1       0       0
  9715 ;;Total ram usage:        1 bytes
  9716 ;; Hardware stack levels used: 1
  9717 ;; Hardware stack levels required when called: 3
  9718 ;; This function calls:
  9719 ;;		_TI_NewTimer
  9720 ;; This function is called by:
  9721 ;;		_main
  9722 ;; This function uses a non-reentrant model
  9723 ;;
  9724                           
  9725                           	psect	text70
  9726   000088                     __ptext70:
  9727                           	callstack 0
  9728   000088                     _EQMInit:
  9729                           	callstack 27
  9730                           
  9731                           ;EQM.c: 58:     char isBusy = TI_NewTimer(&timer);
  9732                           
  9733                           ;incstack = 0
  9734   000088  0E52               	movlw	low _timer@EQM$F1360
  9735   00008A  6E59               	movwf	TI_NewTimer@TimerHandle^0,c
  9736   00008C  EC78  F00F         	call	_TI_NewTimer	;wreg free
  9737   000090  6E5C               	movwf	EQMInit@isBusy^0,c
  9738   000092                     l5478:
  9739   000092  505C               	movf	EQMInit@isBusy^0,w,c
  9740   000094  E0FE               	bz	l5478
  9741                           
  9742                           ;EQM.c: 60:     start = 1;
  9743   000096  0E01               	movlw	1
  9744   000098  6E30               	movwf	_start@EQM$F1359^0,c
  9745                           
  9746                           ;EQM.c: 61:     Opt3 = 0;
  9747                           
  9748                           ;EQM.c: 62:     Opt4 = 0;
  9749                           
  9750                           ;EQM.c: 63:     INTENTS=0;
  9751                           
  9752                           ;EQM.c: 64:     port[4]=',';
  9753                           
  9754                           ; BSR set to: 0
  9755                           ;EQM.c: 65:     port[9]='\0';
  9756   00009A  ECF0  F009         	call	PL42	;call to abstracted procedure
  9757                           
  9758                           ; BSR set to: 0
  9759                           ;EQM.c: 66:     state_option = 0;
  9760   00009E  6A2B               	clrf	_state_option^0,c
  9761                           
  9762                           ; BSR set to: 0
  9763   0000A0  0012               	return		;funcret
  9764   0000A2                     __end_of_EQMInit:
  9765                           	callstack 0
  9766                           
  9767 ;; *************** function _TI_NewTimer *****************
  9768 ;; Defined at:
  9769 ;;		line 44 in file "timer.c"
  9770 ;; Parameters:    Size  Location     Type
  9771 ;;  TimerHandle     1    0[COMRAM] PTR unsigned char 
  9772 ;;		 -> timer@EQM$F1360(1), timer@rxcom$F1159(1), timer@txcom$F1023(1), timer@valorsteclat$F912(1), 
  9773 ;;		 -> timer(1), Timer(1), 
  9774 ;; Auto vars:     Size  Location     Type
  9775 ;;  Comptador       1    2[COMRAM] unsigned char 
  9776 ;; Return value:  Size  Location     Type
  9777 ;;                  1    wreg      unsigned char 
  9778 ;; Registers used:
  9779 ;;		wreg, fsr2l, fsr2h, status,2, status,0, prodl, prodh
  9780 ;; Tracked objects:
  9781 ;;		On entry : 0/0
  9782 ;;		On exit  : 0/0
  9783 ;;		Unchanged: 0/0
  9784 ;; Data sizes:     COMRAM   BANK0   BANK1
  9785 ;;      Params:         1       0       0
  9786 ;;      Locals:         1       0       0
  9787 ;;      Temps:          1       0       0
  9788 ;;      Totals:         3       0       0
  9789 ;;Total ram usage:        3 bytes
  9790 ;; Hardware stack levels used: 1
  9791 ;; Hardware stack levels required when called: 2
  9792 ;; This function calls:
  9793 ;;		Nothing
  9794 ;; This function is called by:
  9795 ;;		_LcInit
  9796 ;;		_KeyBoardInit
  9797 ;;		_ValorsTeclatInit
  9798 ;;		_txInit
  9799 ;;		_rxInit
  9800 ;;		_EQMInit
  9801 ;; This function uses a non-reentrant model
  9802 ;;
  9803                           
  9804                           	psect	text71
  9805   001EF0                     __ptext71:
  9806                           	callstack 0
  9807   001EF0                     _TI_NewTimer:
  9808                           	callstack 27
  9809                           
  9810                           ;timer.c: 45:  unsigned char Comptador=0;
  9811                           
  9812                           ; BSR set to: 0
  9813                           ;incstack = 0
  9814   001EF0  6A5B               	clrf	TI_NewTimer@Comptador^0,c
  9815                           
  9816                           ;timer.c: 46:  while (Timers[Comptador].Busy==1) {
  9817   001EF2  D005               	goto	l4684
  9818   001EF4                     l4678:
  9819                           
  9820                           ;timer.c: 47:   if (++Comptador == 12) return (0);
  9821   001EF4  2A5B               	incf	TI_NewTimer@Comptador^0,f,c
  9822   001EF6  0E0C               	movlw	12
  9823   001EF8  185B               	xorwf	TI_NewTimer@Comptador^0,w,c
  9824   001EFA  E101               	bnz	l4684
  9825   001EFC  0C00               	retlw	0
  9826   001EFE                     l4684:
  9827                           
  9828                           ;timer.c: 46:  while (Timers[Comptador].Busy==1) {
  9829   001EFE  505B               	movf	TI_NewTimer@Comptador^0,w,c
  9830   001F00  D80C               	call	PL40	;call to abstracted procedure
  9831   001F02  04DE               	decf	postinc2,w,c
  9832   001F04  E0F7               	bz	l4678
  9833                           
  9834                           ;timer.c: 49:  Timers[Comptador].Busy=1;
  9835   001F06  505B               	movf	TI_NewTimer@Comptador^0,w,c
  9836   001F08  D808               	call	PL40	;call to abstracted procedure
  9837   001F0A  0E01               	movlw	1
  9838   001F0C  6EDF               	movwf	indf2,c
  9839                           
  9840                           ;timer.c: 50:  *TimerHandle=Comptador;
  9841   001F0E  5059               	movf	TI_NewTimer@TimerHandle^0,w,c
  9842   001F10  6ED9               	movwf	fsr2l,c
  9843   001F12  6ADA               	clrf	fsr2h,c
  9844   001F14  C05B  FFDF         	movff	TI_NewTimer@Comptador,indf2
  9845                           
  9846                           ;timer.c: 51:     return (1);
  9847   001F18  0C01               	retlw	1	;funcret
  9848   001F1A                     __end_of_TI_NewTimer:
  9849                           	callstack 0
  9850   001F1A                     PL40:
  9851                           	callstack 28
  9852   001F1A  0D05               	mullw	5
  9853   001F1C  50F3               	movf	243,w,c
  9854   001F1E  0F84               	addlw	low (_Timers+4)
  9855   001F20  6ED9               	movwf	fsr2l,c
  9856   001F22  6ADA               	clrf	fsr2h,c
  9857   001F24  0012               	return	
  9858   001F26                     __end_ofPL40:
  9859                           	callstack 0
  9860                           
  9861 ;; *************** function _my_rsi *****************
  9862 ;; Defined at:
  9863 ;;		line 41 in file "main.c"
  9864 ;; Parameters:    Size  Location     Type
  9865 ;;		None
  9866 ;; Auto vars:     Size  Location     Type
  9867 ;;		None
  9868 ;; Return value:  Size  Location     Type
  9869 ;;                  1    wreg      void 
  9870 ;; Registers used:
  9871 ;;		wreg, status,2, status,0, cstack
  9872 ;; Tracked objects:
  9873 ;;		On entry : 0/0
  9874 ;;		On exit  : 0/0
  9875 ;;		Unchanged: 0/0
  9876 ;; Data sizes:     COMRAM   BANK0   BANK1
  9877 ;;      Params:         0       0       0
  9878 ;;      Locals:         0       0       0
  9879 ;;      Temps:          0       0       0
  9880 ;;      Totals:         0       0       0
  9881 ;;Total ram usage:        0 bytes
  9882 ;; Hardware stack levels used: 1
  9883 ;; Hardware stack levels required when called: 1
  9884 ;; This function calls:
  9885 ;;		_RSI_Timer0
  9886 ;; This function is called by:
  9887 ;;		Interrupt level 2
  9888 ;; This function uses a non-reentrant model
  9889 ;;
  9890                           
  9891                           	psect	intcode
  9892   000008                     __pintcode:
  9893                           	callstack 0
  9894   000008                     _my_rsi:
  9895                           	callstack 21
  9896                           
  9897                           ;incstack = 0
  9898   000008  8278               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
  9899                           
  9900                           ;main.c: 42:     while(1){
  9901   00000A  EC93  F000         	call	_RSI_Timer0	;wreg free
  9902   00000E  9278               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
  9903   000010  0011               	retfie		f
  9904   000012                     __end_of_my_rsi:
  9905                           	callstack 0
  9906                           
  9907 ;; *************** function _RSI_Timer0 *****************
  9908 ;; Defined at:
  9909 ;;		line 26 in file "timer.c"
  9910 ;; Parameters:    Size  Location     Type
  9911 ;;		None
  9912 ;; Auto vars:     Size  Location     Type
  9913 ;;		None
  9914 ;; Return value:  Size  Location     Type
  9915 ;;                  1    wreg      void 
  9916 ;; Registers used:
  9917 ;;		wreg, status,2, status,0
  9918 ;; Tracked objects:
  9919 ;;		On entry : 0/0
  9920 ;;		On exit  : 0/0
  9921 ;;		Unchanged: 0/0
  9922 ;; Data sizes:     COMRAM   BANK0   BANK1
  9923 ;;      Params:         0       0       0
  9924 ;;      Locals:         0       0       0
  9925 ;;      Temps:          0       0       0
  9926 ;;      Totals:         0       0       0
  9927 ;;Total ram usage:        0 bytes
  9928 ;; Hardware stack levels used: 1
  9929 ;; This function calls:
  9930 ;;		Nothing
  9931 ;; This function is called by:
  9932 ;;		_my_rsi
  9933 ;; This function uses a non-reentrant model
  9934 ;;
  9935                           
  9936                           	psect	text73
  9937   000126                     __ptext73:
  9938                           	callstack 0
  9939   000126                     _RSI_Timer0:
  9940                           	callstack 0
  9941                           
  9942                           ;timer.c: 28:     TMR0=64536;
  9943                           
  9944                           ;incstack = 0
  9945   000126  ECCE  F00F         	call	PL60	;call to abstracted procedure
  9946                           
  9947                           ;timer.c: 29:     TMR0IF=0;
  9948   00012A  94F2               	bcf	4082,2,c	;volatile
  9949                           
  9950                           ;timer.c: 30:     Tics++;
  9951   00012C  2A05               	incf	_Tics^0,f,c	;volatile
  9952   00012E  0E00               	movlw	0
  9953   000130  2206               	addwfc	(_Tics+1)^0,f,c	;volatile
  9954   000132  2207               	addwfc	(_Tics+2)^0,f,c	;volatile
  9955   000134  2208               	addwfc	(_Tics+3)^0,f,c	;volatile
  9956   000136  0C00               	retlw	0	;funcret
  9957   000138                     __end_of_RSI_Timer0:
  9958                           	callstack 0
  9959                           
  9960                           	psect	rparam
  9961   000000                     
  9962                           	psect	temp
  9963   000078                     btemp:
  9964                           	callstack 0
  9965   000078                     	ds	1
  9966   000000                     int$flags	set	btemp
  9967   000000                     wtemp8	set	btemp+1
  9968   000000                     ttemp5	set	btemp+1
  9969   000000                     ttemp6	set	btemp+4
  9970   000000                     ttemp7	set	btemp+8
  9971                           
  9972                           	psect	idloc
  9973                           
  9974                           ;Config register IDLOC0 @ 0x200000
  9975                           ;	unspecified, using default values
  9976   200000                     	org	2097152
  9977   200000  FF                 	db	255
  9978                           
  9979                           ;Config register IDLOC1 @ 0x200001
  9980                           ;	unspecified, using default values
  9981   200001                     	org	2097153
  9982   200001  FF                 	db	255
  9983                           
  9984                           ;Config register IDLOC2 @ 0x200002
  9985                           ;	unspecified, using default values
  9986   200002                     	org	2097154
  9987   200002  FF                 	db	255
  9988                           
  9989                           ;Config register IDLOC3 @ 0x200003
  9990                           ;	unspecified, using default values
  9991   200003                     	org	2097155
  9992   200003  FF                 	db	255
  9993                           
  9994                           ;Config register IDLOC4 @ 0x200004
  9995                           ;	unspecified, using default values
  9996   200004                     	org	2097156
  9997   200004  FF                 	db	255
  9998                           
  9999                           ;Config register IDLOC5 @ 0x200005
 10000                           ;	unspecified, using default values
 10001   200005                     	org	2097157
 10002   200005  FF                 	db	255
 10003                           
 10004                           ;Config register IDLOC6 @ 0x200006
 10005                           ;	unspecified, using default values
 10006   200006                     	org	2097158
 10007   200006  FF                 	db	255
 10008                           
 10009                           ;Config register IDLOC7 @ 0x200007
 10010                           ;	unspecified, using default values
 10011   200007                     	org	2097159
 10012   200007  FF                 	db	255
 10013                           
 10014                           	psect	config
 10015                           
 10016                           ; Padding undefined space
 10017   300000                     	org	3145728
 10018   300000  FF                 	db	255
 10019                           
 10020                           ;Config register CONFIG1H @ 0x300001
 10021                           ;	Oscillator
 10022                           ;	OSC = HSPLL, HS oscillator, PLL enabled (Clock Frequency = 4 x FOSC1)
 10023                           ;	Fail-Safe Clock Monitor Enable bit
 10024                           ;	FCMEN = 0x0, unprogrammed default
 10025                           ;	Internal/External Oscillator Switchover bit
 10026                           ;	IESO = 0x0, unprogrammed default
 10027   300001                     	org	3145729
 10028   300001  06                 	db	6
 10029                           
 10030                           ;Config register CONFIG2L @ 0x300002
 10031                           ;	Power-up Timer Enable bit
 10032                           ;	PWRT = OFF, PWRT disabled
 10033                           ;	Brown-out Reset Enable bits
 10034                           ;	BOR = OFF, Brown-out Reset disabled in hardware and software
 10035                           ;	Brown-out Reset Voltage bits
 10036                           ;	BORV = 0x3, unprogrammed default
 10037   300002                     	org	3145730
 10038   300002  19                 	db	25
 10039                           
 10040                           ;Config register CONFIG2H @ 0x300003
 10041                           ;	Watchdog Timer Enable bit
 10042                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
 10043                           ;	Watchdog Timer Postscale Select bits
 10044                           ;	WDTPS = 0xF, unprogrammed default
 10045   300003                     	org	3145731
 10046   300003  1E                 	db	30
 10047                           
 10048                           ; Padding undefined space
 10049   300004                     	org	3145732
 10050   300004  FF                 	db	255
 10051                           
 10052                           ;Config register CONFIG3H @ 0x300005
 10053                           ;	CCP2 MUX bit
 10054                           ;	CCP2MX = 0x1, unprogrammed default
 10055                           ;	PORTB A/D Enable bit
 10056                           ;	PBADEN = DIG, PORTB<4:0> pins are configured as digital I/O on Reset
 10057                           ;	Low-Power Timer1 Oscillator Enable bit
 10058                           ;	LPT1OSC = 0x0, unprogrammed default
 10059                           ;	MCLR Pin Enable bit
 10060                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
 10061   300005                     	org	3145733
 10062   300005  81                 	db	129
 10063                           
 10064                           ;Config register CONFIG4L @ 0x300006
 10065                           ;	Stack Full/Underflow Reset Enable bit
 10066                           ;	STVREN = 0x1, unprogrammed default
 10067                           ;	Single-Supply ICSP Enable bit
 10068                           ;	LVP = OFF, Single-Supply ICSP disabled
 10069                           ;	Boot Block Size Select bits
 10070                           ;	BBSIZ = 0x0, unprogrammed default
 10071                           ;	Extended Instruction Set Enable bit
 10072                           ;	XINST = 0x0, unprogrammed default
 10073                           ;	Background Debugger Enable bit
 10074                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
 10075   300006                     	org	3145734
 10076   300006  81                 	db	129
 10077                           
 10078                           ; Padding undefined space
 10079   300007                     	org	3145735
 10080   300007  FF                 	db	255
 10081                           
 10082                           ;Config register CONFIG5L @ 0x300008
 10083                           ;	unspecified, using default values
 10084                           ;	Code Protection bit
 10085                           ;	CP0 = 0x1, unprogrammed default
 10086                           ;	Code Protection bit
 10087                           ;	CP1 = 0x1, unprogrammed default
 10088   300008                     	org	3145736
 10089   300008  03                 	db	3
 10090                           
 10091                           ;Config register CONFIG5H @ 0x300009
 10092                           ;	unspecified, using default values
 10093                           ;	Boot Block Code Protection bitProtect Boot
 10094                           ;	CPB = 0x1, unprogrammed default
 10095                           ;	Data EEPROM Code Protection bit
 10096                           ;	CPD = 0x1, unprogrammed default
 10097   300009                     	org	3145737
 10098   300009  C0                 	db	192
 10099                           
 10100                           ;Config register CONFIG6L @ 0x30000A
 10101                           ;	unspecified, using default values
 10102                           ;	Write Protection bit
 10103                           ;	WRT0 = 0x1, unprogrammed default
 10104                           ;	Write Protection bit
 10105                           ;	WRT1 = 0x1, unprogrammed default
 10106   30000A                     	org	3145738
 10107   30000A  03                 	db	3
 10108                           
 10109                           ;Config register CONFIG6H @ 0x30000B
 10110                           ;	unspecified, using default values
 10111                           ;	Configuration Register Write Protection bit
 10112                           ;	WRTC = 0x1, unprogrammed default
 10113                           ;	Boot Block Write Protection bit
 10114                           ;	WRTB = 0x1, unprogrammed default
 10115                           ;	Data EEPROM Write Protection bit
 10116                           ;	WRTD = 0x1, unprogrammed default
 10117   30000B                     	org	3145739
 10118   30000B  E0                 	db	224
 10119                           
 10120                           ;Config register CONFIG7L @ 0x30000C
 10121                           ;	unspecified, using default values
 10122                           ;	Table Read Protection bit
 10123                           ;	EBTR0 = 0x1, unprogrammed default
 10124                           ;	Table Read Protection bit
 10125                           ;	EBTR1 = 0x1, unprogrammed default
 10126   30000C                     	org	3145740
 10127   30000C  03                 	db	3
 10128                           
 10129                           ;Config register CONFIG7H @ 0x30000D
 10130                           ;	unspecified, using default values
 10131                           ;	Boot Block Table Read Protection bit
 10132                           ;	EBTRB = 0x1, unprogrammed default
 10133   30000D                     	org	3145741
 10134   30000D  40                 	db	64
 10135                           tosu	equ	0xFFF
 10136                           tosh	equ	0xFFE
 10137                           tosl	equ	0xFFD
 10138                           stkptr	equ	0xFFC
 10139                           pclatu	equ	0xFFB
 10140                           pclath	equ	0xFFA
 10141                           pcl	equ	0xFF9
 10142                           tblptru	equ	0xFF8
 10143                           tblptrh	equ	0xFF7
 10144                           tblptrl	equ	0xFF6
 10145                           tablat	equ	0xFF5
 10146                           prodh	equ	0xFF4
 10147                           prodl	equ	0xFF3
 10148                           indf0	equ	0xFEF
 10149                           postinc0	equ	0xFEE
 10150                           postdec0	equ	0xFED
 10151                           preinc0	equ	0xFEC
 10152                           plusw0	equ	0xFEB
 10153                           fsr0h	equ	0xFEA
 10154                           fsr0l	equ	0xFE9
 10155                           wreg	equ	0xFE8
 10156                           indf1	equ	0xFE7
 10157                           postinc1	equ	0xFE6
 10158                           postdec1	equ	0xFE5
 10159                           preinc1	equ	0xFE4
 10160                           plusw1	equ	0xFE3
 10161                           fsr1h	equ	0xFE2
 10162                           fsr1l	equ	0xFE1
 10163                           bsr	equ	0xFE0
 10164                           indf2	equ	0xFDF
 10165                           postinc2	equ	0xFDE
 10166                           postdec2	equ	0xFDD
 10167                           preinc2	equ	0xFDC
 10168                           plusw2	equ	0xFDB
 10169                           fsr2h	equ	0xFDA
 10170                           fsr2l	equ	0xFD9
 10171                           status	equ	0xFD8

Data Sizes:
    Strings     171
    Constant    0
    Data        147
    BSS         280
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     30     119
    BANK0           128      0     100
    BANK1           256      0     238

Pointer List with Targets:

    LcPutString@s	PTR unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[12]), STR_11(CODE[9]), STR_12(CODE[10]), STR_16(CODE[9]), 
		 -> STR_2(CODE[11]), STR_3(CODE[12]), STR_7(CODE[13]), STR_9(CODE[13]), 
		 -> user(COMRAM[3]), NULL(NULL[0]), 

    LcPutString@string_ptr	PTR unsigned char  size(2) Largest target is 13
		 -> STR_1(CODE[12]), STR_11(CODE[9]), STR_12(CODE[10]), STR_16(CODE[9]), 
		 -> STR_2(CODE[11]), STR_3(CODE[12]), STR_7(CODE[13]), STR_9(CODE[13]), 
		 -> user(COMRAM[3]), NULL(NULL[0]), 

    MotorCOM@new_msgC	PTR unsigned char  size(2) Largest target is 38
		 -> port(BANK0[10]), STR_10(CODE[15]), STR_13(CODE[13]), STR_14(CODE[4]), 
		 -> STR_15(CODE[4]), STR_4(CODE[14]), STR_5(CODE[38]), STR_6(CODE[4]), 
		 -> STR_8(CODE[11]), NULL(NULL[0]), 

    msgC	PTR unsigned char  size(2) Largest target is 38
		 -> port(BANK0[10]), STR_10(CODE[15]), STR_13(CODE[13]), STR_14(CODE[4]), 
		 -> STR_15(CODE[4]), STR_4(CODE[14]), STR_5(CODE[38]), STR_6(CODE[4]), 
		 -> STR_8(CODE[11]), NULL(NULL[0]), 

    msgToLCD	PTR unsigned char  size(1) Largest target is 13
		 -> STR_16(CODE[9]), STR_7(CODE[13]), STR_9(CODE[13]), NULL(NULL[0]), 

    msgToSend	PTR unsigned char  size(2) Largest target is 10
		 -> port(BANK0[10]), NULL(NULL[0]), 

    TI_NewTimer@TimerHandle	PTR unsigned char  size(1) Largest target is 1
		 -> timer(COMRAM[1]), Timer(COMRAM[1]), timer@EQM$F1360(COMRAM[1]), timer@rxcom$F1159(COMRAM[1]), 
		 -> timer@txcom$F1023(COMRAM[1]), timer@valorsteclat$F912(COMRAM[1]), 


Critical Paths under _main in COMRAM

    _txInit->_TI_NewTimer
    _rxInit->_TI_NewTimer
    _ValorsTeclatInit->_TI_NewTimer
    _MotorValorsTeclat->_ValorTecla
    _ValorTecla->_LcPutChar
    _MotorTX->_TI_GetTics
    _MotorRX->_TI_GetTics
    _MotorMenu->_LcPutChar
    _MotorKeyboard->_TI_GetTics
    _MotorEQM->_ListLastMessages
    _ReciveMSG->_LcPutChar
    _ListLastMessages->_LcPutString
    _ListAccesPoints->_LcPutString
    _EnterChatMode->_LcPutString
    _ShowConnStatus->_LcPutString
    _ConfWIFI->_LcPutString
    _MotorCOM->_SetMSG
    _CloseConn->_LcPutString
    _LcPutString->_LcPutChar
    _LcPutChar->_LcGotoXY
    _LcGotoXY->_WaitForBusy
    _CantaData->_CantaPartAlta
    _CantaData->_CantaPartBaixa
    _LcClear->_Espera
    _MotorAltaveu->_TI_GetTics
    _MenuInit->_TI_GetTics
    _LcInit->_Espera
    _Espera->_TI_GetTics
    _LcCursorOff->_WaitForBusy
    _WaitForBusy->_TI_GetTics
    _CantaIR->_CantaPartAlta
    _CantaIR->_CantaPartBaixa
    _KeyBoardInit->_TI_NewTimer
    _InitAltaveu->_TI_GetTics
    _EQMInit->_TI_NewTimer

Critical Paths under _my_rsi in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _my_rsi in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _my_rsi in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   89370
                            _EQMInit
                        _InitAltaveu
                            _JoyInit
                       _KeyBoardInit
                            _LcClear
                        _LcCursorOff
                           _LcGotoXY
                             _LcInit
                           _MenuInit
                       _MotorAltaveu
                           _MotorEQM
                      _MotorKeyboard
                          _MotorMenu
                            _MotorRX
                            _MotorTX
                  _MotorValorsTeclat
                           _SIO_Init
                            _TI_Init
                   _ValorsTeclatInit
                          _configInt
                             _rxInit
                      _setJoyChannel
                             _txInit
 ---------------------------------------------------------------------------------
 (1) _txInit                                               1     1      0     590
                                              3 COMRAM     1     1      0
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _setJoyChannel                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _rxInit                                               1     1      0     590
                                              3 COMRAM     1     1      0
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _configInt                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ValorsTeclatInit                                     1     1      0     590
                                              3 COMRAM     1     1      0
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _TI_Init                                              1     1      0      68
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _SIO_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MotorValorsTeclat                                    0     0      0    5236
                           _GetTecla
                         _TI_GetTics
                       _TeclaPremuda
                         _ValorTecla
 ---------------------------------------------------------------------------------
 (2) _ValorTecla                                           6     6      0    5191
                                             23 COMRAM     6     6      0
                           _LcGotoXY
                          _LcPutChar
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _TeclaPremuda                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MotorTX                                              6     6      0      67
                                             13 COMRAM     6     6      0
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (1) _MotorRX                                              6     6      0      89
                                             13 COMRAM     6     6      0
                            _EQM_MSG
                        _SIO_PutChar
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (2) _EQM_MSG                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _MotorMenu                                            2     2      0    7057
                                             23 COMRAM     2     2      0
                           _GetTecla
                          _HiHaTecla
                            _LcClear
                           _LcGotoXY
                          _LcPutChar
                         _TI_GetTics
                       _TI_ResetTics
                   _finishConversion
                          _getAction
                        _mouJoyAvail
                    _startConversion
 ---------------------------------------------------------------------------------
 (1) _MotorKeyboard                                        0     0      0     355
                           _GetTecla
                          _HiHaTecla
                          _SorollAlt
                         _TI_GetTics
                       _TI_ResetTics
                           _fiSoroll
 ---------------------------------------------------------------------------------
 (1) _MotorEQM                                             0     0      0   65921
                          _CloseConn
                           _ConfWIFI
                      _EnterChatMode
                    _ListAccesPoints
                   _ListLastMessages
                          _OpcioMenu
                          _ReciveMSG
                     _ShowConnStatus
                          _StateMenu
                          _startMenu
 ---------------------------------------------------------------------------------
 (2) _ReciveMSG                                            3     3      0    7319
                                             23 COMRAM     3     3      0
                            _GetFlag
                           _GetRxMSG
                            _LcClear
                           _LcGotoXY
                          _LcPutChar
                        _SIO_PutChar
                          _SorollAlt
                          _StateMenu
                         _TI_GetTics
                       _TI_ResetTics
                           _fiSoroll
                          _startMenu
                           _stopMenu
 ---------------------------------------------------------------------------------
 (3) _stopMenu                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _fiSoroll                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _StateMenu                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _SorollAlt                                            1     1      0     264
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _OpcioMenu                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ListLastMessages                                     5     5      0   10358
                                             25 COMRAM     5     5      0
                           _GetTecla
                          _HiHaTecla
                            _LcClear
                           _LcGotoXY
                          _LcPutChar
                        _LcPutString
                        _SIO_PutChar
                   _finishConversion
                          _getAction
                        _mouJoyAvail
                    _startConversion
 ---------------------------------------------------------------------------------
 (2) _startConversion                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _mouJoyAvail                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _getAction                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _finishConversion                                     0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _HiHaTecla                                            1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _ListAccesPoints                                      0     0      0    4074
                        _LcPutString
                           _MotorCOM
                        _SIO_GetChar
                        _SIO_RXAvail
 ---------------------------------------------------------------------------------
 (2) _EnterChatMode                                        4     4      0   21184
                                             25 COMRAM     4     4      0
                           _ConfWIFI
                             _GetEND
                            _GetFlag
                           _GetRxMSG
                           _GetTecla
                            _LcClear
                           _LcGotoXY
                        _LcPutString
                           _MotorCOM
                        _SIO_GetChar
                        _SIO_PutChar
                        _SIO_RXAvail
                             _SetMSG
                     _ShowConnStatus
                          _StartRead
                         _TI_GetTics
                       _TI_ResetTics
                        _ValorsState
                             _getIND
                             _getMSG
 ---------------------------------------------------------------------------------
 (3) _getIND                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _ShowConnStatus                                       0     0      0    4074
                        _LcPutString
                           _MotorCOM
                        _SIO_GetChar
                        _SIO_RXAvail
 ---------------------------------------------------------------------------------
 (2) _SIO_PutChar                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _GetTecla                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ConfWIFI                                             0     0      0    8533
                            _GetFlag
                           _GetRxMSG
                            _LcClear
                           _LcGotoXY
                        _LcPutString
                           _MotorCOM
                        _SIO_GetChar
                        _SIO_RXAvail
                          _StartRead
                         _TI_GetTics
                       _TI_ResetTics
                        _ValorsState
                             _endMSG
                             _getMSG
                          _startMenu
 ---------------------------------------------------------------------------------
 (2) _startMenu                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getMSG                                               1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _endMSG                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _ValorsState                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _StartRead                                            1     1      0      44
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (3) _SIO_RXAvail                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _SIO_GetChar                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _MotorCOM                                             2     0      2     728
                                              1 COMRAM     2     0      2
                             _GetEND
                             _SetMSG
 ---------------------------------------------------------------------------------
 (4) _SetMSG                                               1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (4) _GetEND                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _GetRxMSG                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _GetFlag                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CloseConn                                            0     0      0   10379
                            _LcClear
                           _LcGotoXY
                          _LcPutChar
                        _LcPutString
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (3) _LcPutString                                          2     0      2    3346
                                             23 COMRAM     2     0      2
                          _LcPutChar
 ---------------------------------------------------------------------------------
 (3) _LcPutChar                                            1     1      0    2640
                                             22 COMRAM     1     1      0
                          _CantaData
                           _LcGotoXY
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _LcGotoXY                                             8     7      1    2308
                                             14 COMRAM     8     7      1
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _CantaData                                            1     1      0     220
                                              6 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (2) _LcClear                                              0     0      0    2018
                            _CantaIR
                             _Espera
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (1) _MotorAltaveu                                         8     8      0      67
                                             13 COMRAM     8     8      0
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (1) _MenuInit                                             1     1      0      68
                                             13 COMRAM     1     1      0
                         _TI_GetTics
 ---------------------------------------------------------------------------------
 (1) _LcInit                                               4     3      1    2811
                                             21 COMRAM     4     3      1
                            _CantaIR
                 _EscriuPrimeraOrdre
                             _Espera
                        _TI_NewTimer
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (3) _Espera                                               8     4      4    1708
                                             13 COMRAM     8     4      4
                         _TI_GetTics
                       _TI_ResetTics
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4     511
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _EscriuPrimeraOrdre                                   6     6      0      60
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _LcCursorOff                                          0     0      0     310
                            _CantaIR
                        _WaitForBusy
 ---------------------------------------------------------------------------------
 (4) _WaitForBusy                                          1     1      0      90
                                             13 COMRAM     1     1      0
                         _TI_GetTics
                       _TI_ResetTics
 ---------------------------------------------------------------------------------
 (3) _TI_ResetTics                                         1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (5) _CantaIR                                              1     1      0     220
                                              6 COMRAM     1     1      0
                      _CantaPartAlta
                     _CantaPartBaixa
 ---------------------------------------------------------------------------------
 (6) _CantaPartBaixa                                       6     6      0      88
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (6) _CantaPartAlta                                        6     6      0      88
                                              0 COMRAM     6     6      0
 ---------------------------------------------------------------------------------
 (1) _KeyBoardInit                                         1     1      0     590
                                              3 COMRAM     1     1      0
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (1) _JoyInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitAltaveu                                          0     0      0      45
                         _TI_GetTics
 ---------------------------------------------------------------------------------
 (3) _TI_GetTics                                          13     9      4      45
                                              0 COMRAM    13     9      4
 ---------------------------------------------------------------------------------
 (1) _EQMInit                                              1     1      0     590
                                              3 COMRAM     1     1      0
                        _TI_NewTimer
 ---------------------------------------------------------------------------------
 (2) _TI_NewTimer                                          3     2      1     567
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 6
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (9) _my_rsi                                               0     0      0       0
                         _RSI_Timer0
 ---------------------------------------------------------------------------------
 (10) _RSI_Timer0                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EQMInit
     _TI_NewTimer
   _InitAltaveu
     _TI_GetTics
   _JoyInit
   _KeyBoardInit
     _TI_NewTimer
   _LcClear
     _CantaIR
       _CantaPartAlta
       _CantaPartBaixa
     _Espera
       _TI_GetTics
       _TI_ResetTics
       ___wmul
     _WaitForBusy
       _TI_GetTics
       _TI_ResetTics
   _LcCursorOff
     _CantaIR
     _WaitForBusy
   _LcGotoXY
     _CantaIR
     _WaitForBusy
   _LcInit
     _CantaIR
     _EscriuPrimeraOrdre
     _Espera
     _TI_NewTimer
     _WaitForBusy
   _MenuInit
     _TI_GetTics
   _MotorAltaveu
     _TI_GetTics
     _TI_ResetTics
   _MotorEQM
     _CloseConn
       _LcClear
       _LcGotoXY
       _LcPutChar
         _CantaData
           _CantaPartAlta
           _CantaPartBaixa
         _LcGotoXY
         _WaitForBusy
       _LcPutString
         _LcPutChar
       _TI_GetTics
       _TI_ResetTics
     _ConfWIFI
       _GetFlag
       _GetRxMSG
       _LcClear
       _LcGotoXY
       _LcPutString
       _MotorCOM
         _GetEND
         _SetMSG
       _SIO_GetChar
       _SIO_RXAvail
       _StartRead
       _TI_GetTics
       _TI_ResetTics
       _ValorsState
       _endMSG
       _getMSG
       _startMenu
     _EnterChatMode
       _ConfWIFI
       _GetEND
       _GetFlag
       _GetRxMSG
       _GetTecla
       _LcClear
       _LcGotoXY
       _LcPutString
       _MotorCOM
       _SIO_GetChar
       _SIO_PutChar
       _SIO_RXAvail
       _SetMSG
       _ShowConnStatus
         _LcPutString
         _MotorCOM
         _SIO_GetChar
         _SIO_RXAvail
       _StartRead
       _TI_GetTics
       _TI_ResetTics
       _ValorsState
       _getIND
       _getMSG
     _ListAccesPoints
       _LcPutString
       _MotorCOM
       _SIO_GetChar
       _SIO_RXAvail
     _ListLastMessages
       _GetTecla
       _HiHaTecla
       _LcClear
       _LcGotoXY
       _LcPutChar
       _LcPutString
       _SIO_PutChar
       _finishConversion
       _getAction
       _mouJoyAvail
       _startConversion
     _OpcioMenu
     _ReciveMSG
       _GetFlag
       _GetRxMSG
       _LcClear
       _LcGotoXY
       _LcPutChar
       _SIO_PutChar
       _SorollAlt
       _StateMenu
       _TI_GetTics
       _TI_ResetTics
       _fiSoroll
       _startMenu
       _stopMenu
     _ShowConnStatus
     _StateMenu
     _startMenu
   _MotorKeyboard
     _GetTecla
     _HiHaTecla
     _SorollAlt
     _TI_GetTics
     _TI_ResetTics
     _fiSoroll
   _MotorMenu
     _GetTecla
     _HiHaTecla
     _LcClear
     _LcGotoXY
     _LcPutChar
     _TI_GetTics
     _TI_ResetTics
     _finishConversion
     _getAction
     _mouJoyAvail
     _startConversion
   _MotorRX
     _EQM_MSG
     _SIO_PutChar
     _TI_GetTics
     _TI_ResetTics
   _MotorTX
     _TI_GetTics
     _TI_ResetTics
   _MotorValorsTeclat
     _GetTecla
     _TI_GetTics
     _TeclaPremuda
     _ValorTecla
       _LcGotoXY
       _LcPutChar
       _TI_GetTics
       _TI_ResetTics
   _SIO_Init
   _TI_Init
   _ValorsTeclatInit
     _TI_NewTimer
   _configInt
   _rxInit
     _TI_NewTimer
   _setJoyChannel
   _txInit
     _TI_NewTimer

 _my_rsi (ROOT)
   _RSI_Timer0

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0      22        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0      EE       7       93.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0      64       5       78.1%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     1E      77       1       94.4%
BITBIGSFRhlh        19      0       0       9        0.0%
BITBIGSFRhh          D      0       0       8        0.0%
BITBIGSFRlhllh       C      0       0      15        0.0%
BITBIGSFRlhhhh       B      0       0      11        0.0%
BITBIGSFRlhlhh       8      0       0      14        0.0%
BITBIGSFRlhlll       8      0       0      16        0.0%
BITBIGSFRlhhl        7      0       0      13        0.0%
BITBIGSFRlllhl       5      0       0      18        0.0%
BITBIGSFRllhl        5      0       0      17        0.0%
BITBIGSFRhll         4      0       0      10        0.0%
BITBIGSFRlhhhl       1      0       0      12        0.0%
BITBIGSFRllllh       1      0       0      19        0.0%
BITBIGSFRlllll       1      0       0      20        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     1C9      21        0.0%
DATA                 0      0     1C9       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Fri May 24 12:09:17 2024

                _RSI_Timer0 0126                          PL2 1B7E                          PL4 1B88  
                        PL6 0B48   __end_of_MotorValorsTeclat 18AC                          PL8 104C  
  __end_of_finishConversion 017E                          _m0 001B                          _m1 001A  
                _TI_GetTics 1D82         ___wmul@multiplicand 005B                         PL10 1058  
                       PL20 0EB4                         PL12 072A                         PL30 1580  
                       PL22 1AEE                         PL14 0748                         PL40 1F1A  
                       PL32 0B66                         PL24 075E                         PL16 095C  
                       PL50 163A                         PL42 13E0                         PL34 1BE8  
                       PL26 0520                         PL18 1064                         PL60 1F9C  
                       PL52 0968                         PL44 1BF4                         PL36 0D0A  
                       PL28 1D26                         PL70 120C                         PL62 1202  
                       PL54 076A                         PL46 1792                         PL38 1CC2  
                       PL80 1220                         PL72 1078                         PL64 106E  
                       PL56 1DC6                         PL48 1B12                         PL90 0EEE  
                       PL82 1082                         PL74 0D1E                         PL66 0EDA  
                       PL58 0ED0                         PL92 0EF8                         PL84 108C  
                       PL76 1216                         PL68 0EE4                         PL94 0974  
                       PL86 1096                         PL78 0D28                         PL96 0D32  
                       PL88 122A                         PL98 18AC            _ListLastMessages 052A  
          ?_ListAccesPoints 0059                         l123 17B0                         l134 17FC  
                       l127 17C2                         l241 1E8A                         l163 1BD4  
                       l236 1E7A                         l229 1E68                         l452 16B8  
                       l453 16B4                         l543 13F2                         l555 149E  
                       l901 0990                         l549 1424                         l486 1740  
                       l835 08EC                         l847 0544                         l784 1D12  
                       l785 1D14                         l886 06DC                         _MSG 0055  
                       _Opt 0019          KeyBoardInit@isBusy 005C                         _msg 002E  
                       _pos 003F              ??_KeyBoardInit 005C            ??_CantaPartBaixa 0059  
               _statusSTATE 0020                         prod 0FF3                         wreg 0FE8  
              _state_option 002B         __end_of_LcPutString 1BE8             __end_of_EQM_MSG 0198  
           __end_of_EQMInit 00A2                        l1131 19CA                        l1027 0B78  
                      l1141 1A2A                        l4002 17D0                        l4012 1804  
                      l4006 17DE                        l4014 1814                        l4110 1B9E  
                      l4112 1BA2                        l4106 1B94                        l4140 0022  
                      l5012 052C                        l4126 1BD8                        l4142 0026  
                      l5110 0612                        l5102 05F2                        l4310 19EE  
                      l4302 19DA                        l4048 1EB2                        l4080 1D6A  
                      l4128 1BE4                        l4152 16F6                        l5008 0912  
                      l5040 0574                        l5032 0568                        l4170 1744  
                      l4154 16FE                        l5026 055A                        l4330 1A20  
                      l4322 1A0C                        l4314 19F8                        l4306 19E4  
                      l4068 1D50                        l4164 1724                        l4156 1702  
                      l4404 037C                        l5124 062C                        l5044 0580  
                      l5028 055E                        l5300 0A4E                        l4086 1D78  
                      l4182 1764                        l4190 178E                        l4414 0394  
                      l5214 06F0                        l5118 061C                        l4326 1A16  
                      l4318 1A02                        l5310 0A70                        l5230 097E  
                      l4176 1754                        l4168 173C                        l4512 045C  
                      l4352 02C0                        l4344 02B0                        l5144 064C  
                      l5136 0644                        l5048 058A                        l5320 0A92  
                      l5400 005E                        l4450 03EA                        l4362 02D8  
                      l4346 02BC                        l4266 1E9C                        l4602 1CF6  
                      l5154 0668                        l5146 0650                        l5090 05CE  
                      l5226 0702                        l5330 0AB4                        l5410 00AC  
               _TI_NewTimer 1EF0                        l5500 0078                        l4188 1772  
                      l4428 03C4                        l4620 1D18                        l4284 00E4  
                      l5164 067C                        l5068 05B0                        l5084 05CA  
                      l4292 19C0                        l5340 0AD4                        l5236 0992  
                      l4542 048E                        l4470 040A                        l4438 03D8  
                      l5262 09DE                        l5238 0996                        l5440 14E6  
                      l4528 0478                        l4544 0490                        l4480 041C  
                      l4456 03F8                        l4376 0318                        l4640 1F36  
                      l5176 0696                        l5184 069A                        l5096 05E2  
                      l5352 0AEE                        l5280 0A14                        l5272 09FA  
                      l5248 09B4                        l5504 1236                        l5600 1862  
                      l5416 1FD6                        l4570 04C2                        l4458 03FC  
                      l4386 0330                        l4298 19D2                        l5346 0AE2  
                      l5290 0A2C                        l5282 0A1A                        l5266 09E8  
                      l5258 09D6                        l5370 0B0E                        l5514 124E  
                      l5610 1890                        l4580 04CC                        l4652 1F44  
                      l5348 0AE6                        l5540 1294                        l5532 127E  
                      l5524 1266                        l4724 1610                        l4708 15BE  
                      l5612 1894                        l4822 1A96                        l4830 0788  
                      l5198 06DA                        l5710 164A                        l5382 1F80  
                      l4808 1A70                        l4488 042E                        l4584 1CD0  
                      l4736 1DD4                        l5288 0A26                        l5640 1334  
                      l5624 1322                        l5704 13D2                        l5544 12AC  
                      l5800 0B7E                        l4728 161C                        l4498 0442  
                      l4594 1CE6                        l4922 083C                        l4906 0814  
                      l4826 0776                        l4754 1DFC                        l4746 1DEC  
                      l4770 1E10                        l5650 134A                        l5570 12F0  
                      l5538 1290                        l5810 0B92                        l5802 0B82  
                      l5722 1698                        l5618 189E                        l4684 1EFE  
                      l5396 1F5E                        l4940 085A                        l4932 0850  
                      l4860 07BC                        l4836 078C                        l5652 134E  
                      l5556 12D0                        l5548 12B8                        l5820 0BBC  
                      l5716 1658                        l5580 182C                        l4678 1EF4  
                      l5478 0092                        l3966 1B3E                        l4790 1A54  
                      l4782 1A42                        l4774 1A32                        l4870 07C8  
                      l4854 07A8                        l4846 07A2                        l5670 1382  
                      l5662 1370                        l5638 1330                        l5566 12E8  
                      l5910 0CBC                        l5830 0BE2                        l5718 165C  
                      l5496 00C8                        l3992 17A4                        l4776 1A3E  
                      l4960 087E                        l5680 139C                        l5576 1300  
                      l5816 0BAE                        l5920 0CD8                        l5736 16BE  
                      l5592 1850                        l5584 1836                        l4882 07D8  
                      l5834 0BF4                        l5746 16E2                        l3988 1B78  
                      l5932 1AC6                        l5924 1AAE                        l3996 17B4  
                      l4972 08AC                        l4948 0866                        l4892 07F2  
                      l5908 0CB6                        l5852 0C14                        l5836 0BF8  
                      l5828 0BDE                        l5772 146A                        l4798 1A60  
                      l4966 089A                        l5862 0C34                        l5846 0C04  
                      l5790 14AC                        l5758 1414                        l5944 1AE4  
                      l4992 08FA                        l4984 08F0                        l5696 13B8  
                      l5688 13AA                        l5784 14A0                        l5768 142C  
                      l5882 0C74                        l5858 0C28                        l5794 14B2  
                      l5876 0C5A                        l5868 0C42                        l5894 0C8E  
                      l5896 0C90                        l5888 0C82                        l5898 0C96  
                      l5978 1C4C                        STR_1 026A                        STR_2 0281  
                      STR_3 025E                        STR_4 0236                        STR_5 0201  
                      STR_6 02A8                        STR_7 0244                        STR_8 0276  
                      STR_9 0244                        u1100 0D58                        u1120 0DA6  
                      u1140 0E08                        u1118 0D5A                        u1160 0E68  
                      u1138 0DA8                        u1158 0E0A                        u3200 171A  
                      _LATD 0F8C                        u1178 0E6A                        u4010 1A88  
                      u3210 1734                        u3140 1BB0                        u4030 079E  
                      u3207 1716                        u3217 1730                        u3170 1BC8  
                      u4050 07B6                        u5010 1880                        u3147 1BAE  
                      u5100 136A                        u3177 1BC6                        u3610 03D4  
                      u4090 0806                        u4330 05AC                        u5300 1480  
                      u2830 10AC                        u2910 0F0E                        u4350 05C6  
                      u2850 10FA                        u2930 0F54                        u3730 0488  
                      u5250 16D4                        u2908 11BE                        u3740 04A6  
                      u2870 115C                        u2950 0FAE                        u5510 0CAC  
                      u5270 140C                        u2848 10AE                        u2928 0F10  
                      u2890 11BC                        u2970 100E                        u4650 0A3E  
                      u3930 15A2                        u2868 10FC                        u2948 0F56  
                      u3780 1CE2                        u4660 0A60                        u4670 0A82  
                      u2888 115E                        u2968 0FB0                        u3960 1DE8  
                      u4680 0AA4                        u4690 0AC6                        u2988 1010  
                      u4780 157E                        u4950 1832                        u4980 184E  
                      _TMR0 0FD6                        _Opt3 0028                        _Opt4 0027  
                      _iMSG 002D                        _Tics 0005                        _nMSG 003A  
                      _Rows 004C                        _main 1C02                        _msgC 000B  
                      _msgs 017E               ??_InitAltaveu 0066                        _port 00C6  
                      fsr1h 0FE2                        fsr2h 0FDA                        indf1 0FE7  
                      indf2 0FDF                        fsr1l 0FE1                        fsr2l 0FD9  
                      btemp 0078                        _user 004D             __end_of_TI_Init 1F9C  
                      prodh 0FF4                        prodl 0FF3             __end_of_LcClear 00FE  
                      start 0012             __end_of_CantaIR 1E66             __end_of_GetFlag 01C4  
             LcInit@columns 006E                ___param_bank 0000             __end_of_JoyInit 2000  
           __end_of_MotorRX 14C4             __end_of_MotorTX 16F4                 Espera@Timer 0066  
                     ?_main 0059                       STR_10 0227                       STR_11 0296  
                     STR_12 028C                       STR_13 0251                       STR_14 02A8  
                     STR_15 02A8                       STR_16 029F                       _T0CON 0FD5  
                     _RCREG 0FAE     _timer@valorsteclat$F912 0056                       _RCSTA 0FAB  
                     _SPBRG 0FAF                       _PORTB 0F81                       _TRISD 0F95  
                     _TXREG 0FAD                       _TXSTA 0FAC       __end_of_setJoyChannel 0178  
                     _Timer 0058                       _inMSG 0001               _HiHaTecla$840 0059  
                     _compt 0026            __end_of_SIO_Init 0126                       _index 0032  
              _TI_ResetTics 0036                       _tecla 0023             ??_EnterChatMode 0072  
                     _timer 0057                 _LcCursorOff 0160                       _state 0046  
                     _start 0043                       _sound 0012                       tablat 0FF5  
                     ttemp5 0079                       ttemp6 007C                       ttemp7 0080  
                     status 0FD8                       wtemp8 0079            __end_of_LcGotoXY 182A  
          __end_of_ConfWIFI 0520            __end_of_GetRxMSG 0190            __end_of_GetTecla 1EAC  
   EscriuPrimeraOrdre@ordre 005E             __initialization 18B2       __end_of_MotorKeyboard 131A  
              __end_of_main 1C6A         __end_of_InitAltaveu 00D2                 ?_RSI_Timer0 0059  
            TI_Init@counter 0059            __end_of_MenuInit 0088                ?_mouJoyAvail 0059  
               ?_TI_GetTics 0059                      ??_main 0077                 _LcPutString 1B92  
           _index@EQM$F1361 002F               __activetblptr 0002            __end_of_MotorCOM 1792  
          __end_of_MotorEQM 13E0                   ??_EQM_MSG 0059                   ??_EQMInit 005C  
                    _ADCON0 0FC2                      _ADCON1 0FC1                      _ADCON2 0FC0  
                    _ADRESH 0FC4                   ??_TI_Init 0059                   ??_LcClear 006E  
                 ??_CantaIR 005F              LcGotoXY@Fisics 006C              LcGotoXY@Column 006E  
                 ??_GetFlag 0059               ??_WaitForBusy 0066                      _TMR0IF 7F92  
    MotorValorsTeclat@state 003C                      _GetEND 01BC                      _LcInit 14C4  
          __end_of_fiSoroll 01A0                   ??_JoyInit 0059                      _Espera 1EAC  
                    _SetMSG 0146                _LcGotoXY$513 006A        __end_of_KeyBoardInit 1F7E  
                 ??_MotorRX 0066                   ??_MotorTX 0066                      _RowAct 004A  
         MotorAltaveu@state 000F                      _Timers 0080                  _ValorTecla 158A  
                    ___wmul 1FA6                      _endMSG 01C4                      _getIND 01B0  
           StartRead@numMax 0059                      _action 0024                      _getMSG 0138  
                    _end_TX 0038                      _maxMSG 0029                      _compt2 0025  
                    _isBusy 0010             _startConversion 01A8               ??_ValorsState 0059  
                    clear_0 190A                      clear_1 1916                      clear_2 1922  
                    _rxInit 1FCC                      isa$std 0001                      _my_rsi 0008  
                    _txInit 00A2               ?_TeclaPremuda 0059                      _state4 002A  
              ?_SIO_RXAvail 0059                ?_SIO_GetChar 0059                __pdataCOMRAM 0077  
         __end_of_HiHaTecla 00E8                __mediumconst 0000                      tblptrh 0FF7  
                    tblptrl 0FF6                      tblptru 0FF8           _timer@rxcom$F1159 0053  
         __end_of_CantaData 1CC2                ?_SIO_PutChar 0059            __end_of_stopMenu 019C  
             _estatAnterior 0013                MenuInit@busy 0066                  __accesstop 0080  
   __end_of__initialization 1928            _start@menu$F1451 0017    __end_of_ListLastMessages 072A  
         __end_of_LcPutChar 1D82                 _InitAltaveu 00BA         _MSG_AUX@rxcom$F1160 0034  
             ___rparam_used 0001           __end_of_CloseConn 1AAC              __pcstackCOMRAM 0059  
       __end_of_WaitForBusy 1B7E           _action@menu$F1454 0014           _timer@txcom$F1023 0054  
              __pidataBANK0 00FE                __pidataBANK1 1936              _ShowConnStatus 1CCE  
                 ?_SIO_Init 0059           ?_finishConversion 0059              ??_TeclaPremuda 0059  
                __end_ofPL2 1B88                  __end_ofPL4 1B92                  __end_ofPL6 0B66  
                __end_ofPL8 1058        TI_NewTimer@Comptador 005B          ??_finishConversion 0059  
          _ValorsTeclatInit 0054                   ?_LcGotoXY 0067         __end_of_ValorsState 01B8  
     LcPutString@string_ptr 000D           __end_of_ReciveMSG 0B48                   ?_ConfWIFI 0059  
                 ?_GetRxMSG 0059                   ?_GetTecla 0059                ?_TI_NewTimer 0059  
         __end_of_OpcioMenu 01A8                  __pbssBANK0 0080                  __pbssBANK1 017E  
                 ?_MenuInit 0059           __end_of_MotorMenu 0D0A                     ?_GetEND 0059  
                   ?_LcInit 006E               _CantaPartAlta 10A0               ?_MotorAltaveu 0059  
    TI_NewTimer@TimerHandle 0059                     ?_Espera 0066                     ?_SetMSG 0059  
         ReciveMSG@stateMSG 001D     __end_of_startConversion 01AC      __end_of_ShowConnStatus 1D26  
                 ?_MotorCOM 005A                   ?_MotorEQM 0059                 ?_ValorTecla 0059  
         __end_of_StateMenu 01A4           __end_of_StartRead 0036                     ?___wmul 0059  
             MotorCOM@state 0036            _nMSG@rxcom$F1158 0035                     ?_endMSG 0059  
                   ?_getIND 0059                     ?_getMSG 0059     TI_ResetTics@TimerHandle 0059  
         __end_of_SorollAlt 1A30                  ??_SIO_Init 0059                     ?_rxInit 0059  
                   ?_my_rsi 0059                     ?_txInit 0059               MotorEQM@state 001C  
              _filaAnterior 0041                     LcInit@i 0070                     _EQM_MSG 0194  
                   _EQMInit 0088                     _INTENTS 002C                  ??_LcGotoXY 0068  
                _arrayChars 00BC                   ?_fiSoroll 0059                  ??_ConfWIFI 0072  
                   _MSG_AUX 0039                  ??_GetRxMSG 0059                  ??_GetTecla 0059  
              ?_LcCursorOff 0059                     _TI_Init 1F7E                     _LcClear 00E8  
                   _CantaIR 1E1E                     _GetFlag 01C0                  ??_MenuInit 0066  
               _WaitForBusy 1B20           __end_of_getAction 01B0              ?_CantaPartAlta 0059  
                   _Columns 004B              ??_MotorAltaveu 0066                     _JoyInit 1FF0  
                   __Hparam 0000                  ??_MotorCOM 005C                  ??_MotorEQM 0077  
                   __Lparam 0000             ?_ShowConnStatus 0059                     _MotorRX 13F0  
                   _MotorTX 1648           __end_of_configInt 0160                ??_RSI_Timer0 0059  
              __psmallconst 0200                ??_TI_GetTics 005D                   ?_stopMenu 0059  
                   __pcinit 18B2                     __ramtop 0200                 _ValorsState 01B4  
                   _flag_RX 0033                ?_LcPutString 0070                     __ptext0 1C02  
                   __ptext1 00A2                     __ptext2 0172                     __ptext3 1FCC  
                   __ptext4 0154                     __ptext5 0054                     __ptext6 1F7E  
                   __ptext7 0112                     __ptext8 182A                     __ptext9 158A  
                   _columna 0045                     _lastMSG 0077                   CantaIR@IR 005F  
                ??_fiSoroll 0059                _KeyBoardInit 1F54             WaitForBusy@Busy 0066  
      end_of_initialization 1928              SorollAlt@tecla 0059          __end_of_RSI_Timer0 0138  
     __end_of_EnterChatMode 095C        __end_of_TeclaPremuda 0194               __Lmediumconst 0000  
        __end_of_TI_GetTics 1DC6                  _opcio_menu 0100            ?_startConversion 0059  
             EQMInit@isBusy 005C                     postdec1 0FE5                     postinc0 0FEE  
                   postinc2 0FDE           __end_of_startMenu 0184                  ??_stopMenu 0059  
          SIO_PutChar@Valor 0059                   _PORTBbits 0F81                   _PORTDbits 0F83  
          _timer@menu$F1455 0051       TI_GetTics@TimerHandle 0065                   _TRISAbits 0F92  
                 _TRISBbits 0F93                   _TRISCbits 0F94                   _TRISDbits 0F95  
                 _HiHaTecla 00D2             ??_CantaPartAlta 0059                   _CantaData 1C6A  
              ?_InitAltaveu 0059           ?_ListLastMessages 0059           ??_ListAccesPoints 0072  
  __end_of_ValorsTeclatInit 006E              __end_of_GetEND 01C0              __end_of_LcInit 1580  
        ??_ListLastMessages 0072                   _LcPutChar 1D2E              __end_of_Espera 1EF0  
            __end_of_SetMSG 0154                   _CloseConn 1A30  __end_of_EscriuPrimeraOrdre 0EB4  
            __end_of___wmul 1FCC              __end_of_endMSG 01C6              __end_of_getIND 01B4  
            __end_of_getMSG 0146                 _BAUDCONbits 0FB8               __pidataCOMRAM 01C6  
       LcPutString@numChars 0047                   _ColumnAct 0049              __end_of_rxInit 1FF0  
            __end_of_my_rsi 0012              __end_of_txInit 00BA      ValorsTeclatInit@isBusy 005C  
      __end_of_MotorAltaveu 1AEE                 __end_ofPL10 1064                 __end_ofPL20 0ED0  
               __end_ofPL12 0748                 __end_ofPL30 158A                 __end_ofPL22 1B12  
               __end_ofPL14 075E                 __end_ofPL40 1F26                 __end_ofPL32 0B70  
               __end_ofPL24 076A                 __end_ofPL16 0968                 __end_ofPL50 1648  
               __end_ofPL42 13F0                 __end_ofPL34 1BF4                 __end_ofPL26 052A  
               __end_ofPL18 106E                 __end_ofPL60 1FA6                 __end_ofPL52 0974  
               __end_ofPL44 1C02                 __end_ofPL36 0D1E                 __end_ofPL28 1D2E  
               __end_ofPL70 1216                 __end_ofPL62 120C                 __end_ofPL54 0774  
               __end_ofPL46 17A0                 __end_ofPL38 1CCE                 __end_ofPL80 122A  
               __end_ofPL72 1082                 __end_ofPL64 1078                 __end_ofPL56 1DD2  
               __end_ofPL48 1B20                 __end_ofPL90 0EF8                 __end_ofPL82 108C  
               __end_ofPL74 0D28                 __end_ofPL66 0EE4                 __end_ofPL58 0EDA  
               __end_ofPL92 0F02                 __end_ofPL84 1096                 __end_ofPL76 1220  
               __end_ofPL68 0EEE                 __end_ofPL94 097C                 __end_ofPL86 10A0  
               __end_ofPL78 0D32                 __end_ofPL96 0D3A                 __end_ofPL88 1234  
               __end_ofPL98 18B2         start_initialization 18B2               _setJoyChannel 0172  
                ?_HiHaTecla 0059                   _ReciveMSG 097C                  ?_CantaData 0059  
                 _OpcioMenu 01A4                    ??_GetEND 0059                    ??_LcInit 006F  
                  ??_Espera 006A                    ??_SetMSG 0059                ??_ValorTecla 0070  
                 _MotorMenu 0B70                  ?_LcPutChar 0059               _MotorKeyboard 1234  
                  ??___wmul 005D                    ??_endMSG 0059                    ??_getIND 0059  
                  ??_getMSG 0059                  ?_CloseConn 0059                 __pdataBANK0 00D0  
               __pdataBANK1 0100                   _StateMenu 01A0                    ??_rxInit 005C  
                  ??_my_rsi 0059                    ??_txInit 005C                   _StartRead 0016  
                 _SorollAlt 19B4                    ?_EQM_MSG 0059                    ?_EQMInit 0059  
               __pbssCOMRAM 0001              ?_setJoyChannel 0059               ?_TI_ResetTics 0059  
        __end_of_ValorTecla 163A                    ?_TI_Init 0059                    ?_LcClear 0059  
                  ?_CantaIR 0059                  ?_ReciveMSG 0059                    ?_GetFlag 0059  
            _CantaPartBaixa 0F02            ??_ShowConnStatus 0072                ?_WaitForBusy 0059  
                ?_OpcioMenu 0059                    ?_JoyInit 0059                   _getAction 01AC  
                  ?_MotorRX 0059                    ?_MotorTX 0059                  ?_MotorMenu 0059  
            ?_MotorKeyboard 0059                   __pintcode 0008               SetMSG@new_msg 0059  
             ??_mouJoyAvail 0059             CantaPartBaixa@c 005E                   _configInt 0154  
                ?_StateMenu 0059                ?_ValorsState 0059                  ?_StartRead 0059  
              _TeclaPremuda 0190                  ?_SorollAlt 0059                 __smallconst 0200  
          MotorCOM@new_msgC 005A              ??_TI_ResetTics 0059                 ??_HiHaTecla 0059  
    __end_of_CantaPartBaixa 104C                   _msgToSend 0009                MotorRX@state 0031  
                 _dutycycle 0011                 ??_CantaData 005F              ___wmul@product 005D  
                  _LATAbits 0F89                    _LATBbits 0F8A                    _LATCbits 0F8B  
              MotorTX@state 0037                    _LATDbits 0F8C            _compt@menu$F1453 0015  
                 _resetMENU 001F                    _PIR1bits 0F9E                  ?_getAction 0059  
               ??_LcPutChar 006F                    _RCONbits 0FD0                   _wifiSTATE 0021  
               ??_CloseConn 0072                    _SIO_Init 0112                LcPutString@s 0070  
                ?_configInt 0059               ??_SIO_RXAvail 0059                  _ADCON0bits 0FC2  
             ??_SIO_GetChar 0059           ___wmul@multiplier 0059                   _startMenu 017E  
           ??_setJoyChannel 0059                    Espera@ms 0068         __end_of_mouJoyAvail 1F54  
                  _LcGotoXY 17A0                    _ConfWIFI 02AE                    _GetRxMSG 018A  
                  _GetTecla 1E66             _ListAccesPoints 1DD2               ??_SIO_PutChar 0059  
               LcGotoXY@Row 0067                 _INTCON2bits 0FF1                   copy_data0 18C6  
                 copy_data1 18E6             ?_CantaPartBaixa 0059            _finishConversion 0178  
               ??_ReciveMSG 0070         _timer@altaveu$F1595 0050                    _MenuInit 006E  
               ??_OpcioMenu 0059           _start@txcom$F1020 003B             ??_MotorKeyboard 0066  
              _MotorAltaveu 1AAC           ?_ValorsTeclatInit 0059                    __Hrparam 0000  
                  _MotorCOM 16F4                    _MotorEQM 131A                 ??_MotorMenu 0070  
                  __Lrparam 0000          ??_ValorsTeclatInit 005C                _teclapremuda 0044  
               ??_StateMenu 0059                rxInit@isBusy 005C                 ??_StartRead 0059  
                ?_startMenu 0059                 ??_SorollAlt 0059                    _fiSoroll 019C  
       __end_of_SIO_RXAvail 018A                    __ptext10 0190                    __ptext11 1648  
        _EscriuPrimeraOrdre 0D3A                    __ptext20 01A0                    __ptext12 13F0  
                  __ptext21 19B4                    __ptext13 0194                    __ptext30 0774  
                  __ptext22 01A4                    __ptext14 0B70                    __ptext31 01B0  
                  __ptext23 052A                    __ptext15 1234                    __ptext40 0016  
                  __ptext32 1CCE                    __ptext24 01A8                    __ptext16 131A  
                  __ptext41 0184                    __ptext33 016A                    __ptext25 1F26  
                  __ptext17 097C                    __ptext50 1D2E                    __ptext42 01B8  
                  __ptext34 1E66                    __ptext26 01AC                    __ptext18 0198  
                  __ptext51 17A0                    __ptext43 16F4                    __ptext35 02AE  
                  __ptext27 0178                    __ptext19 019C                    __ptext60 0160  
                  __ptext52 1C6A                    __ptext44 0146                    __ptext36 017E  
                  __ptext28 00D2                    __ptext61 1B20                    __ptext53 00E8  
                  __ptext45 01BC                    __ptext37 0138                    __ptext29 1DD2  
                  __ptext70 0088                    __ptext62 0036                    __ptext54 1AAC  
                  __ptext46 018A                    __ptext38 01C4                    __ptext71 1EF0  
                  __ptext63 1E1E                    __ptext55 006E                    __ptext47 01C0  
                  __ptext39 01B4                    __ptext64 0F02                    __ptext56 14C4  
                  __ptext48 1A30                    __ptext73 0126                    __ptext65 10A0  
                  __ptext57 1EAC                    __ptext49 1B92                    __ptext66 1F54  
                  __ptext58 1FA6                    __ptext67 1FF0                    __ptext59 0D3A  
                  __ptext68 00BA                    __ptext69 1D82         __end_of_SIO_GetChar 01BC  
             ??_TI_NewTimer 005A              CantaPartAlta@c 005E                    _comptSEC 001E  
                  _maxChars 003E             _start@EQM$F1359 0030                 getMSG@index 0059  
       ?_EscriuPrimeraOrdre 0059       __end_of_CantaPartAlta 1202                    _msgToLCD 0022  
             CantaData@Data 005F         __end_of_SIO_PutChar 0172                    _numChars 0040  
               ??_getAction 0059                    isa$xinst 0000        __end_of_TI_ResetTics 0054  
                  int$flags 0078                    _pulsacio 0042                 _mouJoyAvail 1F26  
                  _stopMenu 0198                 ??_configInt 0059            _state@menu$F1450 0018  
      ??_EscriuPrimeraOrdre 0059                  LcInit@rows 006F     __end_of_ListAccesPoints 1E1E  
                _INTCONbits 0FF2   TI_GetTics@CopiaTicsActual 0061              _lletres_teclat 00D0  
             ??_LcCursorOff 0067                    intlevel2 0000               _EnterChatMode 0774  
                LcPutChar@c 006F         __end_of_TI_NewTimer 1F1A            LcPutString@state 0048  
             ??_LcPutString 0072                txInit@isBusy 005C           _MotorValorsTeclat 182A  
               ??_startMenu 0059                 _SIO_RXAvail 0184            _tecla@menu$F1452 0016  
               _SIO_GetChar 01B8          ?_MotorValorsTeclat 0059             _timer@EQM$F1360 0052  
             ?_KeyBoardInit 0059           ??_startConversion 0059                 _SIO_PutChar 016A  
       ??_MotorValorsTeclat 0076             ValorTecla@valor 003D              ?_EnterChatMode 0059  
            ValorTecla@fila 0075         __end_of_LcCursorOff 016A  
