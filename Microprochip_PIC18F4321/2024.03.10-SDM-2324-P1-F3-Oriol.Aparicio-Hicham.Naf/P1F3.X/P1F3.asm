;PRACTICA 1 FASE 3
    ;membre_1: Hicham Naf
    ;membre_2: Oriol Aparicio
    ;identificador_grup: 82

#include <p18f4321.inc>

    CONFIG OSC = HSPLL		;utilitzem XSTALL extern de 10MHz amb PLL per anar a 40MHz
    CONFIG MCLRE = ON		;tenim polsador de reset per si el PIC es queda penjat
    CONFIG PBADEN = DIG		;Sempre digital
    CONFIG WDT = OFF		;Posem a OFF el watch dog timer perquè no l'utilitzarem
    CONFIG LVP = OFF
			    ;Mapejem les @ de la FLASH
    ORG 0x0000
    GOTO MAIN			;Quan el pic es reseteja anem al main
    ORG 0x0008
    GOTO RSI_GEN		;declarem la interrupció del timer0 com a alta
    ORG 0x0018
    RETFIE FAST			;posem retfie per si de cas, tot i que no saltarà mai


;-------------------------------------------------------------------------------
; VARIABLES A LA RAM
;------------------------------------------------------------------------------- 
COMPTADOR		   EQU 0x01	    ;comptadors pel control dels pwm's
		   
VALOR			   EQU 0x02	    ;GUARDEM EL CONTINGUT DE LA RAM
			   
COMPT_MATRIU		   EQU 0x04
		   
LED_Blue_Mirall		   EQU 0x05
LED_Green_Mirall	   EQU 0x06
LED_Red_Mirall		   EQU 0x07
		   
COMPTADOR1		   EQU 0x08	
COMPTADOR2		   EQU 0x09
		   
VALUEESPERA		   EQU 0x0A

SOROLL_FREQ		   EQU 0x0B
		   
COORD_X			   EQU 0x0C
COORD_Y			   EQU 0X0D
			   
RAM_COORD		   EQU 0x0E 		   
CONTINGUT		   EQU 0x0F
CURRENT_GRID		   EQU 0x10

TEMPS_INC_L		   EQU 0x13
TEMPS_INC_H		   EQU 0x14	

ACTUAL_PWM		   EQU 0x15
PWM_S0			   EQU 0x16
PWM_S1			   EQU 0x17
MAX_PWM			   EQU 0x18
COMPT_1S		   EQU 0x1A
VALUE			   EQU 0x1B
CANVI_LINEA		   EQU 0x1C
COMPT_EEPROM		   EQU 0x1D
VALUE_E			   EQU 0x1E
STARTGAME		   EQU 0x1F
JOYX			   EQU 0x20
JOYY			   EQU 0x21   
NUMBERCOMPROVACIO	   EQU 0x22
COMPROVACIO1		   EQU 0x23
LED_INT			   EQU 0x24
COMPT_LED		   EQU 0x25
MATRIU_CONTROL		   EQU 0x26
JOY_FLAG_Y		   EQU 0x27
FLAG_OPCIO_1		   EQU 0x28
FLAG_OPCIO_2		   EQU 0x29
VALOR_RAINBOW              EQU 0x2A
LED_INT_ANT		   EQU 0x2C
GLOVAL_VIEW		   EQU 0x2D
NUKE_TRYS		   EQU 0x2E
NUKE_CHECK_0		   EQU 0x2F
NUKE_CHECK_1		   EQU 0x30	
COMPTADOR_LECTURA	   EQU 0x31
COLOR_RAINBOW		   EQU 0x32
COMPT_RAINBOW		   EQU 0x33
END_GAME_M		   EQU 0x34
COMPT_RAINBOW_R		   EQU 0x35
;-------------------------------------------------------------------------------
; TAULES DE LA FLASH
;------------------------------------------------------------------------------- 
;TAULASERVO EQU 0x20		;definim taula de la flash per guardar els increments dels servos
 
TAULASERVO
    DB b'11111100',b'00011000'		; Valor del comptador per tindre 5 increments	0x20,0x21
    DB b'11111100', b'10111111'		; Valor del comptador per tindre 6 increments	0x22,0x23
    DB b'11111101', b'00110110'		; Valor del comptador per tindre 7 increments	0x24,0x25
    DB b'11111101', b'10001111'		; Valor del comptador per tindre 8 increments	0x26,0x27
    DB b'11111101', b'11010100'		; Valor del comptador per tindre 9 increments	0x28,0x29
    DB b'11111110', b'00001100'		; Valor del comptador per tindre 10 increments	0x2A,0x2B
    DB b'11111110', b'00111001'		; Valor del comptador per tindre 11 increments	0x2C,0x2D
    DB b'11111110', b'01011111'		; Valor del comptador per tindre 12 increments	0x2E,0x2F
    DB b'11111110', b'01111111'		; Valor del comptador per tindre 13 increments	0x30,0x31
    DB HIGH(.65179), LOW(.65179)	; Valor del comptador per tindre 14 increments	0x32,0x33
    DB HIGH(.65203), LOW(.65203)	; Valor del comptador per tindre 15 increments	0x34,0x35
    DB HIGH(.65224), LOW(.65224)	; Valor del comptador per tindre 18 increments	0x36,0x37
    DB HIGH(.65273), LOW(.65273)	; Valor del comptador per tindre 16 increments	0x38,0x39
    DB HIGH(.65242), LOW(.65242)	; Valor del comptador per tindre 17 increments	0x3A,0x3B
    DB HIGH(.65258), LOW(.65258)	; Valor del comptador per tindre 19 increments	0x3C,0x3D
    DB HIGH(.65286), LOW(.65286)	; Valor del comptador per tindre 20 increments	0x3E,0x3F
    DB HIGH(.65298), LOW(.65298)	; Valor del comptador per tindre 21 increments	0x40,0x41
    DB HIGH(.65309), LOW(.65309)	; Valor del comptador per tindre 22 increments	0x42,0x43
    DB HIGH(.65319), LOW(.65319)	; Valor del comptador per tindre 23 increments	0x44,0x45
    DB HIGH(.65328), LOW(.65328)	; Valor del comptador per tindre 24 increments	0x46,0x47
    DB HIGH(.65336), LOW(.65336)	; Valor del comptador per tindre 25 increments	0x48,0x49	   

TAULAEUSART
    ;MENU PRINCIPAL
    DB "\n\rSelect an option: \n\r", "1 - New Game \n\r"
    DB "2 - Resume Game\n\r"
    DB "> ", "?"
TAULAEUSART_2
    DB "\n\rSelect an option: \n\r", "1 - Global View \n\r"
    DB "2 - Nuke\n\r", "3 - Songs\n\r"
    DB "> ", "?"
TAULANOTES
    DB "\n\rNotes: F4 F3 E5 E4 C4 B3 A3 D4 A4 G4\n\r","> ?"
TAULAVALORSNOTES
    DB .18,.37
    DB .9,.19
    DB .25,.26
    DB .29,.22
    DB .14,.16
TAULAENDGAME
    DB "\n\rGUANYADOR JUGADOR: ?"
;-------------------------------------------------------------------------------
; 1. CONFIGURACIO DE PORTS
;-------------------------------------------------------------------------------  

CONFIG_PORTS
    BSF	    TRISA,RA0,0			;
    BSF	    TRISA,RA1,0			;
    BSF	    TRISA,RA2,0
CONFIG_PWM_PORTS    
    BCF	    TRISD,RD0,0			;Grid
    BSF	    TRISD,RD2,0			;StartGame
    
    BCF	    TRISD,RD4,0			;FleetStatus0
    BCF	    TRISD,RD5,0			;FleetStatus1
    
    BCF	    TRISA,RA3,0			;ACK
    BCF	    TRISA,RA4,0			;CurrentGrid    
    BCF	    TRISA,RA5,0			;Speaker
CONFIG_BUTTONS    
    SETF TRISB, 0		;0-NewCoord, 1-NewBoat, 3-Up, 4-Left, 5-Down
    BSF	TRISD,RD1,0			;Right
    BSF TRISD,RD3,0			;Attack
    BCF	    INTCON2,RBPU,0		;activem pull ups al port B
CONFIG_COORDS
    BSF	    TRISD,RD6,0			;BC[6]
    BSF	    TRISD,RD7,0			;BC[7]
CONFIG_EUSART
    SETF TRISC, 0	;inicialitzem tot el port C com a entrada
    
    BSF	    TRISC,RC6,0
    BSF	    TRISC,RC7,0
    
    BCF	    TXSTA,TX9,0
    BSF	    TXSTA,TXEN,0
    BCF	    TXSTA,SYNC,0
    BSF	    TXSTA,BRGH,0
    
    BSF	    RCSTA,SPEN,0
    BCF	    RCSTA,RX9,0
    
    
    BSF	    BAUDCON, RCIDL,0
    BCF	    BAUDCON, RXDTP,0
    BCF	    BAUDCON, TXCKP,0
    BSF	    BAUDCON, BRG16,0
    BCF	    BAUDCON, WUE,0
    BCF	    BAUDCON, ABDEN,0
    
    CLRF    BRGH,0
    MOVLW   .87
    MOVWF   SPBRG,0
    
    BSF	    RCSTA,CREN,0
    RETURN
    
ESPERA				    ;Bucle d'espera fins que VALUEESPERA valgui 0
    NOP
    NOP
    NOP
    DECF    VALUEESPERA,1,0
    BTFSS   STATUS,Z,0
    GOTO	ESPERA
    RETURN

;-------------------------------------------------------------------------------
; 1.1. INICIALITZAR VARIABLES
;------------------------------------------------------------------------------- 
INIT_VARS
    BCF	    CURRENT_GRID,0,0
			
    BCF	    LATA,RA3,0		
    BCF	    LATA,RA4,0		
    BCF	    LATA,RB5,0
INIT_PWM 
    CLRF    MAX_PWM,0
    BCF	    LATD,RD0,0			   
    BCF	    LATD,RD4,0			   
    BCF	    LATD,RD5,0
   
    MOVLW   b'00000001'	    ;Inicialitzem el PWM
    MOVWF   COMPTADOR,0
    MOVWF   COLOR_RAINBOW,0
    CLRF   STARTGAME,0
    MOVLW  .2
    MOVWF LED_INT,0
    CLRF MATRIU_CONTROL,0
    CLRF FLAG_OPCIO_1,0
    CLRF FLAG_OPCIO_2,0	
    CLRF GLOVAL_VIEW,0
    MOVLW .1
    MOVWF NUKE_CHECK_1,0
    MOVWF NUKE_CHECK_0,0
    CLRF END_GAME_M,0
INIT_RAM
    MOVLW 0x01
    MOVWF FSR0H, 0	;Indiquem que volem utilitzar el banc 1.
  
    CLRF FSR0L, 0	;Comencem en l'adressa 0 del banc 1
    CALL RESET_RAM
    RETURN
    
RESET_RAM
    MOVLW .0
    MOVWF POSTINC0, 0
    MOVLW .140
    CPFSEQ FSR0L, 0
    GOTO RESET_RAM
    CLRF FSR0L, 0
    RETURN   

INIT_TIMER0    
    BSF	 INTCON,TMR0IE,0		    ;Activem interrupcio timer0 
    CALL TIMER0_LOW
    RETURN
    
INIT_INTERUPT_VARIABLES
    MOVLW UPPER(TAULASERVO)		;Load TBLPTR with the base
    MOVWF TBLPTRU	;Address of the word
    MOVLW HIGH(TAULASERVO)		
    MOVWF TBLPTRH
    
    MOVLW .5
    SUBWF MAX_PWM,0,0
    MULLW .2
    MOVF PRODL,0
    ADDLW LOW(TAULASERVO)
    MOVWF TBLPTRL,0
    
READ_WORD
    TBLRD*+		;Read into TABLAT and increment
    MOVF TABLAT, 0	;Get data
    MOVWF TEMPS_INC_H,0
    TBLRD*		;Read into TABLAT
    MOVF TABLAT, 0	;Get data
    MOVWF TEMPS_INC_L,0
    
    CLRF ACTUAL_PWM,0
    INCF MAX_PWM,1,0
    MOVFF   MAX_PWM, PWM_S0
    MOVFF   MAX_PWM, PWM_S1
    
    ;Guardar informacio servos a la RAM
    MOVLW .128
    MOVWF FSR0L,0
    MOVFF COORD_X, POSTINC0
    MOVFF COORD_Y, POSTINC0
    CLRF POSTINC0,0
    
    MOVFF PWM_S0, POSTINC0
    MOVFF PWM_S1, POSTINC0
    MOVFF MAX_PWM, POSTINC0
    MOVFF TEMPS_INC_H, POSTINC0
    MOVFF TEMPS_INC_L, POSTINC0
    
    MOVLW .1
    MOVWF POSTINC0,0
    MOVWF POSTINC0,0
    
    MOVLW .0
    MOVWF POSTINC0,0
    MOVLW .1
    MOVWF POSTINC0,0
    MOVLW .2
    MOVWF POSTINC0,0
    MOVLW .3
    MOVWF POSTINC0,0
    MOVLW .4
    MOVWF POSTINC0,0
    
    CLRF FSR0L,0
    RETURN    
;-------------------------------------------------------------------------------
; 2. INTERRUPCIONS
;-------------------------------------------------------------------------------  
CONFIG_INT
    BCF	    RCON,IPEN,0			    ;desactivo prioritats sempre per tenir nomes la alta
    BSF	    INTCON,GIE,0		    ;activem les interrupcions internes
    BSF	    INTCON,PEIE,0		    ;activem masked i unmasked interrupts sempre
    BSF	    INTCON,TMR0IE,0		    ;de moment desactivem la interrupcio del timer0
    BSF	    INTCON,INT0IE,0		    ;activem interrupcio RB0
    
    BCF	    INTCON2,INTEDG0,0		    ;INT0 per flanc de baixada
    BSF	    INTCON2,INTEDG1,0		    ;INT1 per flanc de pujada
    
    BSF	    INTCON3,INT1IE,0		    ;activem interrupcio RB1
    
					    ;per comptar de 20ms en 20ms si vaig a 100ns haig de fer 200.000 increments,
    MOVLW   b'10000001'			    ;per tant necessitare prescaler (amb prescaler de 4 em surten 50.000 increments
    MOVWF   T0CON,0			    ;i ja em dona mes petit de 16b)
    RETURN
    
RSI_GEN
    BTFSC   INTCON,INT0IF,0
    GOTO    RSI_INT0
    BTFSC   INTCON3,INT1IF,0
    GOTO    RSI_INT1
    BTFSC   INTCON,TMR0IF,0
    GOTO    RSI_T0
    RETFIE FAST
;-------------------------------------------------------------------------------
; 2.1. INTERRUPCIO DEL TIMER0
;------------------------------------------------------------------------------- 
TIMER0_LOW			
    MOVLW   HIGH(.64286)		    ;(16b) 65536 - 1250 = 64286 (0.5ms)
    MOVWF   TMR0H,0
    MOVLW   LOW(.64286)
    MOVWF   TMR0L,0
    INCF ACTUAL_PWM,1,0
    INCF COMPT_1S,1,0
    INCF COMPT_LED,1,0
    CALL ESPERA_T0
    RETURN
TIMER0_INCREMENT
    MOVFF   TEMPS_INC_H, TMR0H
    MOVFF   TEMPS_INC_L, TMR0L
    CALL ESPERA_T0
    RETURN  
TIMER0_HIGH			
    MOVLW   HIGH(.21786)		    ;(16b) 65536 - 43750 = 21786 (17.5ms)
    MOVWF   TMR0H,0
    MOVLW   LOW(.21786)
    MOVWF   TMR0L,0
    CLRF ACTUAL_PWM,0
    RETURN
T0_LOW
    BSF LATD,4,0 
    BSF LATD,5,0
    CALL TIMER0_LOW
    GOTO RSI_T0   
T0_HIGH
    CALL TIMER0_HIGH
    BCF LATD,4,0 
    BCF LATD,5,0
    GOTO END_RSI_T0  
T0_RSI_F1
    MOVLW   HIGH(.21786)		    ;(16b) 65536 - 43750 = 21786 (17.5ms)
    MOVWF   TMR0H,0
    MOVLW   LOW(.21786)
    MOVWF   TMR0L,0
    INCF COMPT_LED,1,0
    RETFIE  FAST  
ESPERA_T0
    BTFSS INTCON,TMR0IF,0
    GOTO ESPERA_T0
    RETURN
RSI_T0
    BCF	    INTCON,TMR0IF,0		    ;Desactivem interrupcio timer0 
    CLRF MATRIU_CONTROL,0
    BTFSS STARTGAME, 0, 0 
    GOTO T0_RSI_F1
    BCF	    INTCON,TMR0IE,0
    MOVLW .0
    CPFSGT ACTUAL_PWM,0
    GOTO    T0_LOW	    		    
    MOVF ACTUAL_PWM,0
    CPFSGT MAX_PWM,0
    GOTO    T0_HIGH
    
    MOVF ACTUAL_PWM,0
    CPFSGT PWM_S0,0
    BCF LATD,4,0
    CPFSGT PWM_S1,0
    BCF LATD,5,0
    CALL TIMER0_INCREMENT
    INCF ACTUAL_PWM,1,0
    GOTO RSI_T0
    
END_RSI_T0    
    BCF	    INTCON,TMR0IF,0		    ;netejem el flac de la interrupcio i fem retfie fast
    BSF	    INTCON,TMR0IE,0		    ;activem interrupcio timer0
    RETFIE  FAST  
    
RSI_INT0				    ;Interrupcio NewCoord
    MOVLW   .255
    MOVWF   VALUEESPERA,0
    CALL	ESPERA
    
    CALL ESCRIPTURA_VALORS_F1
    
    
    BTFSS   CURRENT_GRID,0,0
    INCF MAX_PWM,1,0
    
    BSF	    LATA,RA3,0
    CALL    ESPERA_1MS
    BCF	    LATA,RA3
    
END_RSI_INT0    
    BCF	    INTCON,INT0IF,0		    ;Netejem el flac de la interrupcio i fem retfie fast    
    RETFIE FAST
    
RSI_INT1				    ;Interrupció del NewBoat per canviar de jugador
    
    CALL MOSTRAR_NOVA_PAG
    CALL LECTURA_VALORS_EU
    BTFSS   FLAG_OPCIO_1,0,0
    CALL   READ_FLASH
    
    BTG CURRENT_GRID,0,0
    
    BTG LATA,RA4,0
    CALL    LECTURA_VALORS
    MOVLW   .255
    MOVWF   VALUEESPERA,0
    CALL	ESPERA
    
END_RSI_INT1    
    BCF	    INTCON3,INT1IF,0		    ;Netejem el flac de la interrupcio i fem retfie fast    
    RETFIE FAST
    
;-------------------------------------------------------------------------------
; 3. MODUL CONTROL DE RAM
    
;3.1 LECTURA TAULELL RAM I MOSTRAR MATRIU
;-------------------------------------------------------------------------------     
ESPERA_RESET_MATRIU
    CLRF FSR0L, 0
    CALL ESPERA_100MICS
    CALL ESPERA_100MICS
LECTURA_VALORS
    
    SETF MATRIU_CONTROL,0
    ;ESPERA_MATR
    ;BTFSC MATRIU_CONTROL, 0, 0
    ;GOTO ESPERA_MATR
    CLRF FSR0L, 0
    MOVLW .64
    BTFSC CURRENT_GRID,0,0
    MOVWF   FSR0L,0
BUCLE_LECTURA    
    ;BCF	    INTCON,TMR0IE,0		    ;Desactivem interrupcio timer0 
    
    MOVFF POSTINC0, VALOR		    ;Guardem la posicio de la RAM actual i incrementem el punter
    ;Tenim el color de tots els taulells.
    BTFSS STARTGAME, 0, 0  ;SI L'USUARI HA COMENÇAT EL JOC MOSTRAREM ELS VALORS DE LA FASE 2
    CALL PRINT_VALORS_F1
    BTFSC STARTGAME, 0, 0  ;SI L'USUARI NO HA COMENÇAT EL JOC MOSTRAREM ELS VALORS DE LA FASE 1
    CALL PRINT_VALORS_F2
    BTFSS MATRIU_CONTROL, 0, 0
    GOTO ESPERA_RESET_MATRIU
    MOVLW .63	    
    CPFSGT FSR0L, 0			    ;Jugador 0
    GOTO BUCLE_LECTURA
    BTFSS CURRENT_GRID,0,0
    GOTO END_LECTURA_RAM
    MOVLW .129
    CPFSEQ FSR0L, 0			    ;Jugador 1
    GOTO BUCLE_LECTURA
END_LECTURA_RAM
    CLRF FSR0L, 0
    ;BTFSC   STARTGAME,0,0		    ;Activem la interrupcio nomes si estem a la Fase 2
    ;BSF	    INTCON,TMR0IE,0		    ;Activo interrupcio timer0 
    
    RETURN    

;-------------------------------------------------------------------------------
;3.2 ESCRIPTURA RAM FASE 1
;-------------------------------------------------------------------------------      
ESCRIPTURA_VALORS_F1	    ;CRIDEM LA FUNCIÓ QUAN REBEM EL SENYAL NewCoord
    
    CALL COORD_F1
    
    MOVFF RAM_COORD, FSR0L	;ASSIGNEM EL VALOR AL PUNTER DE LA RAM
    
    MOVLW .1
    MOVWF INDF0,0		;POSEM DE COLOR VERD LA POSICIÓ AL TAULELL
    
    CLRF FSR0L, 0		;POSEM EL PUNTER DE LA RAM A 0
    
    CALL LECTURA_VALORS		;MOSTRAR ACTUALITZAR LA MATRIU
    
    RETURN
    
;-------------------------------------------------------------------------------
;3.3 OBTENCIO NEW COORD
;-------------------------------------------------------------------------------    
    
COORD_F1
    MOVF PORTC, 0	    ;POSEM EL VALOR DEL PORT C AL REGISTRE WREG
    ANDLW 0x0F		    ;MULTIPLIQUEM ELS 4 LSB PER 1 I ELS 4 MSB PER 0
    MOVWF COORD_Y, 0	    ;GUARDEM EL RESULTAT A COORD_Y
    
    MOVFF PORTC, COORD_X    ;MOVEM EL VALOR DEL PORT C A LA VARIABLE COORD_X
    rlncf COORD_X,1,0	    ;ROTEM 4 VEGADES EL VALOR
    rlncf COORD_X,1,0
    rlncf COORD_X,1,0
    rlncf COORD_X,1,0
    MOVF COORD_X, 0, 0	    ;COPIEM EL VALOR AL REGISTRE WREG
    ANDLW 0x03		    ;MULTIPLIQUEM ELS 4 LSB PER 1 I ELS 4 MSB PER 0
    MOVWF COORD_X, 0	    ;GUARDEM EL RESULTAT A COORD_X
    BTFSC PORTD,6,0
    BSF COORD_X,2,0
    BTFSC PORTD,7,0
    BSF COORD_X,3,0
    
    CALL CONVERT_COORD_TO_RAM
    
    RETURN

;-------------------------------------------------------------------------------
;3.4 CONVERSIO COORDENADA A POSICIO MATRIU
;-------------------------------------------------------------------------------     
CONVERT_COORD_TO_RAM
  
    MOVFF COORD_Y, RAM_COORD	    ;RESTAR 1 A COORD_Y
    DECF RAM_COORD, 1, 0
    
    MOVLW .8			    ;MULTIPLICAR PER 8
    MULWF RAM_COORD,0
    
    MOVF COORD_X, 0		    ;MOVEM LA COORD_X AL REGISTRE WREG
    ADDWF PRODL, 0, 0		    ;SUMAR COORD_X A PRODL, I GUARDAR EL RESULTAT AL ACUMULADOR
    MOVWF RAM_COORD, 0		    ;A RAM_COORD TENIM LA POSICIÓ DE LA RAM DE LES COORDENADES
    DECF RAM_COORD, 1, 0	    ;RESTEM 1 A RAM_COORD PER A QUE COINCIDEIXI LA ADREÇA DE LA RAM
    
    MOVLW .64
    BTFSC CURRENT_GRID, 0, 0	    ;MIREM SI CURRENT_GRID ES DEL JUGADOR 0 O 1
    ADDWF RAM_COORD, 1, 0	    ;SELECCIONAR TAULELL JUGADOR 1, SI HO SALTEM ESTAREM FENT EL JUGADOR 0
    
    RETURN
    
 
;-------------------------------------------------------------------------------
; 4. MODUL CONTROL MOVIMENT CURSOR + ATACAR
;-------------------------------------------------------------------------------     
INIT_CURSOR
    MOVLW .1
    MOVWF COORD_X, 0	    ;POSEM A 1 LA COORDENADA X
    MOVLW .1
    MOVWF COORD_Y, 0	    ;POSEM A 1 LA COORDENADA Y
    RETURN
   
MOURE_DOWN
    ;DOWN
    MOVLW .1
    ADDWF COORD_Y, 1,0	    ;SUMEM 1 AL VALOR DE LA COORD_Y
    ;SI VOLEM SALTAR DEL 8 AL 1
    MOVLW .8
    CPFSGT COORD_Y, 0	    ;COMPARA EL WREG AMB COORD_Y, SI COORD_Y ES MES GRAN SALTA DE LINEA
    GOTO LECTURA_VALORS
    MOVLW .1
    MOVWF COORD_Y, 0
    GOTO LECTURA_VALORS
    
    
  
MOURE_UP
    ;UP + SALTAR DE 1 A 8
    DECFSZ COORD_Y, 1, 0    ;RESTEM 1 AL VALOR DE COORD_Y
    GOTO LECTURA_VALORS   ;TORNEM SI NO ESTEM A 1
    MOVLW .8
    MOVWF COORD_Y, 0	    ;SI ESTAVEM A 1 EL POSEM A 8
    GOTO LECTURA_VALORS
   
    
    
MOURE_RIGHT
    ;RIGHT
    MOVLW .1
    ADDWF COORD_X, 1, 0	    ;SUMEM 1 AL VALOR DE LA COORD_X
    ;SI VOLEM SALTAR DEL 8 AL 1
    MOVLW .8
    CPFSGT COORD_X, 0	    ;COMPARA EL WREG AMB COORD_X, SI COORD_Y ES MES GRAN SALTA DE LINEA
    GOTO LECTURA_VALORS
    MOVLW .1
    MOVWF COORD_X, 0
    GOTO LECTURA_VALORS
    
    
    
MOURE_LEFT
    ;LEFT + SALTAR DE 1 A 8
    DECFSZ COORD_X, 1, 0    ;RESTEM 1 AL VALOR DE COORD_X
    GOTO LECTURA_VALORS   ;TORNEM SI NO ESTEM A 1
    MOVLW .8
    MOVWF COORD_X, 0	    ;SI ESTAVEM A 1 EL POSEM A 8
    GOTO LECTURA_VALORS
    
    
    
ATACAR
    ;CONVERTIR A RAM LA COORDENADA ACTUAL
    CALL CONVERT_COORD_TO_RAM
    
    MOVFF RAM_COORD,FSR0L	;AGAFEM L'ADREÇA DE LA COORDENADA A ATACAR I LA CARREGUEM AL PUNTER

    ;COMPROVAR EL VALOR QUE TE 00 O 01
    MOVFF   INDF0, VALOR ;COPIEM EL CONTINGUT DE LA RAM A LA VARIABLE CONTINGUT_RAM
    
    MOVLW .0
    CPFSGT  VALOR, 0	;SI EL CONTINGUT DE LA RAM EL MAJOR A 00 S'HO SALTA
    GOTO HAS_TOCAT_AIGUA
    MOVLW .1
    CPFSGT  VALOR, 0	;SI EL CONTINGUT DE LA RAM EL MAJOR A 01 S'HO SALTA
    GOTO HAS_TOCAT_BARCO
    CLRF FSR0L,0
    RETURN
    
    
HAS_TOCAT_AIGUA
    ;POSAR LA POSICIO EN VERMELL
    MOVLW .2
    MOVWF INDF0, 0	    ;POSEM 10 A LA COORDENADA ATACADA
    CALL GUARDAR_ATACK
    MOVLW b'00001001'		    ;MOVEM EL CURSOR FORA DE LA MATRIU A MOSTRAR   
    MOVWF COORD_Y,0
    ;MOSTREM LA MATRIU ACTUALITZADA
    CLRF FSR0L,0
    CALL LECTURA_VALORS
    CLRF FSR0L,0
    CALL LECTURA_VALORS_EU
    CALL READ_FLASH_2
    ;FER EL SOROLL GREU 1S
    CLRF COMPT_1S,0
    MOVLW .78
    MOVWF   SOROLL_FREQ,0
    CALL SOROLL_ALTAVEU
    CLRF COMPT_1S,0
    CALL ESPERA_1S
    CLRF COMPT_1S,0
    CALL ESPERA_1S
    
    CALL INIT_CURSOR
    BTG CURRENT_GRID,0,0
    
    ;CALL LECTURA_VALORS_EU
    ;CALL READ_FLASH_2
    
    CALL GUARDAR_CURSOR
    CALL GUARDAR_VIDES
    
    BTG LATA,RA4,0
    CALL LECTURA_VALORS
    
    RETURN
    
HAS_TOCAT_BARCO
    ;POSAR LA POSICIO EN VERD
    MOVLW .3
    MOVWF INDF0, 0	    ;POSEM 11 A LA COORDENADA ATACADA
    CALL GUARDAR_ATACK
    MOVLW b'00001001'		    ;MOVEM EL CURSOR FORA DE LA MATRIU A MOSTRAR     
    MOVWF COORD_Y,0
    
    ;MOSTREM LA MATRIU ACTUALITZADA
    CLRF FSR0L,0
    CALL LECTURA_VALORS
    CLRF FSR0L,0
    CALL LECTURA_VALORS_EU
    CALL READ_FLASH_2
    
    BTFSC CURRENT_GRID ,0,0
    DECF PWM_S1,1,0
    BTFSS CURRENT_GRID ,0,0
    DECF PWM_S0,1,0
    ;FER EL SOROLL AGUT 1S
    CLRF COMPT_1S,0
    MOVLW .10
    MOVWF   SOROLL_FREQ,0
    CALL SOROLL_ALTAVEU
    CLRF COMPT_1S,0
    CALL ESPERA_1S
    CLRF COMPT_1S,0
    CALL ESPERA_1S
    
    
    CALL INIT_CURSOR
    
    
    ;CALL LECTURA_VALORS_EU
    ;CALL READ_FLASH_2
    
    CALL GUARDAR_CURSOR
    CALL GUARDAR_VIDES
    
    MOVLW   .1
    CPFSGT   PWM_S0,0
    GOTO    END_GAME
    CPFSGT   PWM_S1,0
    GOTO    END_GAME
    
    
    BTG CURRENT_GRID,0,0
    CALL GUARDAR_CURSOR
    BTG LATA,RA4,0
    CALL LECTURA_VALORS
    RETURN

ESPERA_1S
    MOVLW .5
    CPFSLT COMPT_LED,0
    CALL CONFIG_ADC_LED
    
    MOVLW .50
    CPFSGT COMPT_1S,0
    GOTO ESPERA_1S
    RETURN
    
SOROLL_ALTAVEU  
    BSF LATA,RA5,0		    
    MOVFF   SOROLL_FREQ, COMPTADOR2 
    CALL INCREMENTA_XS
    BCF LATA,RA5,0
    MOVFF   SOROLL_FREQ, COMPTADOR2
    CALL INCREMENTA_XS
    MOVLW .50
    CPFSGT COMPT_1S,0
    GOTO SOROLL_ALTAVEU
    RETURN  
    
;-------------------------------------------------------------------------------
; x. MODUL CONTROL EUSART
;------------------------------------------------------------------------------- 
LECTURA_VALORS_EU
    CLRF FSR0L, 0
    MOVLW .64
    BTFSC CURRENT_GRID,0,0
    MOVWF   FSR0L,0
    
    ;CLRF COMPT_EEPROM,0;
    
    CLRF    CANVI_LINEA,0    ;USART
    MOVLW '\n'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    MOVLW '\r'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
BUCLE_LECTURA_EU    
    INCF CANVI_LINEA,1,0
    
    MOVFF POSTINC0, VALOR		    ;Guardem la posicio de la RAM actual i incrementem el punter
    ;Tenim el color de tots els taulells.
    BTFSS GLOVAL_VIEW, 0, 0  ;SI L'USUARI HA COMENÇAT EL JOC MOSTRAREM ELS VALORS DE LA FASE 2
    CALL ADRESS_TO_CHAR
    BTFSC GLOVAL_VIEW, 0, 0  ;SI L'USUARI NO HA COMENÇAT EL JOC MOSTRAREM ELS VALORS DE LA FASE 1
    CALL ADRESS_TO_CHAR_2
    MOVLW .63	    
    CPFSGT FSR0L, 0			    ;Jugador 0
    GOTO BUCLE_LECTURA_EU
    BTFSS CURRENT_GRID,0,0
    GOTO END_LECTURA_RAM_EU
    MOVLW .127
    CPFSGT FSR0L, 0			    ;Jugador 0
    GOTO BUCLE_LECTURA_EU
    
    CLRF CANVI_LINEA,0
    MOVLW '\n'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    MOVLW '\r'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    
END_LECTURA_RAM_EU
    MOVLW '\n'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    MOVLW '\r'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    CLRF FSR0L, 0
    
    ;LA DE SOTA ES PER COMPROVAR
    ;CALL LECTURA_VALORS_EU_EP
    
    RETURN    
    
    
    
    
LECTURA_VALORS_EU_EP
    CLRF FSR0L, 0
    CLRF COMPT_EEPROM,0;
    
    CLRF    CANVI_LINEA,0    ;USART
    MOVLW '\n'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    MOVLW '\r'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
BUCLE_LECTURA_EU_EP 
    INCF CANVI_LINEA,1,0
    
    MOVF COMPT_EEPROM,0 ;
    
    MOVWF EEADR,0 ; Data Memory Address to write
    
    BCF EECON1, EEPGD,0 ; Point to DATA memory
    BCF EECON1, CFGS,0 ; Access EEPROM
    BSF EECON1, RD,0 ; EEPROM Read
    
    MOVFF EEDATA,VALUE_E ; W = EEDATA
    
    CALL L_EEPROM
    
    MOVLW .7
    CPFSGT CANVI_LINEA,0
    GOTO SKIP_L
    CLRF CANVI_LINEA,0
    MOVLW '\n'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    MOVLW '\r'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    
SKIP_L
    
    INCF COMPT_EEPROM,1,0
    
    MOVLW .143
    CPFSEQ COMPT_EEPROM, 0			    ;Jugador 1
    GOTO BUCLE_LECTURA_EU_EP
END_LECTURA_RAM_EU_EP
    MOVLW '\n'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    MOVLW '\r'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    CLRF FSR0L, 0
    RETURN    
    
    
INIT_FLASH
    MOVLW   LOW(TAULAEUSART)		
    MOVWF   TBLPTRL,0		
    MOVLW   HIGH(TAULAEUSART)		;RECUPEREM LA ADRESSA ON COMEN9A LA TAULA 
    MOVWF   TBLPTRH,0		;POSEM LA ADRESSA AL PART BAIXA DEL PUNTER 
    MOVLW   UPPER(TAULAEUSART)		;RECUPEREM LA ADRESSA ON COMEN9A LA TAULA 
    MOVWF   TBLPTRU,0		;POSEM LA ADRESSA AL PART BAIXA DEL PUNTER 
    RETURN
    
INIT_FLASH_2
    MOVLW   LOW(TAULAEUSART_2)		;RECUPEREM LA ADRESSA ON COMEN9A LA TAULA 
    MOVWF   TBLPTRL,0		;POSEM LA ADRESSA AL PART BAIXA DEL PUNTER 
    MOVLW   HIGH(TAULAEUSART_2)		;RECUPEREM LA ADRESSA ON COMEN9A LA TAULA 
    MOVWF   TBLPTRH,0		;POSEM LA ADRESSA AL PART BAIXA DEL PUNTER 
    MOVLW   UPPER(TAULAEUSART_2)		;RECUPEREM LA ADRESSA ON COMEN9A LA TAULA 
    MOVWF   TBLPTRU,0		;POSEM LA ADRESSA AL PART BAIXA DEL PUNTER 
    RETURN
    
INIT_FLASH_3
    MOVLW   LOW(TAULANOTES)		;RECUPEREM LA ADRESSA ON COMEN9A LA TAULA 
    MOVWF   TBLPTRL,0		;POSEM LA ADRESSA AL PART BAIXA DEL PUNTER 
    MOVLW   HIGH(TAULANOTES)		;RECUPEREM LA ADRESSA ON COMEN9A LA TAULA 
    MOVWF   TBLPTRH,0		;POSEM LA ADRESSA AL PART BAIXA DEL PUNTER 
    MOVLW   UPPER(TAULANOTES)		;RECUPEREM LA ADRESSA ON COMEN9A LA TAULA 
    MOVWF   TBLPTRU,0		;POSEM LA ADRESSA AL PART BAIXA DEL PUNTER 
    RETURN
INIT_FLASH_4
    MOVLW   LOW(TAULAVALORSNOTES)		;RECUPEREM LA ADRESSA ON COMEN9A LA TAULA 
    MOVWF   TBLPTRL,0		;POSEM LA ADRESSA AL PART BAIXA DEL PUNTER 
    MOVLW   HIGH(TAULAVALORSNOTES)		;RECUPEREM LA ADRESSA ON COMEN9A LA TAULA 
    MOVWF   TBLPTRH,0		;POSEM LA ADRESSA AL PART BAIXA DEL PUNTER 
    MOVLW   UPPER(TAULAVALORSNOTES)		;RECUPEREM LA ADRESSA ON COMEN9A LA TAULA 
    MOVWF   TBLPTRU,0		;POSEM LA ADRESSA AL PART BAIXA DEL PUNTER 
    RETURN
INIT_FLASH_5
    MOVLW   LOW(TAULAENDGAME)		;RECUPEREM LA ADRESSA ON COMEN9A LA TAULA 
    MOVWF   TBLPTRL,0		;POSEM LA ADRESSA AL PART BAIXA DEL PUNTER 
    MOVLW   HIGH(TAULAENDGAME)		;RECUPEREM LA ADRESSA ON COMEN9A LA TAULA 
    MOVWF   TBLPTRH,0		;POSEM LA ADRESSA AL PART BAIXA DEL PUNTER 
    MOVLW   UPPER(TAULAENDGAME)		;RECUPEREM LA ADRESSA ON COMEN9A LA TAULA 
    MOVWF   TBLPTRU,0		;POSEM LA ADRESSA AL PART BAIXA DEL PUNTER 
    RETURN
    
    
    
          
MOSTRAR_CARACTER
    BTFSS   TXSTA,TRMT,0
    GOTO    MOSTRAR_CARACTER
    MOVFF   VALUE,TXREG
    RETURN
    
    
ADRESS_TO_CHAR
    MOVLW '['
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    BTFSS STARTGAME, 0, 0  ;SI L'USUARI HA COMENÇAT EL JOC MOSTRAREM ELS VALORS DE LA FASE 2
    CALL SW_VIEW
    BTFSC STARTGAME, 0, 0  ;SI L'USUARI NO HA COMENÇAT EL JOC MOSTRAREM ELS VALORS DE LA FASE 1
    CALL SW_VIEW_2
    CALL MOSTRAR_CARACTER
    MOVLW ']'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    
    MOVLW .7
    CPFSGT CANVI_LINEA,0
    RETURN
    CLRF CANVI_LINEA,0
    MOVLW '\n'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    MOVLW '\r'
    MOVWF VALUE,0
    GOTO MOSTRAR_CARACTER
    RETURN

ADRESS_TO_CHAR_2
    MOVLW '['
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    CALL SW_VIEW_3
    CALL MOSTRAR_CARACTER
    MOVLW ']'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    
    MOVLW .7
    CPFSGT CANVI_LINEA,0
    RETURN
    CLRF CANVI_LINEA,0
    MOVLW '\n'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    MOVLW '\r'
    MOVWF VALUE,0
    GOTO MOSTRAR_CARACTER
    RETURN
    
SW_VIEW
    MOVLW '='
    MOVWF VALUE,0
    MOVLW .1
    CPFSLT VALOR,0
    RETURN
    MOVLW ' '
    MOVWF VALUE,0
    RETURN

SW_VIEW_2
    MOVLW ' '
    MOVWF VALUE,0
    MOVLW .1
    CPFSGT VALOR,0
    RETURN
    MOVLW 'X'
    MOVWF VALUE,0
    MOVLW .2
    CPFSGT VALOR,0
    RETURN
    MOVLW '='
    MOVWF VALUE,0
    RETURN
    
    
SW_VIEW_3
    MOVLW ' '
    MOVWF VALUE,0
    MOVLW .0
    CPFSGT VALOR,0
    RETURN
    MOVLW '*'
    MOVWF VALUE,0
    MOVLW .1
    CPFSGT VALOR,0
    RETURN
    MOVLW 'X'
    MOVWF VALUE,0
    MOVLW .2
    CPFSGT VALOR,0
    RETURN
    MOVLW '='
    MOVWF VALUE,0
    RETURN

    
    
READ_FLASH
    CALL   INIT_FLASH
BUCLE_ESCRIPTURA_MENU_1
    TBLRD*+
    MOVFF   TABLAT,VALUE
    MOVLW   .63
    SUBWF   VALUE,0,0
    BTFSC   STATUS,Z,0
    RETURN  
    CALL MOSTRAR_CARACTER
    GOTO    BUCLE_ESCRIPTURA_MENU_1
    
READ_FLASH_2
    CALL   INIT_FLASH_2
BUCLE_ESCRIPTURA_MENU_2
    TBLRD*+
    MOVFF   TABLAT,VALUE
    MOVLW   .63
    SUBWF   VALUE,0,0
    BTFSC   STATUS,Z,0
    RETURN  
    CALL MOSTRAR_CARACTER
    GOTO    BUCLE_ESCRIPTURA_MENU_2
    
READ_FLASH_3
    CALL   INIT_FLASH_3
BUCLE_ESCRIPTURA_MENU_3
    TBLRD*+
    MOVFF   TABLAT,VALUE
    MOVLW   .63
    SUBWF   VALUE,0,0
    BTFSC   STATUS,Z,0
    RETURN  
    CALL MOSTRAR_CARACTER
    GOTO    BUCLE_ESCRIPTURA_MENU_3
    
READ_FLASH_5
    CALL   INIT_FLASH_5
BUCLE_ESCRIPTURA_MENU_5
    TBLRD*+
    MOVFF   TABLAT,VALUE
    MOVLW   .63
    SUBWF   VALUE,0,0
    BTFSC   STATUS,Z,0
    RETURN  
    CALL MOSTRAR_CARACTER
    GOTO    BUCLE_ESCRIPTURA_MENU_5
    


MOSTRAR_NOVA_PAG
    MOVLW   .12
    MOVWF   VALUE, 0
    CALL    MOSTRAR_CARACTER
    RETURN
    
READ_OPTION_1
    BTFSS   PIR1, RCIF,0
    RETURN
    MOVFF    RCREG,CONTINGUT
    MOVFF   CONTINGUT,VALUE
    CALL MOSTRAR_CARACTER
    MOVLW '\n'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    MOVLW '\r'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    MOVLW .49
    SUBWF CONTINGUT,0,0
    BTFSC STATUS,Z,0
    SETF  FLAG_OPCIO_1,0 
    MOVLW .50
    SUBWF CONTINGUT,0,0
    BTFSC STATUS,Z,0
    SETF FLAG_OPCIO_2,0
    BTFSC   FLAG_OPCIO_1,0,0
    RETURN
    BTFSC   FLAG_OPCIO_2,0,0
    RETURN
    CALL MOSTRAR_NOVA_PAG
    CALL   READ_FLASH
    RETURN
    
    
READ_OPTION_2
    BTFSS   PIR1, RCIF,0
    RETURN
    MOVFF    RCREG,CONTINGUT
    MOVFF   CONTINGUT,VALUE
    CALL MOSTRAR_CARACTER
    MOVLW '\n'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    MOVLW '\r'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    MOVLW .49
    SUBWF CONTINGUT,0,0
    BTFSC STATUS,Z,0
    GOTO GLOVAL_VIEW_OPTION
    MOVLW .50
    SUBWF CONTINGUT,0,0
    BTFSC STATUS,Z,0
    GOTO NUKE_OPTION
    MOVLW .51
    SUBWF CONTINGUT,0,0
    BTFSC STATUS,Z,0
    GOTO SONG_OPTION
    CALL MOSTRAR_NOVA_PAG
    CALL   READ_FLASH_2
    RETURN
    
GLOVAL_VIEW_OPTION
    SETF GLOVAL_VIEW,0
    BTG CURRENT_GRID,0,0
    CALL LECTURA_VALORS_EU
    BTG CURRENT_GRID,0,0
    CLRF GLOVAL_VIEW,0
    CALL READ_FLASH_2
    RETURN
    
NUKE_OPTION
    
    BTFSC CURRENT_GRID ,0,0
    MOVF  NUKE_CHECK_0,0
    BTFSS CURRENT_GRID ,0,0
    MOVF  NUKE_CHECK_1,0
    
    MOVWF NUKE_TRYS,0
    BTFSS NUKE_TRYS ,0,0
    GOTO END_NUKE
    
    BTFSC CURRENT_GRID ,0,0
    BCF  NUKE_CHECK_0,0,0
    BTFSS CURRENT_GRID ,0,0
    BCF  NUKE_CHECK_1,0,0
    
    CALL GUARDAR_NUKE
    MOVLW '\n'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    MOVLW '\r'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    MOVLW '>'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    MOVLW ' '
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
ESPERA_NUKE_1 
    MOVLW .5
    CPFSLT COMPT_LED,0
    CALL CONFIG_ADC_LED
    
    BTFSS   PIR1, RCIF,0
    GOTO ESPERA_NUKE_1
    MOVFF    RCREG,CONTINGUT
    MOVFF   CONTINGUT,VALUE
    MOVFF   VALUE,COORD_X
    MOVLW .48
    SUBWF COORD_X,1,0
    CALL MOSTRAR_CARACTER
    MOVLW ','
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
ESPERA_NUKE_2
    MOVLW .5
    CPFSLT COMPT_LED,0
    CALL CONFIG_ADC_LED
    
    BTFSS   PIR1, RCIF,0
    GOTO ESPERA_NUKE_2
    MOVFF    RCREG,CONTINGUT
    MOVFF   CONTINGUT,VALUE
    MOVFF   VALUE,COORD_Y
    MOVLW .48
    SUBWF COORD_Y,1,0
    CALL MOSTRAR_CARACTER
    
    MOVLW '\n'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    MOVLW '\r'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    
    BCF NUKE_TRYS,7,0
    CALL ATACAR_NUKE
    
    DECFSZ COORD_Y, 1, 0    ;RESTEM 1 AL VALOR DE COORD_Y
    CALL ATACAR_NUKE
    
    DECFSZ COORD_X, 1, 0    ;RESTEM 1 AL VALOR DE COORD_X
    CALL ATACAR_NUKE   ;TORNEM SI NO ESTEM A 1
    
    MOVLW .1
    ADDWF COORD_Y, 1,0	    ;SUMEM 1 AL VALOR DE LA COORD_Y
    CALL ATACAR_NUKE
    
    MOVLW .1
    ADDWF COORD_Y, 1,0	    ;SUMEM 1 AL VALOR DE LA COORD_Y
    CALL ATACAR_NUKE
    
    MOVLW .1
    ADDWF COORD_X, 1,0	    ;SUMEM 1 AL VALOR DE LA COORD_Y
    CALL ATACAR_NUKE
    
    MOVLW .1
    ADDWF COORD_X, 1,0	    ;SUMEM 1 AL VALOR DE LA COORD_Y
    CALL ATACAR_NUKE
    
    DECFSZ COORD_Y, 1, 0    ;RESTEM 1 AL VALOR DE COORD_Y
    CALL ATACAR_NUKE
    
    DECFSZ COORD_Y, 1, 0    ;RESTEM 1 AL VALOR DE COORD_Y
    CALL ATACAR_NUKE
    
    MOVLW b'00001001'		    ;MOVEM EL CURSOR FORA DE LA MATRIU A MOSTRAR   
    MOVWF COORD_Y,0
    ;MOSTREM LA MATRIU ACTUALITZADA
    CLRF FSR0L,0
    CALL LECTURA_VALORS
    
    CALL LECTURA_VALORS_EU
    CALL GUARDAR_CURSOR
    
    CLRF COMPT_1S,0
    
    MOVLW .78
    BTFSC NUKE_TRYS,7,0
    MOVLW .10
    
    MOVWF   SOROLL_FREQ,0
    CALL SOROLL_ALTAVEU
    CLRF COMPT_1S,0
    CALL ESPERA_1S
    CLRF COMPT_1S,0
    CALL ESPERA_1S
    MOVLW   .1
    CPFSGT   PWM_S0,0
    GOTO    END_GAME
    CPFSGT   PWM_S1,0
    GOTO    END_GAME
    
    CALL INIT_CURSOR
    BTG CURRENT_GRID,0,0
    BTG LATA,RA4,0
    CALL GUARDAR_CURSOR
    
    
    CLRF FSR0L,0
    
    CALL LECTURA_VALORS
    
END_NUKE
    
    CALL LECTURA_VALORS_EU
    CALL READ_FLASH_2
    
    RETURN
    
ATACAR_NUKE
    MOVLW .9
    CPFSLT COORD_X, 0	    ;COMPARA EL WREG AMB COORD_X, SI COORD_Y ES MES GRAN SALTA DE LINEA
    RETURN
    
    MOVLW .9
    CPFSLT COORD_Y, 0	    ;COMPARA EL WREG AMB COORD_X, SI COORD_Y ES MES GRAN SALTA DE LINEA
    RETURN
    
    MOVLW .0
    CPFSGT COORD_X, 0	    ;COMPARA EL WREG AMB COORD_X, SI COORD_Y ES MES GRAN SALTA DE LINEA
    RETURN
    
    MOVLW .0
    CPFSGT COORD_Y, 0	    ;COMPARA EL WREG AMB COORD_X, SI COORD_Y ES MES GRAN SALTA DE LINEA
    RETURN
    
    ;CONVERTIR A RAM LA COORDENADA ACTUAL
    CALL CONVERT_COORD_TO_RAM
    
    MOVFF RAM_COORD,FSR0L	;AGAFEM L'ADREÇA DE LA COORDENADA A ATACAR I LA CARREGUEM AL PUNTER

    ;COMPROVAR EL VALOR QUE TE 00 O 01
    MOVFF   INDF0, VALOR ;COPIEM EL CONTINGUT DE LA RAM A LA VARIABLE CONTINGUT_RAM
    
    MOVLW .0
    CPFSGT  VALOR, 0	;SI EL CONTINGUT DE LA RAM EL MAJOR A 00 S'HO SALTA
    GOTO HAS_TOCAT_AIGUA_N
    MOVLW .1
    CPFSGT  VALOR, 0	;SI EL CONTINGUT DE LA RAM EL MAJOR A 01 S'HO SALTA
    GOTO HAS_TOCAT_BARCO_N
    CLRF FSR0L,0
    RETURN
    
HAS_TOCAT_AIGUA_N
    ;POSAR LA POSICIO EN VERMELL
    MOVLW .2
    MOVWF INDF0, 0	    ;POSEM 10 A LA COORDENADA ATACADA
    CALL GUARDAR_ATACK
    CALL GUARDAR_VIDES
    
    RETURN

    
HAS_TOCAT_BARCO_N
    ;POSAR LA POSICIO EN VERD
    MOVLW .3
    MOVWF INDF0, 0	    ;POSEM 11 A LA COORDENADA ATACADA
    CALL GUARDAR_ATACK
    
    BTFSC CURRENT_GRID ,0,0
    DECF PWM_S1,1,0
    BTFSS CURRENT_GRID ,0,0
    DECF PWM_S0,1,0
    
    BSF NUKE_TRYS,7,0
    
    CALL GUARDAR_VIDES
    
    RETURN
    
    
SONG_OPTION
    CALL READ_FLASH_3
    MOVLW .5
    MOVWF COMPTADOR_LECTURA,0
    MOVLW .138
    MOVWF FSR0L,0
ESPERA_SONG
    MOVLW .5
    CPFSLT COMPT_LED,0
    CALL CONFIG_ADC_LED

    BTFSS   PIR1, RCIF,0
    GOTO ESPERA_SONG
    MOVFF    RCREG,VALUE
    CALL MOSTRAR_CARACTER
    ;MOVFF   CONTINGUT,VALUE
    MOVLW .143
    MOVWF FSR0L,0
    MOVF COMPTADOR_LECTURA,0
    SUBWF FSR0L,1,0
    
    MOVLW .48
    SUBWF VALUE,1,0
    MOVFF VALUE,POSTINC0
    
    DECFSZ COMPTADOR_LECTURA,1,0
    GOTO ESPERA_SONG
    
    MOVLW '\n'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    MOVLW '\r'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    
    CALL GUARDAR_SONG
    
    CALL READ_FLASH_2
    
    RETURN

	
    
	
INICIALITZAR_EEPROM
    ;INCF CANVI_LINEA,1,0
    MOVF FSR0L,0
    MOVWF EEADR,0 ; Data Memory Address to write
    MOVF POSTINC0,0 ;
    ;CALL ADRESS_TO_CHAR
    MOVWF EEDATA,0 ; Data Memory Value to write
    
    CALL PROCES_ESCRIPTURA_EEPROM
    
    MOVLW .143
    CPFSEQ FSR0L, 0			    ;Jugador 1
    GOTO INICIALITZAR_EEPROM
    CLRF FSR0L,0
    RETURN
    
PROCES_ESCRIPTURA_EEPROM
    BCF EECON1, EEPGD,0 ; Point to DATA memory
    BCF EECON1, CFGS,0 ; Access EEPROM
    BSF EECON1, WREN,0 ; Enable writes

    BCF INTCON, GIE ; Disable Interrupts
    MOVLW 55h ;
    MOVWF EECON2 ; Write 55h
    MOVLW 0AAh ;
    MOVWF EECON2 ; Write 0AAh
    BSF EECON1, WR ; Set WR bit to begin write
    
    BSF INTCON, GIE, 0 ; Enable Interrupts

ESPERA_END_E
    BTFSC EECON1,WR,0
    GOTO ESPERA_END_E
    
    RETURN
    
LECTURA_EEPROM
    MOVF FSR0L,0 ;
    
    MOVWF EEADR,0 ; Data Memory Address to write
    
    BCF EECON1, EEPGD,0 ; Point to DATA memory
    BCF EECON1, CFGS,0 ; Access EEPROM
    BSF EECON1, RD,0 ; EEPROM Read
    MOVFF EEDATA,POSTINC0 ; W = EEDATA
    ;MOVLW .136
    MOVLW .143
    CPFSEQ FSR0L, 0			    ;Jugador 1
    GOTO LECTURA_EEPROM
    CLRF FSR0L,0
    RETURN
    
GUARDAR_CURSOR
    MOVLW .128
    MOVWF EEADR,0 ; Data Memory Address to write
    MOVFF COORD_X,EEDATA
    CALL PROCES_ESCRIPTURA_EEPROM
    MOVLW .129
    MOVWF EEADR,0 ; Data Memory Address to write
    MOVFF COORD_Y,EEDATA
    CALL PROCES_ESCRIPTURA_EEPROM
    MOVLW .130
    MOVWF EEADR,0 ; Data Memory Address to write
    CLRF EEDATA,0
    BTFSC CURRENT_GRID,0,0
    SETF EEDATA,0
    CALL PROCES_ESCRIPTURA_EEPROM
    RETURN
    
GUARDAR_VIDES
    MOVLW .131
    MOVWF EEADR,0 ; Data Memory Address to write
    MOVFF PWM_S0,EEDATA
    CALL PROCES_ESCRIPTURA_EEPROM
    MOVLW .132
    MOVWF EEADR,0 ; Data Memory Address to write
    MOVFF PWM_S1,EEDATA
    CALL PROCES_ESCRIPTURA_EEPROM
    RETURN
    
GUARDAR_INFO_SERVOS
    
    MOVLW .133
    MOVWF EEADR,0 ; Data Memory Address to write
    MOVFF MAX_PWM,EEDATA
    CALL PROCES_ESCRIPTURA_EEPROM
    MOVLW .134
    MOVWF EEADR,0 ; Data Memory Address to write
    MOVFF TEMPS_INC_L,EEDATA
    CALL PROCES_ESCRIPTURA_EEPROM
    MOVLW .135
    MOVWF EEADR,0 ; Data Memory Address to write
    MOVFF TEMPS_INC_H,EEDATA
    CALL PROCES_ESCRIPTURA_EEPROM
    
    RETURN
    
GUARDAR_ATACK
    
    MOVFF FSR0L, EEADR ; Data Memory Address to write
    MOVFF INDF0,EEDATA
    CALL PROCES_ESCRIPTURA_EEPROM
    
    RETURN
    
GUARDAR_NUKE
    MOVLW .136
    MOVWF EEADR,0
    MOVFF NUKE_CHECK_0,EEDATA
    CALL PROCES_ESCRIPTURA_EEPROM
    
    MOVLW .137
    MOVWF EEADR,0
    MOVFF NUKE_CHECK_1,EEDATA
    CALL PROCES_ESCRIPTURA_EEPROM
    RETURN
    
GUARDAR_SONG
    MOVLW .138
    MOVWF FSR0L,0
    MOVFF FSR0L, EEADR ; Data Memory Address to write
    MOVFF POSTINC0,EEDATA
    CALL PROCES_ESCRIPTURA_EEPROM
    MOVFF FSR0L, EEADR ; Data Memory Address to write
    MOVFF POSTINC0,EEDATA
    CALL PROCES_ESCRIPTURA_EEPROM
    MOVFF FSR0L, EEADR ; Data Memory Address to write
    MOVFF POSTINC0,EEDATA
    CALL PROCES_ESCRIPTURA_EEPROM
    MOVFF FSR0L, EEADR ; Data Memory Address to write
    MOVFF POSTINC0,EEDATA
    CALL PROCES_ESCRIPTURA_EEPROM
    MOVFF FSR0L, EEADR ; Data Memory Address to write
    MOVFF POSTINC0,EEDATA
    CALL PROCES_ESCRIPTURA_EEPROM
    RETURN
    
L_EEPROM    
    MOVLW '['
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
   
BUCLE_E
    MOVLW '0'
    
    BTFSC VALUE_E,7,0
    MOVLW '1'
    rlncf VALUE_E,1,0
    rlncf COMPTADOR,1,0
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    
    BTFSS COMPTADOR,0,0
    GOTO BUCLE_E   
    MOVLW ']'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    
    RETURN
    
CARREGAR_EEPROM
    CALL LECTURA_EEPROM
    MOVLW .128
    MOVWF FSR0L,0
    MOVFF POSTINC0,COORD_X
    MOVFF POSTINC0,COORD_Y
    MOVFF POSTINC0,CURRENT_GRID
    MOVFF POSTINC0,PWM_S0
    MOVFF POSTINC0,PWM_S1
    MOVFF POSTINC0,MAX_PWM
    MOVFF POSTINC0,TEMPS_INC_H
    MOVFF POSTINC0,TEMPS_INC_L
    
    MOVFF POSTINC0,NUKE_CHECK_0
    MOVFF POSTINC0,NUKE_CHECK_1
    
    RETURN
    
;-------------------------------------------------------------------------------
; x. MODUL ADC
;-------------------------------------------------------------------------------
CONFIG_ADC
    MOVLW   b'00001100'			    ;configurem canals AN0 i AN1 analogics i la resta digitals
    MOVWF   ADCON1,0			    ;carreguem el valor al registre ADCON1
    MOVLW   b'00101100'			    ;configurem adquisition time i conversion clock
    MOVWF   ADCON2,0			    ;carreguem el valor al registre ADCON2
    RETURN

CONFIG_ADC_X    
    MOVLW   b'00000001'			    ;configurem canal X joystick
    MOVWF   ADCON0,0
    CALL    ESPERA_16MS
    BSF	    ADCON0,1,0
    CALL    POLLING_GODONE		    ;fer polling del bit go/done
    MOVFF   ADRESH,JOYX			    ;treure la conversió AD a la variable JOYX.
    CALL    MOURE_JOYX
    RETURN

CONFIG_ADC_Y    
    MOVLW   b'00000101'			    ;configurem canal Y joystick
    MOVWF   ADCON0,0
    CALL    ESPERA_16MS
    BSF	    ADCON0,1,0
    CALL    POLLING_GODONE		    ;fer polling del bit go/done
    MOVFF   ADRESH,JOYY		    ;treure la conversió AD a la variable JOYY. 
    CALL    MOURE_JOYY
    RETURN

POLLING_GODONE
    BTFSC   ADCON0,1			    ;fer polling del bit go/done i esperar a que valgui zero
    GOTO    POLLING_GODONE		    ;si encara val 1, seguir fent polling
    RETURN
    
MOURE_JOYX
    ;Em de saber si es dreta o esquerra
    ;Si es dreta CALL MOURE_RIGHT
    ;Si es esquerra CALL MOURE_LEFT
    
    MOVLW   .66
    CPFSGT  JOYX,0
    GOTO    LEFT
    MOVLW   .132
    CPFSGT  JOYX,0
    GOTO    CONFIG_ADC_Y		    ;AQUI SIMPLEMENT FAREM UN RETURN, JA QUE NO HO CONSIDERAREM COM A MOVIMENT
    MOVLW   .194	
    CPFSLT  JOYX,0
    GOTO    RIGHT
    GOTO    CONFIG_ADC_Y
    
 
MOURE_JOYY
    
    ;Em de saber si es up o down
    ;Si es up CALL MOURE_UP
    ;Si es down CALL MOURE_DOWN
    
    MOVLW   .66                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               
    CPFSGT  JOYY,0
    GOTO    UP
    MOVLW   .132
    CPFSGT  JOYY,0
    GOTO    MIG_Y		    ;AQUI SIMPLEMENT FAREM UN RETURN, JA QUE NO HO CONSIDERAREM COM A MOVIMENT
    MOVLW   .198	
    CPFSLT  JOYY,0
    GOTO    DOWN
    GOTO    MIG_Y
    

MIG_Y
    CLRF    JOY_FLAG_Y,0
    RETURN
    
LEFT
    MOVLW .1
    CPFSLT  JOY_FLAG_Y,0
    RETURN
    CALL    ESPERA_16MS
    CALL    MOURE_LEFT
    ;CALL    ESPERA_16MS
    SETF    JOY_FLAG_Y,0
    RETURN
    
RIGHT
    MOVLW .1
    CPFSLT  JOY_FLAG_Y,0
    RETURN
    CALL    ESPERA_16MS
    CALL    MOURE_RIGHT
    ;CALL    ESPERA_16MS
    SETF    JOY_FLAG_Y,0
    RETURN    
    
DOWN
    MOVLW   .1
    CPFSLT  JOY_FLAG_Y
    RETURN
    CALL    ESPERA_16MS
    CALL    MOURE_DOWN
    ;CALL    ESPERA_16MS
    SETF    JOY_FLAG_Y
    RETURN   
    
UP
    MOVLW   .1
    CPFSLT  JOY_FLAG_Y
    RETURN
    CALL    ESPERA_16MS
    CALL    MOURE_UP
    ;CALL    ESPERA_16MS
    SETF    JOY_FLAG_Y
    RETURN

    
CONFIG_ADC_LED    
    MOVLW   b'00001001'			    ;configurem canal Y joystick
    MOVWF   ADCON0,0
    CALL    ESPERA_16MS
    BSF	    ADCON0,1,0
    CALL    POLLING_GODONE		    ;fer polling del bit go/done
    MOVFF   ADRESH,LED_INT
    
    CLRF    COMPT_LED,0
    MOVF LED_INT,0
    BTFSC END_GAME_M,0,0
    RETURN
    CPFSEQ  LED_INT_ANT,0
    CALL    LECTURA_VALORS
    MOVFF   LED_INT,LED_INT_ANT
    RETURN

    
;-------------------------------------------------------------------------------
; X. COLORS RAINBOW
;------------------------------------------------------------------------------- 
    
ASSIGN_RED_RAINBOW
    MOVF  LED_INT,0
    MOVWF LED_Red_Mirall,0 
    CLRF  LED_Blue_Mirall,0  
    CLRF  LED_Green_Mirall,0  
    GOTO PRINT_LED
    
ASSIGN_GREEN_RAINBOW
    MOVF  LED_INT,0
    MOVWF LED_Green_Mirall,0
    CLRF  LED_Red_Mirall,0
    CLRF  LED_Blue_Mirall,0  
    GOTO PRINT_LED
 
ASSIGN_PURPULE_RAINBOW
    MOVF   LED_INT,0
    MOVWF   LED_Blue_Mirall,0
    MOVWF   LED_Red_Mirall,0 
    CLRF    LED_Green_Mirall,0 
    GOTO PRINT_LED
 
ASSIGN_BLUE_RAINBOW
    MOVF   LED_INT,0
    MOVWF LED_Blue_Mirall,0
    CLRF  LED_Red_Mirall,0 
    CLRF  LED_Green_Mirall,0 
    GOTO PRINT_LED 

ASSIGN_CIAN_RAINBOW
    MOVF   LED_INT,0
    MOVWF   LED_Blue_Mirall,0
    MOVWF   LED_Green_Mirall,0
    CLRF    LED_Red_Mirall,0    
    GOTO PRINT_LED
    
ASSIGN_YELLOW_RAINBOW
    CLRF    LED_Blue_Mirall,0
    MOVF   LED_INT,0
    MOVWF   LED_Green_Mirall,0
    MOVWF   LED_Red_Mirall,0 
    GOTO PRINT_LED   
      
ASSIGN_WHITE_RAINBOW
    MOVF   LED_INT,0
    MOVWF   LED_Blue_Mirall,0
    MOVWF   LED_Green_Mirall,0
    MOVWF   LED_Red_Mirall,0
    GOTO PRINT_LED
    
ASSIGN_BLACK_RAINBOW
    CLRF    LED_Blue_Mirall,0
    CLRF   LED_Green_Mirall,0
    CLRF   LED_Red_Mirall,0 
    GOTO PRINT_LED
    
    
ESPERA_RESET_MATRIU_R
    CLRF VALOR_RAINBOW, 0
    CALL ESPERA_100MICS
    CALL ESPERA_100MICS
    MOVFF COMPT_RAINBOW_R,COMPT_RAINBOW
PINTAR_RAINBOW
    RLNCF COMPT_RAINBOW,1,0
    
    MOVLW .63
    CPFSGT VALOR_RAINBOW,0
    GOTO BUCLE_PINTAR_RAINBOW
    
    CLRF VALOR_RAINBOW,0
    RETURN
    
BUCLE_PINTAR_RAINBOW
    SETF MATRIU_CONTROL,0
    ;RLNCF COMPT_RAINBOW,1,0
    INCF VALOR_RAINBOW,1,0
    RLNCF COLOR_RAINBOW,1,0
    CALL ASIGN_RAINBOW
    
    BTFSS MATRIU_CONTROL, 0, 0
    GOTO ESPERA_RESET_MATRIU_R
    BTFSS COLOR_RAINBOW,0,0
    GOTO BUCLE_PINTAR_RAINBOW
    GOTO PINTAR_RAINBOW

ASIGN_RAINBOW 
    MOVLW b'00000001'
    CPFSGT COMPT_RAINBOW,0
    GOTO ASSIGN_RED
    MOVLW b'00000010'
    CPFSGT COMPT_RAINBOW,0
    GOTO ASSIGN_YELLOW_RAINBOW
    MOVLW b'00000100'
    CPFSGT COMPT_RAINBOW,0
    GOTO ASSIGN_GREEN
    MOVLW b'00001000'
    CPFSGT COMPT_RAINBOW,0
    GOTO ASSIGN_PURPULE_RAINBOW
    MOVLW b'00010000'
    CPFSGT COMPT_RAINBOW,0
    GOTO ASSIGN_BLUE
    MOVLW b'00100000'
    CPFSGT COMPT_RAINBOW,0
    GOTO ASSIGN_CIAN_RAINBOW
    MOVLW b'01000000'
    CPFSGT COMPT_RAINBOW,0
    GOTO ASSIGN_WHITE
    MOVLW b'10000000'
    CPFSGT COMPT_RAINBOW,0
    GOTO ASSIGN_BLACK_RAINBOW
    RETURN
    
       
;-------------------------------------------------------------------------------
; 5. MODUL CONTROL DE LED
;------------------------------------------------------------------------------- 
PRINT_VALORS_F1
    MOVLW .0
    CPFSGT VALOR,0
    GOTO ASSIGN_BLUE
    MOVLW .1
    CPFSGT VALOR,0
    GOTO ASSIGN_GREEN 
    
    RETURN
    
PRINT_VALORS_F2
    CALL CONVERT_COORD_TO_RAM
    MOVF RAM_COORD, 0 
    INCF WREG,0,0
    
    CPFSEQ FSR0L,0	    ;A la fase 2 printarem el taulell i a la posició
    GOTO PRINT_V_2	    ;on tinguem el cursor la mostrarem de color blanc
    GOTO ASSIGN_WHITE
    
PRINT_V_2    
    MOVLW .3
    CPFSLT VALOR,0
    GOTO ASSIGN_GREEN
    MOVLW .2
    CPFSLT VALOR,0
    GOTO ASSIGN_RED
    GOTO ASSIGN_BLUE
    
ASSIGN_WHITE
    MOVF  LED_INT,0
    MOVWF LED_Blue_Mirall,0
    MOVWF LED_Red_Mirall,0 
    MOVWF LED_Green_Mirall,0   
    GOTO PRINT_LED 
    
ASSIGN_BLUE
    MOVF  LED_INT,0
    MOVWF LED_Blue_Mirall,0
    CLRF  LED_Red_Mirall,0 
    CLRF  LED_Green_Mirall,0   
    GOTO PRINT_LED 
    
ASSIGN_GREEN   
    MOVF  LED_INT,0
    MOVWF LED_Green_Mirall,0
    CLRF  LED_Red_Mirall,0
    CLRF  LED_Blue_Mirall,0   
    GOTO PRINT_LED 
    
ASSIGN_RED
    MOVF  LED_INT,0
    MOVWF LED_Red_Mirall,0 
    CLRF  LED_Blue_Mirall,0  
    CLRF  LED_Green_Mirall,0   
    GOTO PRINT_LED   
 
PRINT_LED  

LED_GREEN
    BSF LATD,RD0,0
    rlncf LED_Green_Mirall,1,0
    NOP
    BTFSS LED_Green_Mirall,7,0
    BCF LATD,RD0,0
    rlncf COMPTADOR,1,0
    NOP
    NOP
    BCF LATD,RD0,0
    BTFSS COMPTADOR,0,0
    GOTO LED_GREEN 
LED_RED   
    BSF LATD,RD0,0
    rlncf LED_Red_Mirall,1,0
    NOP
    BTFSS LED_Red_Mirall,7,0
    BCF LATD,RD0,0
    rlncf COMPTADOR,1,0
    NOP
    NOP
    BCF LATD,RD0,0
    BTFSS COMPTADOR,0,0
    GOTO LED_RED  
LED_BLUE    
    BSF LATD,RD0,0
    rlncf LED_Blue_Mirall,1,0
    NOP
    BTFSS LED_Blue_Mirall,7,0
    BCF LATD,RD0,0
    rlncf COMPTADOR,1,0
    NOP
    NOP
    BCF LATD,RD0,0
    BTFSS COMPTADOR,0,0
    GOTO LED_BLUE    
    RETURN
;-------------------------------------------------------------------------------
; 6. MODUL CONTROL DE REBOTS
;-------------------------------------------------------------------------------     
ESPERA_16MS
    SETF    COMPTADOR1,0		    ;a freq = 40MHz, tenim un Tinst = 100ns,
    MOVLW   .208			    ;amb increments de 255 i 208 arribem a 16ms
    MOVWF   COMPTADOR2,0    
    GOTO INCREMENTA_XS

INCREMENTA_16MS
    DECFSZ  COMPTADOR1,1,0		    ;miro si COMPTADOR1 és 0
    GOTO    INCREMENTA_16MS		    ;si no és 0, segueixo comptant
    SETF    COMPTADOR1,0
    DECFSZ  COMPTADOR2,1,0		    ;miro si COMPTADOR2 és 0	
    GOTO    INCREMENTA_16MS		    ;si no és 0, segueixo comptant
    RETURN    

ESPERA_1MS
    SETF    COMPTADOR1,		    ;a freq = 40MHz, tenim un Tinst = 100ns,
    MOVLW   .13			    ;amb increments de 255 i 13 arribem a 1ms
    MOVWF   COMPTADOR2,0    
    GOTO INCREMENTA_XS

ESPERA_100MICS
    SETF    COMPTADOR1,		    ;a freq = 40MHz, tenim un Tinst = 100ns,
    MOVLW   .2			    ;amb increments de 255 i 13 arribem a 1ms
    MOVWF   COMPTADOR2,0    
    GOTO INCREMENTA_XS
    
INCREMENTA_XS
    DECFSZ  COMPTADOR1,1,0		    ;miro si COMPTADOR1 és 0
    GOTO    INCREMENTA_XS		    ;si no és 0, segueixo comptant
    SETF    COMPTADOR1,0
    DECFSZ  COMPTADOR2,1,0		    ;miro si COMPTADOR2 és 0	
    GOTO    INCREMENTA_XS		    ;si no és 0, segueixo comptant
    RETURN      
;-------------------------------------------------------------------------------
; 7. POLLING PULSADORS
;
; 7.1. PULSADOR RIGHT   
;-------------------------------------------------------------------------------
    
CONTROL_RIGHT
    CALL    ESPERA_16MS
    BTFSS   PORTD,RD1,0	
    RETURN
    CALL    MOURE_RIGHT
    CALL GUARDAR_CURSOR
ESPERA_POLSADOR_RD1
    BTFSC   PORTD,RD1,0			    ;Esperem a que es des premi el polsador.
    GOTO    ESPERA_POLSADOR_RD1
    CALL    ESPERA_16MS
    BTFSC   PORTD,RD1,0			    ;Esperem a que es des premi el polsador.
    GOTO    ESPERA_POLSADOR_RD1
    RETURN
    
;-------------------------------------------------------------------------------
; 7.2. PULSADOR DOWN
;-------------------------------------------------------------------------------      
CONTROL_DOWN
    CALL    ESPERA_16MS
    BTFSC   PORTB,RB5,0	
    RETURN
    CALL    MOURE_DOWN
    CALL GUARDAR_CURSOR
ESPERA_POLSADOR_RB5
    BTFSS   PORTB,RB5,0			    ;Esperem a que es des premi el polsador.
    GOTO    ESPERA_POLSADOR_RB5
    CALL    ESPERA_16MS
    RETURN  
;-------------------------------------------------------------------------------
; 7.3. PULSADOR ATACK
;-------------------------------------------------------------------------------      
CONTROL_ATACK
    CALL    ESPERA_16MS
    BTFSS   PORTD,RD3,0	
    RETURN
    CALL    ATACAR
ESPERA_POLSADOR_RB7
    BTFSC   PORTD,RD3,0			    ;Esperem a que es des premi el polsador.
    GOTO    ESPERA_POLSADOR_RB7
    CALL    ESPERA_16MS
    RETURN   
    
;-------------------------------------------------------------------------------
; 7.4. PULSADOR LEFT
;-------------------------------------------------------------------------------      
CONTROL_LEFT
    CALL    ESPERA_16MS
    BTFSC   PORTB,RB4,0	
    RETURN
    CALL    MOURE_LEFT
    CALL GUARDAR_CURSOR
ESPERA_POLSADOR_RB4
    BTFSS   PORTB,RB4,0			    ;Esperem a que es des premi el polsador.
    GOTO    ESPERA_POLSADOR_RB4
    CALL    ESPERA_16MS
    RETURN   
;-------------------------------------------------------------------------------
; 7.5. PULSADOR UP
;-------------------------------------------------------------------------------      
CONTROL_UP
    CALL    ESPERA_16MS
    BTFSC   PORTB,RB3,0	
    RETURN
    CALL    MOURE_UP
    CALL GUARDAR_CURSOR
ESPERA_POLSADOR_RB3
    BTFSS   PORTB,RB3,0			    ;Esperem a que es des premi el polsador.
    GOTO    ESPERA_POLSADOR_RB3
    CALL    ESPERA_16MS
    RETURN     
 
;-------------------------------------------------------------------------------
; 8. FINALITZACIO DEL JOC
;-------------------------------------------------------------------------------     
END_GAME
    
    ;CALL LECTURA_VALORS_EU_EP
    
    SETF END_GAME_M,0
    MOVLW .138
    MOVWF FSR2L,0
    
    CLRF VALOR_RAINBOW,0
    MOVLW b'00000001'
    MOVWF COMPT_RAINBOW,0
    MOVWF COMPT_RAINBOW_R,0
    CALL PINTAR_RAINBOW
    
   
    CALL INIT_FLASH_4
    MOVF POSTINC2,0
    ADDWF TBLPTRL,1,0
    TBLRD*+
    MOVF   TABLAT,0
    
    MOVWF   SOROLL_FREQ,0
    CLRF COMPT_1S,0	    ;FAREM SONAR LES 5 NOTES DE L'ALTAVEU UN COP ACABEM
    
    CALL SOROLL_ALTAVEU	    ;1 NOTA
    
    MOVLW .5
    CPFSLT COMPT_LED,0
    CALL CONFIG_ADC_LED
    
    MOVLW b'00000010'
    MOVWF COMPT_RAINBOW,0
    MOVWF COMPT_RAINBOW_R,0
    CALL PINTAR_RAINBOW
    CLRF COMPT_1S,0
    
    CALL INIT_FLASH_4
    MOVF POSTINC2,0
    ADDWF TBLPTRL,1,0
    TBLRD*+
    MOVF   TABLAT,0
    
    MOVWF   SOROLL_FREQ,0
    CALL SOROLL_ALTAVEU	    ;2 NOTA
    
    MOVLW .5
    CPFSLT COMPT_LED,0
    CALL CONFIG_ADC_LED
    
    MOVLW b'00000100'
    MOVWF COMPT_RAINBOW,0
    MOVWF COMPT_RAINBOW_R,0
    CALL PINTAR_RAINBOW
    
    CLRF COMPT_1S,0
    
    CALL INIT_FLASH_4
    MOVF POSTINC2,0
    ADDWF TBLPTRL,1,0
    TBLRD*+
    MOVF   TABLAT,0
    
    MOVWF   SOROLL_FREQ,0
    CALL SOROLL_ALTAVEU	    ;3 NOTA
    
    MOVLW .5
    CPFSLT COMPT_LED,0
    CALL CONFIG_ADC_LED
    
    MOVLW b'00001000'
    MOVWF COMPT_RAINBOW,0
    MOVWF COMPT_RAINBOW_R,0
    CALL PINTAR_RAINBOW
    CLRF COMPT_1S,0
    
    CALL INIT_FLASH_4
    MOVF POSTINC2,0
    ADDWF TBLPTRL,1,0
    TBLRD*+
    MOVF   TABLAT,0
    
    MOVWF   SOROLL_FREQ,0
    CALL SOROLL_ALTAVEU	    ;4 NOTA
    
    MOVLW .5
    CPFSLT COMPT_LED,0
    CALL CONFIG_ADC_LED
    
    MOVLW b'00010000'
    MOVWF COMPT_RAINBOW,0
    MOVWF COMPT_RAINBOW_R,0
    CALL PINTAR_RAINBOW
    
    
    CALL INIT_FLASH_4
    MOVF POSTINC2,0
    ADDWF TBLPTRL,1,0
    TBLRD*+
    MOVF   TABLAT,0
    
    MOVWF   SOROLL_FREQ,0
    CLRF COMPT_1S,0
    CALL SOROLL_ALTAVEU	    ;5 NOTA
    
    
    MOVLW .5
    CPFSLT COMPT_LED,0
    CALL CONFIG_ADC_LED
    
    
    MOVLW b'00100000'
    MOVWF COMPT_RAINBOW,0
    MOVWF COMPT_RAINBOW_R,0
    CALL PINTAR_RAINBOW
    
    CALL MOSTRAR_NOVA_PAG
    CALL READ_FLASH_5
    
    MOVLW   .1
    CPFSGT   PWM_S0,0
    CALL    GUANYADOR_1
    MOVLW   .1
    CPFSGT   PWM_S1,0
    CALL    GUANYADOR_0
    
    MOVLW '\n'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    MOVLW '\r'
    MOVWF VALUE,0
    CALL MOSTRAR_CARACTER
    
    CALL LECTURA_VALORS_EU_EP
    
    
    
END_BUCLE		    ;DEIXEM EL PROGRAMA EN AQUEST BUCLE FINS QUE ES
    CLRF COMPT_1S,0	    ;TORNI A APRETAR PCI
     
    MOVLW b'00100000'
    MOVWF COMPT_RAINBOW,0
    MOVLW .5
    CPFSLT COMPT_LED,0
    CALL PINTAR_RAINBOW
    MOVLW .5
    CPFSLT COMPT_LED,0
    CALL CONFIG_ADC_LED
    GOTO END_BUCLE
    
GUANYADOR_1
    MOVLW '1'
    MOVWF VALUE,0
    GOTO MOSTRAR_CARACTER
    
GUANYADOR_0
    MOVLW '0'
    MOVWF VALUE,0
    GOTO MOSTRAR_CARACTER
    
;-------------------------------------------------------------------------------
; MAIN
;------------------------------------------------------------------------------- 
MAIN
    CALL    CONFIG_PORTS		    ;inicialitzar ports
    CALL    INIT_VARS			    ;inicialitzar perifèrics i variables
    CALL    CONFIG_ADC
    CALL    CONFIG_INT
    ;CARREGAR JUGADOR 0
    MOVLW   .255		;AQUI ANIREM LLEGINT LES COORDENADES 
    MOVWF   VALUEESPERA,0	;DE LA FASE 1 I LES ANIREM GUARDANT A LA RAM
    CALL    ESPERA
    CALL    LECTURA_VALORS
    MOVLW   .255
    MOVWF   VALUEESPERA,0
    CALL    ESPERA
    CALL    LECTURA_VALORS 
    
    MOVLW   .255
    MOVWF   VALUEESPERA,0
    CALL    ESPERA
    ;Mostrar menu i esperar opcio
    ;Anar al bucle de fase1
    CALL MOSTRAR_NOVA_PAG
    
    CALL   READ_FLASH
    CLRF FSR0L,0
    
    
FASE1	
    BTFSS FLAG_OPCIO_1,0,0
    CALL   READ_OPTION_1
    BTFSC FLAG_OPCIO_2,0,0
    GOTO  INIT_FASE2
    MOVLW .5
    CPFSLT COMPT_LED,0
    CALL CONFIG_ADC_LED
    BTFSS   PORTD,RD2,0	    ;ESPEREM EL SENYAL START GAME PER SABER SI 
    GOTO FASE1		    ;HEM DE SORTIR DEL BUCLE DE LA FASE 1 I 
    
    CALL INIT_CURSOR	    ;JA PODEM COMENÇAR A JUGAR
    CALL INIT_INTERUPT_VARIABLES
    SETF STARTGAME,0
    
    BTG	 CURRENT_GRID,0,0
    CALL    LECTURA_VALORS 
    MOVLW   .255
    MOVWF   VALUEESPERA,0
    CALL	ESPERA
    
ESPERA_OPCIO
    BTFSC   FLAG_OPCIO_1,0,0
    GOTO    INIT_FASE_JOC
    CALL READ_OPTION_1
    BTFSC FLAG_OPCIO_2,0,0
    GOTO  INIT_FASE2
    GOTO  ESPERA_OPCIO
    
INIT_FASE_JOC
    CALL READ_FLASH_2
    CALL    INICIALITZAR_EEPROM
LOOP					    ;fem polling dels polsadors
    
    BTFSC   PORTD,RD1,0			    ;Esperem a que es premi el polsador.
    CALL    CONTROL_RIGHT
    BTFSS   PORTB,RB5,0			    ;Esperem a que es premi el polsador.
    CALL    CONTROL_DOWN
    BTFSC   PORTD,RD3,0			    ;Esperem a que es premi el polsador.
    CALL    CONTROL_ATACK
    BTFSS   PORTB,RB4,0			    ;Esperem a que es premi el polsador.
    CALL    CONTROL_LEFT
    BTFSS   PORTB,RB3,0			    ;Esperem a que es premi el polsador.
    CALL    CONTROL_UP
    CALL    CONFIG_ADC_X
    
    MOVLW .5
    CPFSLT COMPT_LED,0
    CALL CONFIG_ADC_LED
    CALL   READ_OPTION_2
    GOTO LOOP    
    
INIT_FASE2
    CALL CARREGAR_EEPROM
    ;CALL    CONFIG_INT
    CLRF ACTUAL_PWM,0
    ;CALL INIT_TIMER0
    
    ;BCF                                                                                                                                                                                                                                                ,0,0
    BSF LATA,RA4,0
    BTFSC CURRENT_GRID,0,0
    BCF LATA,RA4,0
    SETF STARTGAME,0
    CLRF FSR0L, 0
    
    MOVLW   .1
    CPFSGT   PWM_S0,0
    GOTO    END_GAME
    CPFSGT   PWM_S1,0
    GOTO    END_GAME
    
    CALL    CONVERT_COORD_TO_RAM
    CALL    LECTURA_VALORS 
    MOVLW   .255
    MOVWF   VALUEESPERA,0
    CALL	ESPERA
    
    CALL LECTURA_VALORS_EU
    CALL READ_FLASH_2
    
    GOTO LOOP
    
    END